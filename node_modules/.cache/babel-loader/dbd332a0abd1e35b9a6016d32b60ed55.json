{"ast":null,"code":"import _classCallCheck from\"/Users/liu550/Desktop/salon_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/liu550/Desktop/salon_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"/Users/liu550/Desktop/salon_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/Users/liu550/Desktop/salon_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/liu550/Desktop/salon_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component,Profiler}from'react';import{connect}from'react-redux';import ChatWindow from'./chatwindow.js';import{Button}from'react-bootstrap';import\"./component.css\";import firebase from'../config/firebaseconfig';import{cancelNotifications}from'../redux/actions.js';import ChatContainer from'./chatbox2.js';import ChatSection from'./chatsection.js';import{compose}from'redux';import{firestoreConnect}from'react-redux-firebase';import ProfileCard from'./profilecard.js';import settings from'./settings.js';import ditto from'./ditto.png';/*\nconst ChatBox = (props) => {\n\n\n    const [ chat, setChat ] = useState(true);\n    const chatlist = props.chatshistory;\n\n    const handleOpen = (chat) => {\n        console.log(chat.messages);\n        return (\n            <ChatWindow chat={chat} />\n        );\n    }\n\n    return (\n\n        <div className=\"chatbox-container\">\n\n            <div className=\"chatbox-toggle\">\n                <Button onClick={() => setChat(true)}>Chat box</Button>\n            </div>\n\n    \n            <div className=\"chatbox-subcontainer\">\n            {chatlist && chatlist.map((chat) => {\n                return (\n                    <button className=\"chatbox-section\" onClick={() => handleOpen(chat)}>\n                        <img src={chat.friend_image} style={{ width: \"40px\", height: \"40px\" }}></img>\n                        {chat.friend}\n                        {chat.messages}\n                    </button>\n                )\n                \n                return (\n                    <div className=\"chatbox-section\" onClick={() => handleOpen(chat)}>\n                        <img src={chat.friend_image} style={{ width: \"40px\", height: \"40px\" }}></img>\n                        {chat.friend_name}\n                    </div>\n                )\n                \n                \n        })}\n        </div>\n            \n        </div>\n    );\n}\n*/var ChatBox=/*#__PURE__*/function(_Component){_inherits(ChatBox,_Component);var _super=_createSuper(ChatBox);function ChatBox(props){var _this;_classCallCheck(this,ChatBox);_this=_super.call(this,props);_this.handleOpen=function(chat){_this.setState({chatwindow:true,chat:chat});_this.props.cancelNotifications(chat.id,_this.props.auth.uid);};_this.handleCloseChat=function(){_this.setState({chatwindow:false});};_this.openChat=function(e){e.preventDefault();document.getElementById(\"notifications\").className=\"chatbox-toggle-buttons\";if(_this.state.shownotifications===true){_this.setState({shownotifications:false});}_this.setState({chatbox:!_this.state.chatbox});if(e.target.className===\"chatbox-toggle-buttons\"){e.target.className=\"selected-chatbox-toggle-buttons\";}else e.target.className=\"chatbox-toggle-buttons\";};_this.openNotifications=function(e){e.preventDefault();document.getElementById(\"chat\").className=\"chatbox-toggle-buttons\";if(_this.state.totalroomnotifications>0){firebase.firestore().collection(\"rooms\").doc(_this.props.auth.uid).update({notifications:0});}if(_this.state.chatbox===true){_this.setState({chatbox:false});}_this.setState({shownotifications:!_this.state.shownotifications});if(e.target.className===\"chatbox-toggle-buttons\"){e.target.className=\"selected-chatbox-toggle-buttons\";}else e.target.className=\"chatbox-toggle-buttons\";};_this.orderList=function(list){var chatlist;console.log(list);chatlist=list.sort(function(a,b){return a.time-b.time;});console.log(chatlist);var chatnumber=0;chatlist&&chatlist.map(function(chat){chatnumber=chatnumber+chat.notifications;console.log(chatnumber);});_this.setState({chatlist:chatlist,numberofchatnotifications:chatnumber});};_this.renderProfile=function(id){_this.setState({showProfile:true,whoseProfile:id});};_this.hideProfile=function(){_this.setState({showProfile:false});};_this.state={chatbox:false,shownotifications:false,chatwindow:false,chat:\"\",chatlist:[],notifications:[],totalchatnotifications:0,totalroomnotifications:0,showProfile:false,whoseProfile:\"\"};_this.handleOpen=_this.handleOpen.bind(_assertThisInitialized(_this));_this.openChat=_this.openChat.bind(_assertThisInitialized(_this));_this.openNotifications=_this.openNotifications.bind(_assertThisInitialized(_this));return _this;}_createClass(ChatBox,[{key:\"componentDidMount\",/*\n    componentDidMount() {\n        let chatlist;\n        var totalchatnotifications = 0;\n        firebase.firestore().collection(\"users\").doc(this.props.auth.uid).collection(\"chats_history\").get()\n        .then((querySnapshot) => {\n            querySnapshot.forEach((doc) => {\n                chatlist.push(doc);\n            })\n            return chatlist;\n        })\n        .then((chatlist) => {\n            chatlist = chatlist.sort(function(a, b) {return b.time - a.time});\n            chatlist.map((chat) => {\n                totalchatnotifications = totalchatnotifications + chat.notifications;\n            })\n            this.setState({\n                chatlist: chatlist,\n                totalchatnotifications: totalchatnotifications\n            })\n        })\n        \n        setTimeout(() => {\n            if (this.props.profile.chats_history) {\n            let chatlist;\n            var totalchatnotifications = 0;\n            chatlist = this.props.profile.chats_history.sort(function(a, b) {return b.time - a.time});\n              chatlist.map((chat) => {\n                totalchatnotifications = totalchatnotifications + chat.notifications;\n            })\n            console.log(this.props.profile.chats_history);\n            this.setState({\n                chatlist: chatlist,\n                totalchatnotifications: totalchatnotifications\n            })  \n        }    \n        }, 500)\n        \n    }\n    */value:function componentDidMount(){var _this2=this;setTimeout(function(){var chatlist;var totalchatnotifications=0;chatlist=_this2.props.chat_history.sort(function(a,b){return b.time-a.time;});chatlist.map(function(chat){totalchatnotifications=totalchatnotifications+chat.notifications;});_this2.setState({chatlist:chatlist,totalchatnotifications:totalchatnotifications});},1000);}},{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps,prevstate){var _this3=this;console.log(this.state.chat.time);var chatlist;var totalchatnotifications=0;var _=require(\"lodash\");if(!_.isEqual(prevProps.chat_history,this.props.chat_history)){chatlist=this.props.chat_history.sort(function(a,b){return b.time-a.time;});chatlist.map(function(chat){totalchatnotifications=totalchatnotifications+chat.notifications;});this.setState({chatlist:chatlist,totalchatnotifications:totalchatnotifications});}if(this.props.rooms){var found=this.props.rooms.find(function(room){return room.id===_this3.props.auth.uid;});if(found&&(found.participants.length!==prevstate.notifications.length||found.notifications!==prevstate.totalroomnotifications)){this.setState({notifications:found.participants,totalroomnotifications:found.notifications});}}}/*\n    componentDidUpdate(prevProps, prevstate) {\n        \n        let chatlist;\n        var totalchatnotifications = 0;\n        const _ = require(\"lodash\")\n        if (!_.isEqual(prevProps.profile.chats_history, this.props.profile.chats_history)) {\n            console.log(\"update gets called\");\n              chatlist = this.props.profile.chats_history.sort(function(a, b) {return b.time - a.time});\n              chatlist.map((chat) => {\n                totalchatnotifications = totalchatnotifications + chat.notifications;\n            })\n            this.setState({\n                chatlist: chatlist,\n                totalchatnotifications: totalchatnotifications\n            })         \n       }\n       if (this.props.rooms) {\n        const found = this.props.rooms.find(room => room.id === this.props.auth.uid);\n        if (found && (found.participants.length !== prevstate.notifications.length || found.notifications !== prevstate.totalroomnotifications)) {\n           this.setState({\n                notifications: found.participants,\n                totalroomnotifications: found.notifications\n           })\n        }\n       }     \n    }\n    */},{key:\"render\",/*\n    componentWillReceiveProps() {\n        console.log(\"is it ever called?\");\n        firebase.firestore().collection(\"rooms\").doc(this.props.roomid).get()\n        .then((doc) => {\n            \n            if (doc.exists) {\n                if (doc.data().open === true) {\n                    participants = doc.data().participants;\n                }\n            }           \n             this.setState({\n                 notifications: participants,\n                 \n              })\n           })\n    }\n    */ /*\n    componentWillReceiveProps() {\n        const list = this.props.profile.chats_history;\n        if (list) {\n            this.orderList(list);\n        }\n        if (this.props.auth.uid) {\n        console.log(\"which part is first\");\n        var participants = [];\n        firebase.firestore().collection(\"rooms\").doc(this.props.auth.uid).get()\n        .then((doc) => {\n            if (doc.exists) {\n                if (doc.data().open === true) {\n                    participants = doc.data().participants;\n                    return participants;\n                }\n            }\n        })\n        .then((participants) => {\n            this.setState({\n                notifications: participants\n            })\n        })\n    }\n    }\n    */ /*\n    componentDidUpdate() {\n        if (this.props.profile.chats_history) {\n            this.orderList(this.props.profile.chats_history)\n        }\n        if (this.props.auth.uid) {\n        var participants = [];\n        firebase.firestore().collection(\"rooms\").doc(this.props.auth.uid).get()\n        .then((doc) => {\n            if (doc.exists) {\n                if (doc.data().open === true) {\n                    participants = doc.data().participants;\n                    return participants;\n                }\n            }\n        })\n        .then((participants) => {\n            this.setState({\n                notifications: participants\n            })\n        })\n    }\n    }\n*/value:function render(){var _this4=this;var rooms=this.props.rooms;var box;if(this.state.chatbox){box=/*#__PURE__*/React.createElement(\"div\",{className:\"chatbox-container\"},this.state.showProfile?/*#__PURE__*/React.createElement(\"div\",{className:\"arrow\"},/*#__PURE__*/React.createElement(ProfileCard,{id:this.state.whoseProfile})):null,this.state.chatlist&&this.state.chatlist.map(function(chat){return/*#__PURE__*/React.createElement(\"button\",{className:\"chatbox-section\",onClick:function onClick(){return _this4.handleOpen(chat);}},/*#__PURE__*/React.createElement(\"div\",{style:{float:\"left\",display:\"flex\",textAlign:\"center\"}},/*#__PURE__*/React.createElement(\"img\",{src:chat.friend_image,onMouseOver:function onMouseOver(){return _this4.renderProfile(chat.id);},onMouseOut:_this4.hideProfile,style:{width:\"40px\",height:\"40px\",marginRight:\"2px\"}}),/*#__PURE__*/React.createElement(\"span\",{style:{color:\"black\",fontSize:\"small\"}},chat.friend)),chat.notifications>0?/*#__PURE__*/React.createElement(\"div\",{className:\"notification\",style:{float:\"right\"}},chat.notifications):null);}));}else if(this.state.shownotifications){box=/*#__PURE__*/React.createElement(\"div\",{className:\"chatbox-container\"},this.state.showProfile?/*#__PURE__*/React.createElement(\"div\",{className:\"arrow\"},/*#__PURE__*/React.createElement(ProfileCard,{id:this.state.whoseProfile})):null,this.state.notifications&&this.state.notifications.map(function(notification){return/*#__PURE__*/React.createElement(\"button\",{className:\"chatbox-section\"},/*#__PURE__*/React.createElement(\"div\",{style:{display:\"flex\",textAlign:\"center\"}},/*#__PURE__*/React.createElement(\"img\",{src:notification.image!==\"\"?notification.image:ditto,onMouseOver:function onMouseOver(){return _this4.renderProfile(notification.id);},onMouseOut:_this4.hideProfile,style:{width:\"40px\",height:\"40px\"}}),/*#__PURE__*/React.createElement(\"span\",{style:{color:\"black\",fontSize:\"small\"}},notification.name,\" joined your session at \",notification.time)));}));}return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:\"chatbox-toggle\"},/*#__PURE__*/React.createElement(\"button\",{id:\"notifications\",className:\"chatbox-toggle-buttons\",onClick:this.openNotifications},\"Notifications\",this.state.totalroomnotifications>0?/*#__PURE__*/React.createElement(\"div\",{className:\"notification\",style:{float:\"right\"}},this.state.totalroomnotifications):null),/*#__PURE__*/React.createElement(\"button\",{id:\"chat\",className:\"chatbox-toggle-buttons\",onClick:this.openChat},\"Chat box\",this.state.totalchatnotifications>0?/*#__PURE__*/React.createElement(\"div\",{className:\"notification\",style:{float:\"right\"}},this.state.totalchatnotifications):null)),box,this.state.chatwindow?/*#__PURE__*/React.createElement(ChatWindow,{chat:this.state.chat,handleClose:this.handleCloseChat}):null);}}]);return ChatBox;}(Component);var mapStateToProps=function mapStateToProps(state){return{chat_history:state.firestore.ordered.chat_history,rooms:state.firestore.ordered.rooms,previousstate:state.auth.previousstate,auth:state.firebase.auth,profile:state.firebase.profile};};export default compose(connect(mapStateToProps,{cancelNotifications:cancelNotifications}),firestoreConnect(function(props){return[{collection:'rooms'},{collection:\"users\",doc:props.auth.uid,subcollections:[{collection:\"chat_history\"}],storeAs:\"chat_history\"}];}))(ChatBox);/*\n  export default compose(\n  connect(mapStateToProps, {cancelNotifications}),\n    firestoreConnect(props => {\n        if (props.auth.uid) {\n            return [\n                { collection: 'rooms' },\n                {\n                    collection: \"users\",\n                    doc: props.auth.uid,\n                    subcollections: [{ collection: \"chat_history\" }],\n                    storeAs: \"chat_history\"\n                }\n            ]\n        }\n        else {\n            return [\n                { collection: 'rooms' },\n            ]\n        }\n    })\n  )\n  (ChatBox);\n  */ //<Button onClick={() => setChat(false)}>Notifications about your stream</Button>\n/*          { this.state.visability && this.state.chatbox ?\n  <div className=\"chatbox-container\">\n  {this.state.chatlist && this.state.chatlist.map((chat) => {\n      return (\n          <button className=\"chatbox-section\" onClick={() => this.handleOpen(chat)}>\n              <img src={chat.friend_image} style={{ width: \"40px\", height: \"40px\" }}></img>\n              {chat.friend}\n          </button>\n      )           \n})}\n</div>\n: <div className=\"chatbox-container\">\n{this.state.notifications && this.state.notifications.map((notification) => {\n  return (\n      <button className=\"chatbox-section\" onClick={() => this.handleOpen(notification)}>\n          <div className=\"form-inline\">\n          <img src={notification.image} style={{ width: \"40px\", height: \"40px\" }}></img>\n          {notification.name} joins your session at {notification.time}\n          </div>\n      </button>\n  )           \n})}\n</div>\n}\n*/ /*\n  export default compose(\n  connect(mapStateToProps, {cancelNotifications}),\n    firestoreConnect[\n        { collection: 'rooms' },\n        {\n            collection: \"users\",\n            doc: \n        }\n        ])\n  )\n*/","map":{"version":3,"sources":["/Users/liu550/Desktop/salon_project/src/components/chatbox.js"],"names":["React","Component","Profiler","connect","ChatWindow","Button","firebase","cancelNotifications","ChatContainer","ChatSection","compose","firestoreConnect","ProfileCard","settings","ditto","ChatBox","props","handleOpen","chat","setState","chatwindow","id","auth","uid","handleCloseChat","openChat","e","preventDefault","document","getElementById","className","state","shownotifications","chatbox","target","openNotifications","totalroomnotifications","firestore","collection","doc","update","notifications","orderList","list","chatlist","console","log","sort","a","b","time","chatnumber","map","numberofchatnotifications","renderProfile","showProfile","whoseProfile","hideProfile","totalchatnotifications","bind","setTimeout","chat_history","prevProps","prevstate","_","require","isEqual","rooms","found","find","room","participants","length","box","float","display","textAlign","friend_image","width","height","marginRight","color","fontSize","friend","notification","image","name","mapStateToProps","ordered","previousstate","profile","subcollections","storeAs"],"mappings":"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","sourcesContent":["import React, { Component, Profiler } from 'react';\nimport { connect } from 'react-redux';\nimport ChatWindow from './chatwindow.js';\nimport { Button } from 'react-bootstrap';\nimport \"./component.css\";\nimport firebase from '../config/firebaseconfig';\nimport { cancelNotifications } from '../redux/actions.js';\nimport ChatContainer from './chatbox2.js';\nimport ChatSection from './chatsection.js';\nimport { compose } from 'redux';\nimport { firestoreConnect } from 'react-redux-firebase';\nimport ProfileCard from './profilecard.js';\nimport settings from './settings.js';\nimport ditto from './ditto.png';\n\n\n/*\nconst ChatBox = (props) => {\n\n\n    const [ chat, setChat ] = useState(true);\n    const chatlist = props.chatshistory;\n\n    const handleOpen = (chat) => {\n        console.log(chat.messages);\n        return (\n            <ChatWindow chat={chat} />\n        );\n    }\n\n    return (\n\n        <div className=\"chatbox-container\">\n\n            <div className=\"chatbox-toggle\">\n                <Button onClick={() => setChat(true)}>Chat box</Button>\n            </div>\n\n    \n            <div className=\"chatbox-subcontainer\">\n            {chatlist && chatlist.map((chat) => {\n                return (\n                    <button className=\"chatbox-section\" onClick={() => handleOpen(chat)}>\n                        <img src={chat.friend_image} style={{ width: \"40px\", height: \"40px\" }}></img>\n                        {chat.friend}\n                        {chat.messages}\n                    </button>\n                )\n                \n                return (\n                    <div className=\"chatbox-section\" onClick={() => handleOpen(chat)}>\n                        <img src={chat.friend_image} style={{ width: \"40px\", height: \"40px\" }}></img>\n                        {chat.friend_name}\n                    </div>\n                )\n                \n                \n        })}\n        </div>\n            \n        </div>\n    );\n}\n*/\n\n\nclass ChatBox extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            chatbox: false,\n            shownotifications: false,\n            chatwindow: false,\n            chat: \"\",\n            chatlist: [],\n            notifications: [],\n            totalchatnotifications: 0,\n            totalroomnotifications: 0,\n            showProfile: false,\n            whoseProfile: \"\"\n        }\n        this.handleOpen = this.handleOpen.bind(this);\n        this.openChat = this.openChat.bind(this);\n        this.openNotifications = this.openNotifications.bind(this);\n    }\n\n    handleOpen = (chat) => {\n        this.setState({\n            chatwindow: true,\n            chat: chat\n        })\n        this.props.cancelNotifications(chat.id, this.props.auth.uid);\n    }\n\n    handleCloseChat = () => {\n        this.setState({\n            chatwindow: false\n        })\n    }\n\n    openChat = (e) => {\n        e.preventDefault();\n        document.getElementById(\"notifications\").className = \"chatbox-toggle-buttons\";\n        if (this.state.shownotifications === true) {\n            this.setState({\n                shownotifications: false\n            })\n        }\n        this.setState({\n            chatbox: !this.state.chatbox\n        });\n        if (e.target.className === \"chatbox-toggle-buttons\") {\n            e.target.className = \"selected-chatbox-toggle-buttons\";\n        } else e.target.className = \"chatbox-toggle-buttons\";\n    }\n\n    openNotifications = (e) => {\n        e.preventDefault();\n        document.getElementById(\"chat\").className = \"chatbox-toggle-buttons\";\n        if (this.state.totalroomnotifications > 0) {\n            firebase.firestore().collection(\"rooms\").doc(this.props.auth.uid).update({\n                notifications: 0\n            })\n        }\n        if (this.state.chatbox === true) {\n            this.setState({\n                chatbox: false\n            })\n        }\n        this.setState({\n            shownotifications: !this.state.shownotifications\n        });\n        if (e.target.className === \"chatbox-toggle-buttons\") {\n            e.target.className = \"selected-chatbox-toggle-buttons\";\n        } else e.target.className = \"chatbox-toggle-buttons\";\n    }\n\n    orderList = (list) => {\n        let chatlist;\n        console.log(list);\n        chatlist = list.sort(function(a, b) {return a.time - b.time});\n \n    \n        console.log(chatlist);\n        var chatnumber = 0;\n        chatlist && chatlist.map((chat) => {\n            chatnumber = chatnumber + chat.notifications;\n            console.log(chatnumber);\n        })\n        this.setState({\n            chatlist: chatlist,\n            numberofchatnotifications: chatnumber\n        })\n    }\n\n/*\n    componentDidMount() {\n        let chatlist;\n        var totalchatnotifications = 0;\n        firebase.firestore().collection(\"users\").doc(this.props.auth.uid).collection(\"chats_history\").get()\n        .then((querySnapshot) => {\n            querySnapshot.forEach((doc) => {\n                chatlist.push(doc);\n            })\n            return chatlist;\n        })\n        .then((chatlist) => {\n            chatlist = chatlist.sort(function(a, b) {return b.time - a.time});\n            chatlist.map((chat) => {\n                totalchatnotifications = totalchatnotifications + chat.notifications;\n            })\n            this.setState({\n                chatlist: chatlist,\n                totalchatnotifications: totalchatnotifications\n            })\n        })\n        \n        setTimeout(() => {\n            if (this.props.profile.chats_history) {\n            let chatlist;\n            var totalchatnotifications = 0;\n            chatlist = this.props.profile.chats_history.sort(function(a, b) {return b.time - a.time});\n              chatlist.map((chat) => {\n                totalchatnotifications = totalchatnotifications + chat.notifications;\n            })\n            console.log(this.props.profile.chats_history);\n            this.setState({\n                chatlist: chatlist,\n                totalchatnotifications: totalchatnotifications\n            })  \n        }    \n        }, 500)\n        \n    }\n    */\n\n    componentDidMount() {\n        setTimeout(() => {\n            let chatlist;\n            var totalchatnotifications = 0;\n            chatlist = this.props.chat_history.sort(function(a, b) {return b.time - a.time});\n            chatlist.map((chat) => {\n              totalchatnotifications = totalchatnotifications + chat.notifications;\n          })\n          this.setState({\n              chatlist: chatlist,\n              totalchatnotifications: totalchatnotifications\n          })    \n        }, 1000)\n    }\n\n\n    componentDidUpdate(prevProps, prevstate) {\n        console.log(this.state.chat.time);\n        let chatlist;\n        var totalchatnotifications = 0;\n        const _ = require(\"lodash\")\n \n        if (!_.isEqual(prevProps.chat_history, this.props.chat_history)) {\n              chatlist = this.props.chat_history.sort(function(a, b) {return b.time - a.time});\n              chatlist.map((chat) => {\n                totalchatnotifications = totalchatnotifications + chat.notifications;\n            })\n            this.setState({\n                chatlist: chatlist,\n                totalchatnotifications: totalchatnotifications\n            })         \n       }\n\n       if (this.props.rooms) {\n        const found = this.props.rooms.find(room => room.id === this.props.auth.uid);\n        if (found && (found.participants.length !== prevstate.notifications.length || found.notifications !== prevstate.totalroomnotifications)) {\n           this.setState({\n                notifications: found.participants,\n                totalroomnotifications: found.notifications\n           })\n        }\n       }     \n    }\n    \n    /*\n    componentDidUpdate(prevProps, prevstate) {\n        \n        let chatlist;\n        var totalchatnotifications = 0;\n        const _ = require(\"lodash\")\n        if (!_.isEqual(prevProps.profile.chats_history, this.props.profile.chats_history)) {\n            console.log(\"update gets called\");\n              chatlist = this.props.profile.chats_history.sort(function(a, b) {return b.time - a.time});\n              chatlist.map((chat) => {\n                totalchatnotifications = totalchatnotifications + chat.notifications;\n            })\n            this.setState({\n                chatlist: chatlist,\n                totalchatnotifications: totalchatnotifications\n            })         \n       }\n       if (this.props.rooms) {\n        const found = this.props.rooms.find(room => room.id === this.props.auth.uid);\n        if (found && (found.participants.length !== prevstate.notifications.length || found.notifications !== prevstate.totalroomnotifications)) {\n           this.setState({\n                notifications: found.participants,\n                totalroomnotifications: found.notifications\n           })\n        }\n       }     \n    }\n    */\n\n\n    renderProfile = (id) => {\n        this.setState({\n            showProfile: true,\n            whoseProfile: id\n        })\n    }\n\n    hideProfile = () => {\n        this.setState({\n            showProfile: false\n        })\n    }    \n\n    /*\n    componentWillReceiveProps() {\n        console.log(\"is it ever called?\");\n        firebase.firestore().collection(\"rooms\").doc(this.props.roomid).get()\n        .then((doc) => {\n            \n            if (doc.exists) {\n                if (doc.data().open === true) {\n                    participants = doc.data().participants;\n                }\n            }           \n             this.setState({\n                 notifications: participants,\n                 \n              })\n           })\n    }\n    */\n    \n\n\n    /*\n    componentWillReceiveProps() {\n        const list = this.props.profile.chats_history;\n        if (list) {\n            this.orderList(list);\n        }\n        if (this.props.auth.uid) {\n        console.log(\"which part is first\");\n        var participants = [];\n        firebase.firestore().collection(\"rooms\").doc(this.props.auth.uid).get()\n        .then((doc) => {\n            if (doc.exists) {\n                if (doc.data().open === true) {\n                    participants = doc.data().participants;\n                    return participants;\n                }\n            }\n        })\n        .then((participants) => {\n            this.setState({\n                notifications: participants\n            })\n        })\n    }\n    }\n    */\n\n\n/*\n    componentDidUpdate() {\n        if (this.props.profile.chats_history) {\n            this.orderList(this.props.profile.chats_history)\n        }\n        if (this.props.auth.uid) {\n        var participants = [];\n        firebase.firestore().collection(\"rooms\").doc(this.props.auth.uid).get()\n        .then((doc) => {\n            if (doc.exists) {\n                if (doc.data().open === true) {\n                    participants = doc.data().participants;\n                    return participants;\n                }\n            }\n        })\n        .then((participants) => {\n            this.setState({\n                notifications: participants\n            })\n        })\n    }\n    }\n*/\n\n    render() {\n\n        const { rooms } = this.props;\n\n        let box;\n        if (this.state.chatbox) {\n            box =   <div className=\"chatbox-container\">\n            {this.state.showProfile ? <div className=\"arrow\"><ProfileCard id={this.state.whoseProfile}></ProfileCard></div> : null}\n            {this.state.chatlist && this.state.chatlist.map((chat) => {\n                return (\n                \n                    \n                    <button className=\"chatbox-section\" onClick={() => this.handleOpen(chat)}>\n                        <div style={{ float: \"left\", display: \"flex\", textAlign: \"center\" }}>\n                        <img src={chat.friend_image} onMouseOver={() => this.renderProfile(chat.id)} onMouseOut={this.hideProfile} style={{ width: \"40px\", height: \"40px\", marginRight: \"2px\" }}></img>\n                        <span style={{ color: \"black\", fontSize: \"small\" }}>{chat.friend}</span>\n                        </div>\n                { chat.notifications > 0 ? <div className=\"notification\" style={{ float: \"right\"}}>{chat.notifications}</div> : null}\n                    </button>\n                    \n                    \n                )          \n          })}\n          </div>\n        }\n        else if (this.state.shownotifications) {\n            box = <div className=\"chatbox-container\">\n             {this.state.showProfile ? <div className=\"arrow\"><ProfileCard id={this.state.whoseProfile}></ProfileCard></div> : null}\n            {this.state.notifications && this.state.notifications.map((notification) => {\n                return (\n                    <button className=\"chatbox-section\" >\n                        <div style={{display: \"flex\", textAlign: \"center\" }}>\n                        <img src={notification.image !== \"\" ? notification.image : ditto}  onMouseOver={() => this.renderProfile(notification.id)} onMouseOut={this.hideProfile} style={{ width: \"40px\", height: \"40px\" }}></img>\n                        <span style={{ color: \"black\", fontSize: \"small\" }}>{notification.name} joined your session at {notification.time}</span>\n                        </div>\n                    </button>\n                )           \n        })}\n            </div>\n        }\n\n\n\n\n        return (\n           \n            \n            <div>\n           \n\n            <div className=\"chatbox-toggle\">\n               \n                <button id=\"notifications\" className=\"chatbox-toggle-buttons\" onClick={this.openNotifications}>Notifications\n                {this.state.totalroomnotifications > 0 ? <div className=\"notification\" style={{ float: \"right\"}}>{this.state.totalroomnotifications}</div> : null}\n                </button>\n             \n                <button id=\"chat\" className=\"chatbox-toggle-buttons\" onClick={this.openChat}>\n                    Chat box\n                    {this.state.totalchatnotifications > 0 ? <div className=\"notification\" style={{ float: \"right\"}}>{this.state.totalchatnotifications}</div> : null}\n                </button>\n            </div>\n\n            \n            {box}\n            \n        { this.state.chatwindow ? <ChatWindow chat={this.state.chat} handleClose={this.handleCloseChat}></ChatWindow> : null}\n        \n        </div>\n\n\n\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n      chat_history: state.firestore.ordered.chat_history,\n      rooms: state.firestore.ordered.rooms,\n      previousstate: state.auth.previousstate,\n      auth: state.firebase.auth,\n      profile: state.firebase.profile\n    }\n  }\n  \n\n  export default compose(\n    connect(mapStateToProps, {cancelNotifications}),\n      firestoreConnect(props => {\n          return      [\n            { collection: 'rooms' },\n            \n            {\n                collection: \"users\",\n                doc: props.auth.uid,\n                subcollections: [{ collection: \"chat_history\" }],\n                storeAs: \"chat_history\"\n            }\n          \n        ]\n      }\n      )\n    )\n    (ChatBox);\n  /*\n  export default compose(\n  connect(mapStateToProps, {cancelNotifications}),\n    firestoreConnect(props => {\n        if (props.auth.uid) {\n            return [\n                { collection: 'rooms' },\n                {\n                    collection: \"users\",\n                    doc: props.auth.uid,\n                    subcollections: [{ collection: \"chat_history\" }],\n                    storeAs: \"chat_history\"\n                }\n            ]\n        }\n        else {\n            return [\n                { collection: 'rooms' },\n            ]\n        }\n    })\n  )\n  (ChatBox);\n  */\n\n  //<Button onClick={() => setChat(false)}>Notifications about your stream</Button>\n\n\n  /*          { this.state.visability && this.state.chatbox ?\n  <div className=\"chatbox-container\">\n  {this.state.chatlist && this.state.chatlist.map((chat) => {\n      return (\n          <button className=\"chatbox-section\" onClick={() => this.handleOpen(chat)}>\n              <img src={chat.friend_image} style={{ width: \"40px\", height: \"40px\" }}></img>\n              {chat.friend}\n          </button>\n      )           \n})}\n</div>\n: <div className=\"chatbox-container\">\n{this.state.notifications && this.state.notifications.map((notification) => {\n  return (\n      <button className=\"chatbox-section\" onClick={() => this.handleOpen(notification)}>\n          <div className=\"form-inline\">\n          <img src={notification.image} style={{ width: \"40px\", height: \"40px\" }}></img>\n          {notification.name} joins your session at {notification.time}\n          </div>\n      </button>\n  )           \n})}\n</div>\n}\n*/\n\n\n/*\n  export default compose(\n  connect(mapStateToProps, {cancelNotifications}),\n    firestoreConnect[\n        { collection: 'rooms' },\n        {\n            collection: \"users\",\n            doc: \n        }\n        ])\n  )\n*/"]},"metadata":{},"sourceType":"module"}