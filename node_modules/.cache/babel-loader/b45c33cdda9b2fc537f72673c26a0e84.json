{"ast":null,"code":"var _jsxFileName = \"/Users/liu550/Desktop/salon_project/src/components/chatbox.js\";\nimport React, { Component, Profiler } from 'react';\nimport { connect } from 'react-redux';\nimport ChatWindow from './chatwindow.js';\nimport { Button } from 'react-bootstrap';\nimport \"./component.css\";\nimport firebase from '../config/firebaseconfig';\nimport { cancelNotifications } from '../redux/actions.js';\nimport ChatContainer from './chatbox2.js';\nimport ChatSection from './chatsection.js';\nimport { compose } from 'redux';\nimport { firestoreConnect } from 'react-redux-firebase';\nimport ProfileCard from './profilecard.js';\nimport settings from './settings.js';\nimport ditto from './ditto.png';\n/*\nconst ChatBox = (props) => {\n\n\n    const [ chat, setChat ] = useState(true);\n    const chatlist = props.chatshistory;\n\n    const handleOpen = (chat) => {\n        console.log(chat.messages);\n        return (\n            <ChatWindow chat={chat} />\n        );\n    }\n\n    return (\n\n        <div className=\"chatbox-container\">\n\n            <div className=\"chatbox-toggle\">\n                <Button onClick={() => setChat(true)}>Chat box</Button>\n            </div>\n\n    \n            <div className=\"chatbox-subcontainer\">\n            {chatlist && chatlist.map((chat) => {\n                return (\n                    <button className=\"chatbox-section\" onClick={() => handleOpen(chat)}>\n                        <img src={chat.friend_image} style={{ width: \"40px\", height: \"40px\" }}></img>\n                        {chat.friend}\n                        {chat.messages}\n                    </button>\n                )\n                \n                return (\n                    <div className=\"chatbox-section\" onClick={() => handleOpen(chat)}>\n                        <img src={chat.friend_image} style={{ width: \"40px\", height: \"40px\" }}></img>\n                        {chat.friend_name}\n                    </div>\n                )\n                \n                \n        })}\n        </div>\n            \n        </div>\n    );\n}\n*/\n\nclass ChatBox extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleOpen = chat => {\n      this.setState({\n        chatwindow: true,\n        chat: chat\n      });\n      this.props.cancelNotifications(chat.id, this.props.auth.uid);\n    };\n\n    this.handleCloseChat = () => {\n      this.setState({\n        chatwindow: false\n      });\n    };\n\n    this.openChat = e => {\n      e.preventDefault();\n      document.getElementById(\"notifications\").className = \"chatbox-toggle-buttons\";\n\n      if (this.state.shownotifications === true) {\n        this.setState({\n          shownotifications: false\n        });\n      }\n\n      this.setState({\n        chatbox: !this.state.chatbox\n      });\n\n      if (e.target.className === \"chatbox-toggle-buttons\") {\n        e.target.className = \"selected-chatbox-toggle-buttons\";\n      } else e.target.className = \"chatbox-toggle-buttons\";\n    };\n\n    this.openNotifications = e => {\n      e.preventDefault();\n      document.getElementById(\"chat\").className = \"chatbox-toggle-buttons\";\n\n      if (this.state.totalroomnotifications > 0) {\n        firebase.firestore().collection(\"rooms\").doc(this.props.auth.uid).update({\n          notifications: 0\n        });\n      }\n\n      if (this.state.chatbox === true) {\n        this.setState({\n          chatbox: false\n        });\n      }\n\n      this.setState({\n        shownotifications: !this.state.shownotifications\n      });\n\n      if (e.target.className === \"chatbox-toggle-buttons\") {\n        e.target.className = \"selected-chatbox-toggle-buttons\";\n      } else e.target.className = \"chatbox-toggle-buttons\";\n    };\n\n    this.orderList = list => {\n      let chatlist;\n      console.log(list);\n      chatlist = list.sort(function (a, b) {\n        return a.time - b.time;\n      });\n      console.log(chatlist);\n      var chatnumber = 0;\n      chatlist && chatlist.map(chat => {\n        chatnumber = chatnumber + chat.notifications;\n        console.log(chatnumber);\n      });\n      this.setState({\n        chatlist: chatlist,\n        numberofchatnotifications: chatnumber\n      });\n    };\n\n    this.renderProfile = id => {\n      this.setState({\n        showProfile: true,\n        whoseProfile: id\n      });\n    };\n\n    this.hideProfile = () => {\n      this.setState({\n        showProfile: false\n      });\n    };\n\n    this.state = {\n      chatbox: false,\n      shownotifications: false,\n      chatwindow: false,\n      chat: \"\",\n      chatlist: [],\n      notifications: [],\n      totalchatnotifications: 0,\n      totalroomnotifications: 0,\n      showProfile: false,\n      whoseProfile: \"\"\n    };\n    this.handleOpen = this.handleOpen.bind(this);\n    this.openChat = this.openChat.bind(this);\n    this.openNotifications = this.openNotifications.bind(this);\n  }\n\n  /*\n      componentDidMount() {\n          let chatlist;\n          var totalchatnotifications = 0;\n          firebase.firestore().collection(\"users\").doc(this.props.auth.uid).collection(\"chats_history\").get()\n          .then((querySnapshot) => {\n              querySnapshot.forEach((doc) => {\n                  chatlist.push(doc);\n              })\n              return chatlist;\n          })\n          .then((chatlist) => {\n              chatlist = chatlist.sort(function(a, b) {return b.time - a.time});\n              chatlist.map((chat) => {\n                  totalchatnotifications = totalchatnotifications + chat.notifications;\n              })\n              this.setState({\n                  chatlist: chatlist,\n                  totalchatnotifications: totalchatnotifications\n              })\n          })\n          \n          setTimeout(() => {\n              if (this.props.profile.chats_history) {\n              let chatlist;\n              var totalchatnotifications = 0;\n              chatlist = this.props.profile.chats_history.sort(function(a, b) {return b.time - a.time});\n                chatlist.map((chat) => {\n                  totalchatnotifications = totalchatnotifications + chat.notifications;\n              })\n              console.log(this.props.profile.chats_history);\n              this.setState({\n                  chatlist: chatlist,\n                  totalchatnotifications: totalchatnotifications\n              })  \n          }    \n          }, 500)\n          \n      }\n      */\n  componentDidMount() {\n    setTimeout(() => {\n      let chatlist;\n      var totalchatnotifications = 0;\n      chatlist = this.props.chat_history.sort(function (a, b) {\n        return b.time - a.time;\n      });\n      chatlist.map(chat => {\n        totalchatnotifications = totalchatnotifications + chat.notifications;\n      });\n      this.setState({\n        chatlist: chatlist,\n        totalchatnotifications: totalchatnotifications\n      });\n    }, 1000);\n  }\n\n  componentDidUpdate(prevProps, prevstate) {\n    console.log(this.state.chat.time);\n    let chatlist;\n    var totalchatnotifications = 0;\n\n    const _ = require(\"lodash\");\n\n    if (!_.isEqual(prevProps.chat_history, this.props.chat_history)) {\n      chatlist = this.props.chat_history.sort(function (a, b) {\n        return b.time - a.time;\n      });\n      chatlist.map(chat => {\n        totalchatnotifications = totalchatnotifications + chat.notifications;\n      });\n      this.setState({\n        chatlist: chatlist,\n        totalchatnotifications: totalchatnotifications\n      });\n    }\n\n    if (this.props.rooms) {\n      const found = this.props.rooms.find(room => room.id === this.props.auth.uid);\n\n      if (found && (found.participants.length !== prevstate.notifications.length || found.notifications !== prevstate.totalroomnotifications)) {\n        this.setState({\n          notifications: found.participants,\n          totalroomnotifications: found.notifications\n        });\n      }\n    }\n  }\n  /*\n  componentDidUpdate(prevProps, prevstate) {\n      \n      let chatlist;\n      var totalchatnotifications = 0;\n      const _ = require(\"lodash\")\n      if (!_.isEqual(prevProps.profile.chats_history, this.props.profile.chats_history)) {\n          console.log(\"update gets called\");\n            chatlist = this.props.profile.chats_history.sort(function(a, b) {return b.time - a.time});\n            chatlist.map((chat) => {\n              totalchatnotifications = totalchatnotifications + chat.notifications;\n          })\n          this.setState({\n              chatlist: chatlist,\n              totalchatnotifications: totalchatnotifications\n          })         \n     }\n     if (this.props.rooms) {\n      const found = this.props.rooms.find(room => room.id === this.props.auth.uid);\n      if (found && (found.participants.length !== prevstate.notifications.length || found.notifications !== prevstate.totalroomnotifications)) {\n         this.setState({\n              notifications: found.participants,\n              totalroomnotifications: found.notifications\n         })\n      }\n     }     \n  }\n  */\n\n\n  /*\n  componentWillReceiveProps() {\n      console.log(\"is it ever called?\");\n      firebase.firestore().collection(\"rooms\").doc(this.props.roomid).get()\n      .then((doc) => {\n          \n          if (doc.exists) {\n              if (doc.data().open === true) {\n                  participants = doc.data().participants;\n              }\n          }           \n           this.setState({\n               notifications: participants,\n               \n            })\n         })\n  }\n  */\n\n  /*\n  componentWillReceiveProps() {\n      const list = this.props.profile.chats_history;\n      if (list) {\n          this.orderList(list);\n      }\n      if (this.props.auth.uid) {\n      console.log(\"which part is first\");\n      var participants = [];\n      firebase.firestore().collection(\"rooms\").doc(this.props.auth.uid).get()\n      .then((doc) => {\n          if (doc.exists) {\n              if (doc.data().open === true) {\n                  participants = doc.data().participants;\n                  return participants;\n              }\n          }\n      })\n      .then((participants) => {\n          this.setState({\n              notifications: participants\n          })\n      })\n  }\n  }\n  */\n\n  /*\n      componentDidUpdate() {\n          if (this.props.profile.chats_history) {\n              this.orderList(this.props.profile.chats_history)\n          }\n          if (this.props.auth.uid) {\n          var participants = [];\n          firebase.firestore().collection(\"rooms\").doc(this.props.auth.uid).get()\n          .then((doc) => {\n              if (doc.exists) {\n                  if (doc.data().open === true) {\n                      participants = doc.data().participants;\n                      return participants;\n                  }\n              }\n          })\n          .then((participants) => {\n              this.setState({\n                  notifications: participants\n              })\n          })\n      }\n      }\n  */\n  render() {\n    const {\n      rooms\n    } = this.props;\n    let box;\n\n    if (this.state.chatbox) {\n      box = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"chatbox-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 21\n        }\n      }, this.state.showProfile ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"arrow\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 39\n        }\n      }, /*#__PURE__*/React.createElement(ProfileCard, {\n        id: this.state.whoseProfile,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 62\n        }\n      })) : null, this.state.chatlist && this.state.chatlist.map(chat => {\n        return /*#__PURE__*/React.createElement(\"button\", {\n          className: \"chatbox-section\",\n          onClick: () => this.handleOpen(chat),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            float: \"left\",\n            display: \"flex\",\n            textAlign: \"center\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          src: chat.friend_image,\n          onMouseOver: () => this.renderProfile(chat.id),\n          onMouseOut: this.hideProfile,\n          style: {\n            width: \"40px\",\n            height: \"40px\",\n            marginRight: \"2px\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 25\n          }\n        }), /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"black\",\n            fontSize: \"small\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 25\n          }\n        }, chat.friend)), chat.notifications > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n          className: \"notification\",\n          style: {\n            float: \"right\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 44\n          }\n        }, chat.notifications) : null);\n      }));\n    } else if (this.state.shownotifications) {\n      box = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"chatbox-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 19\n        }\n      }, this.state.showProfile ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"arrow\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 40\n        }\n      }, /*#__PURE__*/React.createElement(ProfileCard, {\n        id: this.state.whoseProfile,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 63\n        }\n      })) : null, this.state.notifications && this.state.notifications.map(notification => {\n        return /*#__PURE__*/React.createElement(\"button\", {\n          className: \"chatbox-section\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            display: \"flex\",\n            textAlign: \"center\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          src: notification.image !== \"\" ? notification.image : ditto,\n          onMouseOver: () => this.renderProfile(notification.id),\n          onMouseOut: this.hideProfile,\n          style: {\n            width: \"40px\",\n            height: \"40px\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 25\n          }\n        }), /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            color: \"black\",\n            fontSize: \"small\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 25\n          }\n        }, notification.name, \" joined your session at \", notification.time)));\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chatbox-toggle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      id: \"notifications\",\n      className: \"chatbox-toggle-buttons\",\n      onClick: this.openNotifications,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 17\n      }\n    }, \"Notifications\", this.state.totalroomnotifications > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"notification\",\n      style: {\n        float: \"right\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 58\n      }\n    }, this.state.totalroomnotifications) : null), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"chat\",\n      className: \"chatbox-toggle-buttons\",\n      onClick: this.openChat,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 17\n      }\n    }, \"Chat box\", this.state.totalchatnotifications > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"notification\",\n      style: {\n        float: \"right\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 62\n      }\n    }, this.state.totalchatnotifications) : null)), box, this.state.chatwindow ? /*#__PURE__*/React.createElement(ChatWindow, {\n      chat: this.state.chat,\n      handleClose: this.handleCloseChat,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 35\n      }\n    }) : null);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    chat_history: state.firestore.ordered.chat_history,\n    rooms: state.firestore.ordered.rooms,\n    previousstate: state.auth.previousstate,\n    auth: state.firebase.auth,\n    profile: state.firebase.profile\n  };\n};\n\nexport default compose(connect(mapStateToProps, {\n  cancelNotifications\n}), firestoreConnect(props => {\n  return [{\n    collection: 'rooms'\n  }, {\n    collection: \"users\",\n    doc: props.auth.uid,\n    subcollections: [{\n      collection: \"chat_history\"\n    }],\n    storeAs: \"chat_history\"\n  }];\n}))(ChatBox);\n/*\nexport default compose(\nconnect(mapStateToProps, {cancelNotifications}),\n  firestoreConnect(props => {\n      if (props.auth.uid) {\n          return [\n              { collection: 'rooms' },\n              {\n                  collection: \"users\",\n                  doc: props.auth.uid,\n                  subcollections: [{ collection: \"chat_history\" }],\n                  storeAs: \"chat_history\"\n              }\n          ]\n      }\n      else {\n          return [\n              { collection: 'rooms' },\n          ]\n      }\n  })\n)\n(ChatBox);\n*/\n//<Button onClick={() => setChat(false)}>Notifications about your stream</Button>\n\n/*          { this.state.visability && this.state.chatbox ?\n<div className=\"chatbox-container\">\n{this.state.chatlist && this.state.chatlist.map((chat) => {\n    return (\n        <button className=\"chatbox-section\" onClick={() => this.handleOpen(chat)}>\n            <img src={chat.friend_image} style={{ width: \"40px\", height: \"40px\" }}></img>\n            {chat.friend}\n        </button>\n    )           \n})}\n</div>\n: <div className=\"chatbox-container\">\n{this.state.notifications && this.state.notifications.map((notification) => {\nreturn (\n    <button className=\"chatbox-section\" onClick={() => this.handleOpen(notification)}>\n        <div className=\"form-inline\">\n        <img src={notification.image} style={{ width: \"40px\", height: \"40px\" }}></img>\n        {notification.name} joins your session at {notification.time}\n        </div>\n    </button>\n)           \n})}\n</div>\n}\n*/\n\n/*\n  export default compose(\n  connect(mapStateToProps, {cancelNotifications}),\n    firestoreConnect[\n        { collection: 'rooms' },\n        {\n            collection: \"users\",\n            doc: \n        }\n        ])\n  )\n*/","map":{"version":3,"sources":["/Users/liu550/Desktop/salon_project/src/components/chatbox.js"],"names":["React","Component","Profiler","connect","ChatWindow","Button","firebase","cancelNotifications","ChatContainer","ChatSection","compose","firestoreConnect","ProfileCard","settings","ditto","ChatBox","constructor","props","handleOpen","chat","setState","chatwindow","id","auth","uid","handleCloseChat","openChat","e","preventDefault","document","getElementById","className","state","shownotifications","chatbox","target","openNotifications","totalroomnotifications","firestore","collection","doc","update","notifications","orderList","list","chatlist","console","log","sort","a","b","time","chatnumber","map","numberofchatnotifications","renderProfile","showProfile","whoseProfile","hideProfile","totalchatnotifications","bind","componentDidMount","setTimeout","chat_history","componentDidUpdate","prevProps","prevstate","_","require","isEqual","rooms","found","find","room","participants","length","render","box","float","display","textAlign","friend_image","width","height","marginRight","color","fontSize","friend","notification","image","name","mapStateToProps","ordered","previousstate","profile","subcollections","storeAs"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,OAAO,iBAAP;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,SAASC,mBAAT,QAAoC,qBAApC;AACA,OAAOC,aAAP,MAA0B,eAA1B;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA,MAAMC,OAAN,SAAsBd,SAAtB,CAAgC;AAE5Be,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SAmBlBC,UAnBkB,GAmBJC,IAAD,IAAU;AACnB,WAAKC,QAAL,CAAc;AACVC,QAAAA,UAAU,EAAE,IADF;AAEVF,QAAAA,IAAI,EAAEA;AAFI,OAAd;AAIA,WAAKF,KAAL,CAAWV,mBAAX,CAA+BY,IAAI,CAACG,EAApC,EAAwC,KAAKL,KAAL,CAAWM,IAAX,CAAgBC,GAAxD;AACH,KAzBiB;;AAAA,SA2BlBC,eA3BkB,GA2BA,MAAM;AACpB,WAAKL,QAAL,CAAc;AACVC,QAAAA,UAAU,EAAE;AADF,OAAd;AAGH,KA/BiB;;AAAA,SAiClBK,QAjCkB,GAiCNC,CAAD,IAAO;AACdA,MAAAA,CAAC,CAACC,cAAF;AACAC,MAAAA,QAAQ,CAACC,cAAT,CAAwB,eAAxB,EAAyCC,SAAzC,GAAqD,wBAArD;;AACA,UAAI,KAAKC,KAAL,CAAWC,iBAAX,KAAiC,IAArC,EAA2C;AACvC,aAAKb,QAAL,CAAc;AACVa,UAAAA,iBAAiB,EAAE;AADT,SAAd;AAGH;;AACD,WAAKb,QAAL,CAAc;AACVc,QAAAA,OAAO,EAAE,CAAC,KAAKF,KAAL,CAAWE;AADX,OAAd;;AAGA,UAAIP,CAAC,CAACQ,MAAF,CAASJ,SAAT,KAAuB,wBAA3B,EAAqD;AACjDJ,QAAAA,CAAC,CAACQ,MAAF,CAASJ,SAAT,GAAqB,iCAArB;AACH,OAFD,MAEOJ,CAAC,CAACQ,MAAF,CAASJ,SAAT,GAAqB,wBAArB;AACV,KA/CiB;;AAAA,SAiDlBK,iBAjDkB,GAiDGT,CAAD,IAAO;AACvBA,MAAAA,CAAC,CAACC,cAAF;AACAC,MAAAA,QAAQ,CAACC,cAAT,CAAwB,MAAxB,EAAgCC,SAAhC,GAA4C,wBAA5C;;AACA,UAAI,KAAKC,KAAL,CAAWK,sBAAX,GAAoC,CAAxC,EAA2C;AACvC/B,QAAAA,QAAQ,CAACgC,SAAT,GAAqBC,UAArB,CAAgC,OAAhC,EAAyCC,GAAzC,CAA6C,KAAKvB,KAAL,CAAWM,IAAX,CAAgBC,GAA7D,EAAkEiB,MAAlE,CAAyE;AACrEC,UAAAA,aAAa,EAAE;AADsD,SAAzE;AAGH;;AACD,UAAI,KAAKV,KAAL,CAAWE,OAAX,KAAuB,IAA3B,EAAiC;AAC7B,aAAKd,QAAL,CAAc;AACVc,UAAAA,OAAO,EAAE;AADC,SAAd;AAGH;;AACD,WAAKd,QAAL,CAAc;AACVa,QAAAA,iBAAiB,EAAE,CAAC,KAAKD,KAAL,CAAWC;AADrB,OAAd;;AAGA,UAAIN,CAAC,CAACQ,MAAF,CAASJ,SAAT,KAAuB,wBAA3B,EAAqD;AACjDJ,QAAAA,CAAC,CAACQ,MAAF,CAASJ,SAAT,GAAqB,iCAArB;AACH,OAFD,MAEOJ,CAAC,CAACQ,MAAF,CAASJ,SAAT,GAAqB,wBAArB;AACV,KApEiB;;AAAA,SAsElBY,SAtEkB,GAsELC,IAAD,IAAU;AAClB,UAAIC,QAAJ;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACAC,MAAAA,QAAQ,GAAGD,IAAI,CAACI,IAAL,CAAU,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAAC,eAAOD,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAlB;AAAuB,OAAjD,CAAX;AAGAL,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,UAAIO,UAAU,GAAG,CAAjB;AACAP,MAAAA,QAAQ,IAAIA,QAAQ,CAACQ,GAAT,CAAclC,IAAD,IAAU;AAC/BiC,QAAAA,UAAU,GAAGA,UAAU,GAAGjC,IAAI,CAACuB,aAA/B;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAYK,UAAZ;AACH,OAHW,CAAZ;AAIA,WAAKhC,QAAL,CAAc;AACVyB,QAAAA,QAAQ,EAAEA,QADA;AAEVS,QAAAA,yBAAyB,EAAEF;AAFjB,OAAd;AAIH,KAtFiB;;AAAA,SA2MlBG,aA3MkB,GA2MDjC,EAAD,IAAQ;AACpB,WAAKF,QAAL,CAAc;AACVoC,QAAAA,WAAW,EAAE,IADH;AAEVC,QAAAA,YAAY,EAAEnC;AAFJ,OAAd;AAIH,KAhNiB;;AAAA,SAkNlBoC,WAlNkB,GAkNJ,MAAM;AAChB,WAAKtC,QAAL,CAAc;AACVoC,QAAAA,WAAW,EAAE;AADH,OAAd;AAGH,KAtNiB;;AAEd,SAAKxB,KAAL,GAAa;AACTE,MAAAA,OAAO,EAAE,KADA;AAETD,MAAAA,iBAAiB,EAAE,KAFV;AAGTZ,MAAAA,UAAU,EAAE,KAHH;AAITF,MAAAA,IAAI,EAAE,EAJG;AAKT0B,MAAAA,QAAQ,EAAE,EALD;AAMTH,MAAAA,aAAa,EAAE,EANN;AAOTiB,MAAAA,sBAAsB,EAAE,CAPf;AAQTtB,MAAAA,sBAAsB,EAAE,CARf;AASTmB,MAAAA,WAAW,EAAE,KATJ;AAUTC,MAAAA,YAAY,EAAE;AAVL,KAAb;AAYA,SAAKvC,UAAL,GAAkB,KAAKA,UAAL,CAAgB0C,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKlC,QAAL,GAAgB,KAAKA,QAAL,CAAckC,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKxB,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBwB,IAAvB,CAA4B,IAA5B,CAAzB;AACH;;AAuEL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCIC,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,UAAU,CAAC,MAAM;AACb,UAAIjB,QAAJ;AACA,UAAIc,sBAAsB,GAAG,CAA7B;AACAd,MAAAA,QAAQ,GAAG,KAAK5B,KAAL,CAAW8C,YAAX,CAAwBf,IAAxB,CAA6B,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAAC,eAAOA,CAAC,CAACC,IAAF,GAASF,CAAC,CAACE,IAAlB;AAAuB,OAApE,CAAX;AACAN,MAAAA,QAAQ,CAACQ,GAAT,CAAclC,IAAD,IAAU;AACrBwC,QAAAA,sBAAsB,GAAGA,sBAAsB,GAAGxC,IAAI,CAACuB,aAAvD;AACH,OAFC;AAGF,WAAKtB,QAAL,CAAc;AACVyB,QAAAA,QAAQ,EAAEA,QADA;AAEVc,QAAAA,sBAAsB,EAAEA;AAFd,OAAd;AAID,KAXS,EAWP,IAXO,CAAV;AAYH;;AAGDK,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACrCpB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKf,KAAL,CAAWb,IAAX,CAAgBgC,IAA5B;AACA,QAAIN,QAAJ;AACA,QAAIc,sBAAsB,GAAG,CAA7B;;AACA,UAAMQ,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AAEA,QAAI,CAACD,CAAC,CAACE,OAAF,CAAUJ,SAAS,CAACF,YAApB,EAAkC,KAAK9C,KAAL,CAAW8C,YAA7C,CAAL,EAAiE;AAC3DlB,MAAAA,QAAQ,GAAG,KAAK5B,KAAL,CAAW8C,YAAX,CAAwBf,IAAxB,CAA6B,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAAC,eAAOA,CAAC,CAACC,IAAF,GAASF,CAAC,CAACE,IAAlB;AAAuB,OAApE,CAAX;AACAN,MAAAA,QAAQ,CAACQ,GAAT,CAAclC,IAAD,IAAU;AACrBwC,QAAAA,sBAAsB,GAAGA,sBAAsB,GAAGxC,IAAI,CAACuB,aAAvD;AACH,OAFC;AAGF,WAAKtB,QAAL,CAAc;AACVyB,QAAAA,QAAQ,EAAEA,QADA;AAEVc,QAAAA,sBAAsB,EAAEA;AAFd,OAAd;AAIJ;;AAED,QAAI,KAAK1C,KAAL,CAAWqD,KAAf,EAAsB;AACrB,YAAMC,KAAK,GAAG,KAAKtD,KAAL,CAAWqD,KAAX,CAAiBE,IAAjB,CAAsBC,IAAI,IAAIA,IAAI,CAACnD,EAAL,KAAY,KAAKL,KAAL,CAAWM,IAAX,CAAgBC,GAA1D,CAAd;;AACA,UAAI+C,KAAK,KAAKA,KAAK,CAACG,YAAN,CAAmBC,MAAnB,KAA8BT,SAAS,CAACxB,aAAV,CAAwBiC,MAAtD,IAAgEJ,KAAK,CAAC7B,aAAN,KAAwBwB,SAAS,CAAC7B,sBAAvG,CAAT,EAAyI;AACtI,aAAKjB,QAAL,CAAc;AACTsB,UAAAA,aAAa,EAAE6B,KAAK,CAACG,YADZ;AAETrC,UAAAA,sBAAsB,EAAEkC,KAAK,CAAC7B;AAFrB,SAAd;AAIF;AACD;AACH;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BJ;;;;;;;;;;;;;;;;;;;;;;;;AAyBIkC,EAAAA,MAAM,GAAG;AAEL,UAAM;AAAEN,MAAAA;AAAF,QAAY,KAAKrD,KAAvB;AAEA,QAAI4D,GAAJ;;AACA,QAAI,KAAK7C,KAAL,CAAWE,OAAf,EAAwB;AACpB2C,MAAAA,GAAG,gBAAK;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACP,KAAK7C,KAAL,CAAWwB,WAAX,gBAAyB;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAuB,oBAAC,WAAD;AAAa,QAAA,EAAE,EAAE,KAAKxB,KAAL,CAAWyB,YAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAvB,CAAzB,GAAiH,IAD1G,EAEP,KAAKzB,KAAL,CAAWa,QAAX,IAAuB,KAAKb,KAAL,CAAWa,QAAX,CAAoBQ,GAApB,CAAyBlC,IAAD,IAAU;AACtD,4BAGI;AAAQ,UAAA,SAAS,EAAC,iBAAlB;AAAoC,UAAA,OAAO,EAAE,MAAM,KAAKD,UAAL,CAAgBC,IAAhB,CAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI;AAAK,UAAA,KAAK,EAAE;AAAE2D,YAAAA,KAAK,EAAE,MAAT;AAAiBC,YAAAA,OAAO,EAAE,MAA1B;AAAkCC,YAAAA,SAAS,EAAE;AAA7C,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACA;AAAK,UAAA,GAAG,EAAE7D,IAAI,CAAC8D,YAAf;AAA6B,UAAA,WAAW,EAAE,MAAM,KAAK1B,aAAL,CAAmBpC,IAAI,CAACG,EAAxB,CAAhD;AAA6E,UAAA,UAAU,EAAE,KAAKoC,WAA9F;AAA2G,UAAA,KAAK,EAAE;AAAEwB,YAAAA,KAAK,EAAE,MAAT;AAAiBC,YAAAA,MAAM,EAAE,MAAzB;AAAiCC,YAAAA,WAAW,EAAE;AAA9C,WAAlH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADA,eAEA;AAAM,UAAA,KAAK,EAAE;AAAEC,YAAAA,KAAK,EAAE,OAAT;AAAkBC,YAAAA,QAAQ,EAAE;AAA5B,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAqDnE,IAAI,CAACoE,MAA1D,CAFA,CADJ,EAKFpE,IAAI,CAACuB,aAAL,GAAqB,CAArB,gBAAyB;AAAK,UAAA,SAAS,EAAC,cAAf;AAA8B,UAAA,KAAK,EAAE;AAAEoC,YAAAA,KAAK,EAAE;AAAT,WAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAyD3D,IAAI,CAACuB,aAA9D,CAAzB,GAA8G,IAL5G,CAHJ;AAaL,OAdyB,CAFhB,CAAR;AAkBH,KAnBD,MAoBK,IAAI,KAAKV,KAAL,CAAWC,iBAAf,EAAkC;AACnC4C,MAAAA,GAAG,gBAAG;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACJ,KAAK7C,KAAL,CAAWwB,WAAX,gBAAyB;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAuB,oBAAC,WAAD;AAAa,QAAA,EAAE,EAAE,KAAKxB,KAAL,CAAWyB,YAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAvB,CAAzB,GAAiH,IAD7G,EAEL,KAAKzB,KAAL,CAAWU,aAAX,IAA4B,KAAKV,KAAL,CAAWU,aAAX,CAAyBW,GAAzB,CAA8BmC,YAAD,IAAkB;AACxE,4BACI;AAAQ,UAAA,SAAS,EAAC,iBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI;AAAK,UAAA,KAAK,EAAE;AAACT,YAAAA,OAAO,EAAE,MAAV;AAAkBC,YAAAA,SAAS,EAAE;AAA7B,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACA;AAAK,UAAA,GAAG,EAAEQ,YAAY,CAACC,KAAb,KAAuB,EAAvB,GAA4BD,YAAY,CAACC,KAAzC,GAAiD3E,KAA3D;AAAmE,UAAA,WAAW,EAAE,MAAM,KAAKyC,aAAL,CAAmBiC,YAAY,CAAClE,EAAhC,CAAtF;AAA2H,UAAA,UAAU,EAAE,KAAKoC,WAA5I;AAAyJ,UAAA,KAAK,EAAE;AAAEwB,YAAAA,KAAK,EAAE,MAAT;AAAiBC,YAAAA,MAAM,EAAE;AAAzB,WAAhK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADA,eAEA;AAAM,UAAA,KAAK,EAAE;AAAEE,YAAAA,KAAK,EAAE,OAAT;AAAkBC,YAAAA,QAAQ,EAAE;AAA5B,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAqDE,YAAY,CAACE,IAAlE,8BAAgGF,YAAY,CAACrC,IAA7G,CAFA,CADJ,CADJ;AAQP,OATgC,CAFvB,CAAN;AAaH;;AAKD,wBAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAGA;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI;AAAQ,MAAA,EAAE,EAAC,eAAX;AAA2B,MAAA,SAAS,EAAC,wBAArC;AAA8D,MAAA,OAAO,EAAE,KAAKf,iBAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACC,KAAKJ,KAAL,CAAWK,sBAAX,GAAoC,CAApC,gBAAwC;AAAK,MAAA,SAAS,EAAC,cAAf;AAA8B,MAAA,KAAK,EAAE;AAAEyC,QAAAA,KAAK,EAAE;AAAT,OAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAyD,KAAK9C,KAAL,CAAWK,sBAApE,CAAxC,GAA4I,IAD7I,CAFJ,eAMI;AAAQ,MAAA,EAAE,EAAC,MAAX;AAAkB,MAAA,SAAS,EAAC,wBAA5B;AAAqD,MAAA,OAAO,EAAE,KAAKX,QAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEK,KAAKM,KAAL,CAAW2B,sBAAX,GAAoC,CAApC,gBAAwC;AAAK,MAAA,SAAS,EAAC,cAAf;AAA8B,MAAA,KAAK,EAAE;AAAEmB,QAAAA,KAAK,EAAE;AAAT,OAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAyD,KAAK9C,KAAL,CAAW2B,sBAApE,CAAxC,GAA4I,IAFjJ,CANJ,CAHA,EAgBCkB,GAhBD,EAkBF,KAAK7C,KAAL,CAAWX,UAAX,gBAAwB,oBAAC,UAAD;AAAY,MAAA,IAAI,EAAE,KAAKW,KAAL,CAAWb,IAA7B;AAAmC,MAAA,WAAW,EAAE,KAAKM,eAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAxB,GAA8G,IAlB5G,CAHJ;AA4BH;;AA5W2B;;AA+WhC,MAAMkE,eAAe,GAAI3D,KAAD,IAAW;AAC/B,SAAO;AACL+B,IAAAA,YAAY,EAAE/B,KAAK,CAACM,SAAN,CAAgBsD,OAAhB,CAAwB7B,YADjC;AAELO,IAAAA,KAAK,EAAEtC,KAAK,CAACM,SAAN,CAAgBsD,OAAhB,CAAwBtB,KAF1B;AAGLuB,IAAAA,aAAa,EAAE7D,KAAK,CAACT,IAAN,CAAWsE,aAHrB;AAILtE,IAAAA,IAAI,EAAES,KAAK,CAAC1B,QAAN,CAAeiB,IAJhB;AAKLuE,IAAAA,OAAO,EAAE9D,KAAK,CAAC1B,QAAN,CAAewF;AALnB,GAAP;AAOD,CARH;;AAWE,eAAepF,OAAO,CACpBP,OAAO,CAACwF,eAAD,EAAkB;AAACpF,EAAAA;AAAD,CAAlB,CADa,EAElBI,gBAAgB,CAACM,KAAK,IAAI;AACtB,SAAY,CACV;AAAEsB,IAAAA,UAAU,EAAE;AAAd,GADU,EAGV;AACIA,IAAAA,UAAU,EAAE,OADhB;AAEIC,IAAAA,GAAG,EAAEvB,KAAK,CAACM,IAAN,CAAWC,GAFpB;AAGIuE,IAAAA,cAAc,EAAE,CAAC;AAAExD,MAAAA,UAAU,EAAE;AAAd,KAAD,CAHpB;AAIIyD,IAAAA,OAAO,EAAE;AAJb,GAHU,CAAZ;AAWH,CAZe,CAFE,CAAP,CAiBZjF,OAjBY,CAAf;AAkBA;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BF","sourcesContent":["import React, { Component, Profiler } from 'react';\nimport { connect } from 'react-redux';\nimport ChatWindow from './chatwindow.js';\nimport { Button } from 'react-bootstrap';\nimport \"./component.css\";\nimport firebase from '../config/firebaseconfig';\nimport { cancelNotifications } from '../redux/actions.js';\nimport ChatContainer from './chatbox2.js';\nimport ChatSection from './chatsection.js';\nimport { compose } from 'redux';\nimport { firestoreConnect } from 'react-redux-firebase';\nimport ProfileCard from './profilecard.js';\nimport settings from './settings.js';\nimport ditto from './ditto.png';\n\n\n/*\nconst ChatBox = (props) => {\n\n\n    const [ chat, setChat ] = useState(true);\n    const chatlist = props.chatshistory;\n\n    const handleOpen = (chat) => {\n        console.log(chat.messages);\n        return (\n            <ChatWindow chat={chat} />\n        );\n    }\n\n    return (\n\n        <div className=\"chatbox-container\">\n\n            <div className=\"chatbox-toggle\">\n                <Button onClick={() => setChat(true)}>Chat box</Button>\n            </div>\n\n    \n            <div className=\"chatbox-subcontainer\">\n            {chatlist && chatlist.map((chat) => {\n                return (\n                    <button className=\"chatbox-section\" onClick={() => handleOpen(chat)}>\n                        <img src={chat.friend_image} style={{ width: \"40px\", height: \"40px\" }}></img>\n                        {chat.friend}\n                        {chat.messages}\n                    </button>\n                )\n                \n                return (\n                    <div className=\"chatbox-section\" onClick={() => handleOpen(chat)}>\n                        <img src={chat.friend_image} style={{ width: \"40px\", height: \"40px\" }}></img>\n                        {chat.friend_name}\n                    </div>\n                )\n                \n                \n        })}\n        </div>\n            \n        </div>\n    );\n}\n*/\n\n\nclass ChatBox extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            chatbox: false,\n            shownotifications: false,\n            chatwindow: false,\n            chat: \"\",\n            chatlist: [],\n            notifications: [],\n            totalchatnotifications: 0,\n            totalroomnotifications: 0,\n            showProfile: false,\n            whoseProfile: \"\"\n        }\n        this.handleOpen = this.handleOpen.bind(this);\n        this.openChat = this.openChat.bind(this);\n        this.openNotifications = this.openNotifications.bind(this);\n    }\n\n    handleOpen = (chat) => {\n        this.setState({\n            chatwindow: true,\n            chat: chat\n        })\n        this.props.cancelNotifications(chat.id, this.props.auth.uid);\n    }\n\n    handleCloseChat = () => {\n        this.setState({\n            chatwindow: false\n        })\n    }\n\n    openChat = (e) => {\n        e.preventDefault();\n        document.getElementById(\"notifications\").className = \"chatbox-toggle-buttons\";\n        if (this.state.shownotifications === true) {\n            this.setState({\n                shownotifications: false\n            })\n        }\n        this.setState({\n            chatbox: !this.state.chatbox\n        });\n        if (e.target.className === \"chatbox-toggle-buttons\") {\n            e.target.className = \"selected-chatbox-toggle-buttons\";\n        } else e.target.className = \"chatbox-toggle-buttons\";\n    }\n\n    openNotifications = (e) => {\n        e.preventDefault();\n        document.getElementById(\"chat\").className = \"chatbox-toggle-buttons\";\n        if (this.state.totalroomnotifications > 0) {\n            firebase.firestore().collection(\"rooms\").doc(this.props.auth.uid).update({\n                notifications: 0\n            })\n        }\n        if (this.state.chatbox === true) {\n            this.setState({\n                chatbox: false\n            })\n        }\n        this.setState({\n            shownotifications: !this.state.shownotifications\n        });\n        if (e.target.className === \"chatbox-toggle-buttons\") {\n            e.target.className = \"selected-chatbox-toggle-buttons\";\n        } else e.target.className = \"chatbox-toggle-buttons\";\n    }\n\n    orderList = (list) => {\n        let chatlist;\n        console.log(list);\n        chatlist = list.sort(function(a, b) {return a.time - b.time});\n \n    \n        console.log(chatlist);\n        var chatnumber = 0;\n        chatlist && chatlist.map((chat) => {\n            chatnumber = chatnumber + chat.notifications;\n            console.log(chatnumber);\n        })\n        this.setState({\n            chatlist: chatlist,\n            numberofchatnotifications: chatnumber\n        })\n    }\n\n/*\n    componentDidMount() {\n        let chatlist;\n        var totalchatnotifications = 0;\n        firebase.firestore().collection(\"users\").doc(this.props.auth.uid).collection(\"chats_history\").get()\n        .then((querySnapshot) => {\n            querySnapshot.forEach((doc) => {\n                chatlist.push(doc);\n            })\n            return chatlist;\n        })\n        .then((chatlist) => {\n            chatlist = chatlist.sort(function(a, b) {return b.time - a.time});\n            chatlist.map((chat) => {\n                totalchatnotifications = totalchatnotifications + chat.notifications;\n            })\n            this.setState({\n                chatlist: chatlist,\n                totalchatnotifications: totalchatnotifications\n            })\n        })\n        \n        setTimeout(() => {\n            if (this.props.profile.chats_history) {\n            let chatlist;\n            var totalchatnotifications = 0;\n            chatlist = this.props.profile.chats_history.sort(function(a, b) {return b.time - a.time});\n              chatlist.map((chat) => {\n                totalchatnotifications = totalchatnotifications + chat.notifications;\n            })\n            console.log(this.props.profile.chats_history);\n            this.setState({\n                chatlist: chatlist,\n                totalchatnotifications: totalchatnotifications\n            })  \n        }    \n        }, 500)\n        \n    }\n    */\n\n    componentDidMount() {\n        setTimeout(() => {\n            let chatlist;\n            var totalchatnotifications = 0;\n            chatlist = this.props.chat_history.sort(function(a, b) {return b.time - a.time});\n            chatlist.map((chat) => {\n              totalchatnotifications = totalchatnotifications + chat.notifications;\n          })\n          this.setState({\n              chatlist: chatlist,\n              totalchatnotifications: totalchatnotifications\n          })    \n        }, 1000)\n    }\n\n\n    componentDidUpdate(prevProps, prevstate) {\n        console.log(this.state.chat.time);\n        let chatlist;\n        var totalchatnotifications = 0;\n        const _ = require(\"lodash\")\n \n        if (!_.isEqual(prevProps.chat_history, this.props.chat_history)) {\n              chatlist = this.props.chat_history.sort(function(a, b) {return b.time - a.time});\n              chatlist.map((chat) => {\n                totalchatnotifications = totalchatnotifications + chat.notifications;\n            })\n            this.setState({\n                chatlist: chatlist,\n                totalchatnotifications: totalchatnotifications\n            })         \n       }\n\n       if (this.props.rooms) {\n        const found = this.props.rooms.find(room => room.id === this.props.auth.uid);\n        if (found && (found.participants.length !== prevstate.notifications.length || found.notifications !== prevstate.totalroomnotifications)) {\n           this.setState({\n                notifications: found.participants,\n                totalroomnotifications: found.notifications\n           })\n        }\n       }     \n    }\n    \n    /*\n    componentDidUpdate(prevProps, prevstate) {\n        \n        let chatlist;\n        var totalchatnotifications = 0;\n        const _ = require(\"lodash\")\n        if (!_.isEqual(prevProps.profile.chats_history, this.props.profile.chats_history)) {\n            console.log(\"update gets called\");\n              chatlist = this.props.profile.chats_history.sort(function(a, b) {return b.time - a.time});\n              chatlist.map((chat) => {\n                totalchatnotifications = totalchatnotifications + chat.notifications;\n            })\n            this.setState({\n                chatlist: chatlist,\n                totalchatnotifications: totalchatnotifications\n            })         \n       }\n       if (this.props.rooms) {\n        const found = this.props.rooms.find(room => room.id === this.props.auth.uid);\n        if (found && (found.participants.length !== prevstate.notifications.length || found.notifications !== prevstate.totalroomnotifications)) {\n           this.setState({\n                notifications: found.participants,\n                totalroomnotifications: found.notifications\n           })\n        }\n       }     \n    }\n    */\n\n\n    renderProfile = (id) => {\n        this.setState({\n            showProfile: true,\n            whoseProfile: id\n        })\n    }\n\n    hideProfile = () => {\n        this.setState({\n            showProfile: false\n        })\n    }    \n\n    /*\n    componentWillReceiveProps() {\n        console.log(\"is it ever called?\");\n        firebase.firestore().collection(\"rooms\").doc(this.props.roomid).get()\n        .then((doc) => {\n            \n            if (doc.exists) {\n                if (doc.data().open === true) {\n                    participants = doc.data().participants;\n                }\n            }           \n             this.setState({\n                 notifications: participants,\n                 \n              })\n           })\n    }\n    */\n    \n\n\n    /*\n    componentWillReceiveProps() {\n        const list = this.props.profile.chats_history;\n        if (list) {\n            this.orderList(list);\n        }\n        if (this.props.auth.uid) {\n        console.log(\"which part is first\");\n        var participants = [];\n        firebase.firestore().collection(\"rooms\").doc(this.props.auth.uid).get()\n        .then((doc) => {\n            if (doc.exists) {\n                if (doc.data().open === true) {\n                    participants = doc.data().participants;\n                    return participants;\n                }\n            }\n        })\n        .then((participants) => {\n            this.setState({\n                notifications: participants\n            })\n        })\n    }\n    }\n    */\n\n\n/*\n    componentDidUpdate() {\n        if (this.props.profile.chats_history) {\n            this.orderList(this.props.profile.chats_history)\n        }\n        if (this.props.auth.uid) {\n        var participants = [];\n        firebase.firestore().collection(\"rooms\").doc(this.props.auth.uid).get()\n        .then((doc) => {\n            if (doc.exists) {\n                if (doc.data().open === true) {\n                    participants = doc.data().participants;\n                    return participants;\n                }\n            }\n        })\n        .then((participants) => {\n            this.setState({\n                notifications: participants\n            })\n        })\n    }\n    }\n*/\n\n    render() {\n\n        const { rooms } = this.props;\n\n        let box;\n        if (this.state.chatbox) {\n            box =   <div className=\"chatbox-container\">\n            {this.state.showProfile ? <div className=\"arrow\"><ProfileCard id={this.state.whoseProfile}></ProfileCard></div> : null}\n            {this.state.chatlist && this.state.chatlist.map((chat) => {\n                return (\n                \n                    \n                    <button className=\"chatbox-section\" onClick={() => this.handleOpen(chat)}>\n                        <div style={{ float: \"left\", display: \"flex\", textAlign: \"center\" }}>\n                        <img src={chat.friend_image} onMouseOver={() => this.renderProfile(chat.id)} onMouseOut={this.hideProfile} style={{ width: \"40px\", height: \"40px\", marginRight: \"2px\" }}></img>\n                        <span style={{ color: \"black\", fontSize: \"small\" }}>{chat.friend}</span>\n                        </div>\n                { chat.notifications > 0 ? <div className=\"notification\" style={{ float: \"right\"}}>{chat.notifications}</div> : null}\n                    </button>\n                    \n                    \n                )          \n          })}\n          </div>\n        }\n        else if (this.state.shownotifications) {\n            box = <div className=\"chatbox-container\">\n             {this.state.showProfile ? <div className=\"arrow\"><ProfileCard id={this.state.whoseProfile}></ProfileCard></div> : null}\n            {this.state.notifications && this.state.notifications.map((notification) => {\n                return (\n                    <button className=\"chatbox-section\" >\n                        <div style={{display: \"flex\", textAlign: \"center\" }}>\n                        <img src={notification.image !== \"\" ? notification.image : ditto}  onMouseOver={() => this.renderProfile(notification.id)} onMouseOut={this.hideProfile} style={{ width: \"40px\", height: \"40px\" }}></img>\n                        <span style={{ color: \"black\", fontSize: \"small\" }}>{notification.name} joined your session at {notification.time}</span>\n                        </div>\n                    </button>\n                )           \n        })}\n            </div>\n        }\n\n\n\n\n        return (\n           \n            \n            <div>\n           \n\n            <div className=\"chatbox-toggle\">\n               \n                <button id=\"notifications\" className=\"chatbox-toggle-buttons\" onClick={this.openNotifications}>Notifications\n                {this.state.totalroomnotifications > 0 ? <div className=\"notification\" style={{ float: \"right\"}}>{this.state.totalroomnotifications}</div> : null}\n                </button>\n             \n                <button id=\"chat\" className=\"chatbox-toggle-buttons\" onClick={this.openChat}>\n                    Chat box\n                    {this.state.totalchatnotifications > 0 ? <div className=\"notification\" style={{ float: \"right\"}}>{this.state.totalchatnotifications}</div> : null}\n                </button>\n            </div>\n\n            \n            {box}\n            \n        { this.state.chatwindow ? <ChatWindow chat={this.state.chat} handleClose={this.handleCloseChat}></ChatWindow> : null}\n        \n        </div>\n\n\n\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n      chat_history: state.firestore.ordered.chat_history,\n      rooms: state.firestore.ordered.rooms,\n      previousstate: state.auth.previousstate,\n      auth: state.firebase.auth,\n      profile: state.firebase.profile\n    }\n  }\n  \n\n  export default compose(\n    connect(mapStateToProps, {cancelNotifications}),\n      firestoreConnect(props => {\n          return      [\n            { collection: 'rooms' },\n            \n            {\n                collection: \"users\",\n                doc: props.auth.uid,\n                subcollections: [{ collection: \"chat_history\" }],\n                storeAs: \"chat_history\"\n            }\n          \n        ]\n      }\n      )\n    )\n    (ChatBox);\n  /*\n  export default compose(\n  connect(mapStateToProps, {cancelNotifications}),\n    firestoreConnect(props => {\n        if (props.auth.uid) {\n            return [\n                { collection: 'rooms' },\n                {\n                    collection: \"users\",\n                    doc: props.auth.uid,\n                    subcollections: [{ collection: \"chat_history\" }],\n                    storeAs: \"chat_history\"\n                }\n            ]\n        }\n        else {\n            return [\n                { collection: 'rooms' },\n            ]\n        }\n    })\n  )\n  (ChatBox);\n  */\n\n  //<Button onClick={() => setChat(false)}>Notifications about your stream</Button>\n\n\n  /*          { this.state.visability && this.state.chatbox ?\n  <div className=\"chatbox-container\">\n  {this.state.chatlist && this.state.chatlist.map((chat) => {\n      return (\n          <button className=\"chatbox-section\" onClick={() => this.handleOpen(chat)}>\n              <img src={chat.friend_image} style={{ width: \"40px\", height: \"40px\" }}></img>\n              {chat.friend}\n          </button>\n      )           \n})}\n</div>\n: <div className=\"chatbox-container\">\n{this.state.notifications && this.state.notifications.map((notification) => {\n  return (\n      <button className=\"chatbox-section\" onClick={() => this.handleOpen(notification)}>\n          <div className=\"form-inline\">\n          <img src={notification.image} style={{ width: \"40px\", height: \"40px\" }}></img>\n          {notification.name} joins your session at {notification.time}\n          </div>\n      </button>\n  )           \n})}\n</div>\n}\n*/\n\n\n/*\n  export default compose(\n  connect(mapStateToProps, {cancelNotifications}),\n    firestoreConnect[\n        { collection: 'rooms' },\n        {\n            collection: \"users\",\n            doc: \n        }\n        ])\n  )\n*/"]},"metadata":{},"sourceType":"module"}