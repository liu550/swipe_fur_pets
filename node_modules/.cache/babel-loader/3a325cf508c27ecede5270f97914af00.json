{"ast":null,"code":"import { AUTH_SUCCESS, AUTH_FAIL, EDIT_SUCCESS, SUBMIT_SUCCESS, SIGN_OUT, MATCHING_REQUEST, MATCHING_UPDATE, MATCHING_SUCCESS, MATCHING_FAIL, CHAT_SUCCESS, BOTTLE_SUCCESS, BOTTLE_FAIL, UPDATE_SUCCESS, MATCHING_CHAT } from \"./types\";\nimport firebase from '../config/firebaseconfig';\nimport { createStore } from \"redux\";\nexport const signUp = (credentials, history) => dispatch => {\n  firebase.auth().createUserWithEmailAndPassword(credentials.email, credentials.password).then(resp => {\n    firebase.firestore().collection(\"users\").doc(resp.user.uid).set({\n      first_name: credentials.firstname,\n      last_name: credentials.lastname,\n      email: credentials.email,\n      password: credentials.password,\n      profile_url: credentials.profileurl,\n      gender: \"\",\n      institution: \"\",\n      role: \"\",\n      self_description: \"\",\n      areas_of_interest: [],\n      image: \"https://firebasestorage.googleapis.com/v0/b/salon-b116e.appspot.com/o/images%2Fditto.jpeg?alt=media&token=098544b3-936e-44d5-a2c8-33e2704fca39\",\n      availability: false,\n      tasks_tags: [],\n      tasks_description: \"\",\n      personalities: []\n    });\n  }).then(() => {\n    dispatch({\n      type: AUTH_SUCCESS\n    });\n  }).catch(err => {\n    dispatch({\n      type: AUTH_FAIL,\n      err\n    });\n  });\n};\n/*\nexport const signUp = (credentials, history) => (dispatch) => {\n    firebase.auth().createUserWithEmailAndPassword(credentials.email, credentials.password)\n    .then((resp) => {\n    return firebase.firestore().collection(\"users\").doc(resp.user.uid).set({\n        first_name: credentials.firstname,\n        last_name: credentials.lastname,\n        email: credentials.email,\n        password: credentials.password,\n        profile_url: credentials.profileurl,\n        gender: \"\",\n        institution: \"\",\n        role: \"\",\n        self_description: \"\",\n        areas_of_interest: [],\n        availability: false,\n        tasks_description: \"\"\n    })\n    }).then(() => {\n        dispatch({ type: AUTH_SUCCESS });\n        history.push(credentials.profileurl);\n    })\n    .catch((err) => {\n        console.log(err.message);\n        dispatch({ type: AUTH_FAIL, err })\n    });\n}\n*/\n\nexport const logIn = (credentials, history) => {\n  return dispatch => {\n    firebase.auth().signInWithEmailAndPassword(credentials.email, credentials.password).then(() => {\n      dispatch({\n        type: AUTH_SUCCESS\n      }); //history.push(`/waitingroom`)\n    }).catch(err => {\n      dispatch({\n        type: AUTH_FAIL,\n        err\n      });\n    });\n  };\n};\nexport const uploadImage = (image, userid) => dispatch => {\n  firebase.storage().ref('images/' + userid).put(image).then(() => {\n    return firebase.storage().ref(`images/` + userid).getDownloadURL();\n  }).then(image => {\n    firebase.firestore().collection(\"users\").doc(userid).update({\n      image: image\n    });\n  }).then(() => {\n    dispatch({\n      type: EDIT_SUCCESS\n    });\n  });\n};\nexport const editProfile = (credentials, userid, history) => (dispatch, getState) => {\n  const profile = getState().firebase.profile;\n  firebase.firestore().collection(\"users\").doc(userid).update({\n    first_name: credentials.firstname,\n    last_name: credentials.lastname,\n    gender: credentials.gender,\n    institution: credentials.institution,\n    role: credentials.role,\n    self_description: credentials.selfdescription,\n    areas_of_interest: credentials.areasofinterest,\n    email: credentials.email,\n    personalities: credentials.personalities\n  }).then(() => {\n    dispatch({\n      type: EDIT_SUCCESS\n    }); //history.push(profile.profile_url);\n  });\n};\nexport const startStreaming = room => (dispatch, getState) => {\n  const userid = getState().firebase.auth.uid;\n  firebase.firestore().collection(\"rooms\").doc(userid).set({\n    host: userid,\n    meeting_link: room.link,\n    room_description: room.description,\n    tasks_tags: room.reduxtasks,\n    open: true,\n    participants: [],\n    notifications: 0\n  }).then(() => {\n    dispatch({\n      type: SUBMIT_SUCCESS\n    });\n  });\n};\nexport const submitTicket = info => (dispatch, getState) => {\n  const userid = getState().firebase.auth.uid;\n  firebase.firestore().collection(\"users\").doc(userid).update({\n    tasks_description: info.description,\n    availability: true,\n    tasks_tags: info.reduxtasks\n  }).then(() => {\n    dispatch({\n      type: SUBMIT_SUCCESS\n    });\n  });\n};\nexport const signOut = history => {\n  return dispatch => {\n    firebase.auth().signOut().then(() => {\n      dispatch({\n        type: SIGN_OUT\n      });\n      history.push(\"/\");\n    });\n  };\n};\nexport const removeStreaming = () => (dispatch, getState) => {\n  const userid = getState().firebase.auth.uid;\n  firebase.firestore().collection(\"rooms\").doc(userid).update({\n    participants: [],\n    notifications: 0,\n    open: false\n  }).then(() => {\n    dispatch({\n      type: SUBMIT_SUCCESS\n    });\n  });\n};\n/*\nexport const startConversation = (user2id, user2profile, user1profile, message) => (dispatch, getState) => {\n    const user1id = getState().firebase.auth.uid;\n    const messages = [message];\n    \n    firebase.firestore().collection(\"users\").doc(user1id).get()\n    .then((doc) => {\n        return doc.data().chats_history;\n    })\n    .then((history) => {\n        \n        var i = 0;\n        var current = \"\";\n        while (history && history[i]) {\n            if (history[i].friend_id === user2id) {\n                current = user2id;\n                firebase.firestore().collection(\"chats\").doc(history[i].messages).update({\n                    chats_info: firebase.firestore.FieldValue.arrayUnion(message)\n                })\n            }\n            i++;\n        }\n\n        if (current === \"\") {\n            firebase.firestore().collection(\"chats\").add({\n                chats_info: messages\n            })\n            .then((doc) => {\n                const user1append = { friend: user2profile.first_name + user2profile.last_name, friend_id: user2id, friend_image: user2profile.image, messages: doc.id};\n                const user2append = { friend: user1profile.first_name + user1profile.last_name, friend_id: user1id, friend_image: user1profile.image, messages: doc.id};\n                firebase.firestore().collection(\"users\").doc(user1id).update({\n                    chats_history: firebase.firestore.FieldValue.arrayUnion(user1append)\n                })\n                firebase.firestore().collection(\"users\").doc(user2id).update({\n                    chats_history: firebase.firestore.FieldValue.arrayUnion(user2append)\n                })\n            })\n        }\n    })\n    .then(() => {\n        dispatch({ type: ADDCHAT_SUCCESS });\n    })\n    }\n*/\n\nexport const startConversation = (user2id, user2profile, user1profile, message) => (dispatch, getState) => {\n  const user1id = getState().firebase.auth.uid;\n  console.log(message);\n  const messages = [message];\n  var chatid = \"\";\n  firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(user2id).get().then(doc => {\n    if (doc.exists) {\n      chatid = doc.data().chat_id;\n      firebase.firestore().collection(\"chats\").doc(chatid).update({\n        messages: firebase.firestore.FieldValue.arrayUnion(message)\n      });\n      firebase.firestore().collection(\"users\").doc(user2id).collection(\"chat_history\").doc(user1id).update({\n        time: new Date().getTime(),\n        notifications: firebase.firestore.FieldValue.increment(1)\n      });\n      firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(user2id).update({\n        time: new Date().getTime()\n      });\n    } else {\n      firebase.firestore().collection(\"chats\").add({\n        people: [user1id, user2id],\n        messages: messages\n      }).then(doc => {\n        firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(user2id).set({\n          chat_id: doc.id,\n          friend: user2profile.first_name + \" \" + user2profile.last_name,\n          friend_image: user2profile.image,\n          time: new Date().getTime(),\n          notifications: 0\n        });\n        firebase.firestore().collection(\"users\").doc(user2id).collection(\"chat_history\").doc(user1id).set({\n          chat_id: doc.id,\n          friend: user1profile.first_name + \" \" + user1profile.last_name,\n          friend_image: user1profile.image,\n          time: new Date().getTime(),\n          notifications: 1\n        });\n      }).then(() => {\n        dispatch({\n          type: CHAT_SUCCESS\n        });\n      });\n    }\n  });\n  /*    \n      firebase.firestore().collection(\"users\").doc(user1id).get()\n      .then((doc) => {\n          history = doc.data().chats_history;\n          return history;\n      })\n      .then((history) => {\n          \n          var i = 0;\n          var current = \"\";\n          while (history && i < history.length) {\n              if (history[i].friend_id === user2id) {\n                  current = user2id;\n                  chatid = history[i].messages;\n                  break;\n              }\n              else i++;\n          }\n          if (current !== \"\") {\n              firebase.firestore().collection(\"chats\").doc(history[i].messages).update({\n                  chats_info: firebase.firestore.FieldValue.arrayUnion(message)\n              })\n              /*\n              .then(() => {\n                  firebase.firestore().collection(\"users\").doc(user2id).update({\n                      chat_notifications: firebase.firestore.FieldValue.increment(1)\n                  })\n              })\n              \n              .then(() => {\n                  history[i].time = new Date().getTime();\n                  firebase.firestore().collection(\"users\").doc(user1id).update({\n                      chats_history: history\n                  })\n              })\n              .then(() => {\n                  firebase.firestore().collection(\"users\").doc(user2id).get()\n                  .then((doc) => {\n                      const user2history = doc.data().chats_history;\n                      const index = user2history.findIndex(x => x.friend_id === user1id);\n                      user2history[index].notifications++;\n                      user2history[index].time = new Date().getTime();\n                      firebase.firestore().collection(\"users\").doc(user2id).update({\n                          chats_history: user2history\n                      })\n                  })\n              })\n              .then(() => {\n                  dispatch({ type: CHAT_SUCCESS });\n              })\n          }\n  \n          else {\n              firebase.firestore().collection(\"chats\").add({\n                  chats_info: messages\n              })\n              .then((doc) => {\n                  const user1append = { friend: user2profile.first_name + \" \" + user2profile.last_name, friend_id: user2id, friend_image: user2profile.image, messages: doc.id, notifications: 0, time: new Date().getTime()};\n                  const user2append = { friend: user1profile.first_name + \" \" + user1profile.last_name, friend_id: user1id, friend_image: user1profile.image, messages: doc.id, notifications: 1, time: new Date().getTime()};\n                  firebase.firestore().collection(\"users\").doc(user1id).update({\n                      chats_history: firebase.firestore.FieldValue.arrayUnion(user1append)\n                  })\n                  firebase.firestore().collection(\"users\").doc(user2id).update({\n                      chats_history: firebase.firestore.FieldValue.arrayUnion(user2append)\n                  })\n                  firebase.firestore().collection(\"users\").doc(user2id).update({\n                      chat_notifications: firebase.firestore.FieldValue.increment(1)\n                  })\n                  .then(() => {\n                      dispatch({ type: CHAT_SUCCESS });\n                  })\n              })\n          }\n      })\n      */\n};\nexport const cancelNotifications = (chatid, uid) => dispatch => {\n  firebase.firestore().collection(\"users\").doc(uid).collection(\"chat_history\").doc(chatid).update({\n    notifications: 0\n  });\n};\nexport const joinSession = (hostid, time) => (dispatch, getState) => {\n  const participantid = getState().firebase.auth.uid;\n  let participant;\n\n  if (participantid) {\n    firebase.firestore().collection(\"users\").doc(participantid).get().then(doc => {\n      return doc.data();\n    }).then(data => {\n      participant = {\n        time: time,\n        name: data.first_name + \" \" + data.last_name,\n        image: data.image,\n        id: participantid\n      };\n      return participant;\n    }).then(participant => {\n      firebase.firestore().collection(\"rooms\").doc(hostid).update({\n        participants: firebase.firestore.FieldValue.arrayUnion(participant),\n        notifications: firebase.firestore.FieldValue.increment(1)\n      });\n    }).then(() => {\n      dispatch({\n        type: SUBMIT_SUCCESS\n      });\n    });\n  } else {\n    participant = {\n      time: time,\n      name: \"Anonymous\",\n      image: \"\",\n      id: \"\"\n    };\n    firebase.firestore().collection(\"rooms\").doc(hostid).update({\n      participants: firebase.firestore.FieldValue.arrayUnion(participant),\n      notifications: firebase.firestore.FieldValue.increment(1)\n    });\n  }\n};\n/*\nexport const startMatching = (userid, userprofile, usergender, genderpreference) => (dispatch) => {\n    let userspool;\n    var buddy = \"\";\n    let number;\n    var flag = false;\n\n    dispatch({ type: MATCHING_REQUEST });\n    firebase.firestore().collection(\"matching\").doc(\"pool\").get()\n    .then((doc) => {\n        userspool = doc.data().matching_pool;\n        return doc.data().matching_pool;\n    }) \n    .then((pool) => {\n        firebase.firestore().collection(\"matching\").doc(\"seekers\").get()\n        .then((doc) => {\n            if (doc.data().matching_seekers.length < pool.length) {\n                const seeker = {id: userid, gender: usergender, gender_preference: genderpreference};\n                firebase.firestore().collection(\"matching\").doc(\"seekers\").update({\n                    matching_seekers: firebase.firestore.FieldValue.arrayUnion(seeker)\n                })\n                .then(() => {\n                    localStorage.setItem(\"matching\", true);\n                    localStorage.setItem(\"pool\", false);\n                    localStorage.setItem(\"id\", userid);\n                    localStorage.setItem(\"gender\", usergender);\n                    localStorage.setItem(\"genderpreference\", genderpreference);\n                    const starttime = new Date().getTime();\n                    var currenttime;\n                    var loop = setInterval(() => {\n                        currenttime = new Date().getTime();\n                        if (currenttime - starttime > 12000) {\n                            clearInterval(loop);\n                            clearInterval(inn);\n                            firebase.firestore().collection(\"matching\").doc(\"seekers\").update({\n                                matching_seekers: firebase.firestore.FieldValue.arrayRemove({id: userid, gender: usergender, gender_preference: genderpreference})\n                            })\n                            dispatch({ type: MATCHING_FAIL });\n                            localStorage.setItem(\"matching\", false);\n                        } \n                        firebase.firestore().collection(\"matching\").doc(\"pool\").get()\n                        .then((doc) => {\n                            userspool = doc.data().matching_pool;\n                        }) \n                        .then(() => {\n                            var inn = setInterval(() => {\n                                number = Math.floor(Math.random() * userspool.length);\n                                if (userspool[number]) {\n                                    if (userspool[number].id !== userid && userspool[number].partner === \"\" && (userspool[number].gender === genderpreference || genderpreference === \"None\") && (userspool[number].gender_preference === usergender || userspool[number].gender_preference === \"None\")) {\n                                        flag = true;\n                                        clearInterval(inn);\n                                        clearInterval(loop);\n                                        const oldbuddy = {id: userspool[number].id, gender: userspool[number].gender, gender_preference: userspool[number].gender_preference, partner: userid, chatid: \"!\"};\n\n                                        firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                                            matching_pool: firebase.firestore.FieldValue.arrayRemove(userspool[number])\n                                        })\n                                        firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                                            matching_pool: firebase.firestore.FieldValue.arrayUnion(oldbuddy)\n                                        })\n                                        firebase.firestore().collection(\"matching\").doc(\"seekers\").update({\n                                            matching_seekers: firebase.firestore.FieldValue.arrayRemove({id: userid, gender: usergender, gender_preference: genderpreference})\n                                        })\n                                        firebase.firestore().collection(\"users\").doc(userspool[number].id).get()\n                                        .then((doc) => {\n                                            dispatch(matchingConversation(userspool[number].id, doc.data(), userprofile,  oldbuddy));      \n                                        })\n                                    }\n                                }\n                            }, 0);\n                        })\n                    }, 1000)\n                    \n                    })\n                }\n\n            else \n            {\n                firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                    matching_pool: firebase.firestore.FieldValue.arrayUnion({id: userid, gender: usergender, gender_preference: genderpreference, partner: \"\", chatid: \"!\"})\n                })\n                localStorage.setItem(\"matching\", true);\n                localStorage.setItem(\"pool\", true);               \n            let found;\n            var flag = false;\n            var starttime = new Date().getTime();\n            var currenttime;\n            var inn = setInterval(() => {\n                currenttime = new Date().getTime();\n                if (currenttime - starttime > 12000) {\n                    clearInterval(inn);\n\n\n\n\n\n                    firebase.firestore().collection(\"matching\").doc(\"pool\").get()\n                    .then((doc) => {\n                        const found = doc.data().matching_pool.find(element => element.id == userid);\n                        if (found.partner != \"\") {\n                            setTimeout(() => {\n                                firebase.firestore().collection(\"matching\").doc(\"pool\").get()\n                                .then((doc) => {\n                                    const found = doc.data().matching_pool.find(element => element.id == userid);\n                                    buddy = found.partner;\n                                    firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                                         matching_pool: firebase.firestore.FieldValue.arrayRemove({id: userid, gender: usergender, gender_preference: genderpreference, partner: found.partner, chatid: found.chatid})\n                                     })\n                                     .then(() => {\n                                         dispatch({ type: MATCHING_CHAT, payload: found.chatid })\n                                     })\n                                     .then(() => {\n                                         firebase.firestore().collection(\"users\").doc(found.partner).get()\n                                         .then((doc) => {\n                                             dispatch({ type: MATCHING_SUCCESS, payload: {id: doc.id, profile: doc.data()} });\n                                             localStorage.setItem(\"matching\", false);\n                                         })\n                                     })\n                                })\n                            }, 2000)\n                        } else {\n                            firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                                matching_pool: firebase.firestore.FieldValue.arrayRemove(found)\n                            })\n                            dispatch({ type: MATCHING_FAIL });\n                            localStorage.setItem(\"matching\", false);\n                        }\n                    })\n\n\n\n                }\n                else { \n                firebase.firestore().collection(\"matching\").doc(\"pool\").get()\n                .then((doc) => {\n                    userspool = doc.data().matching_pool;\n                    found = userspool.find(user => user.id === userid);\n                    if (found) {\n                    if (found.partner !== \"\" && found.chatid !== \"!\") {\n                        flag = true;\n                        clearInterval(inn);\n                       buddy = found.partner;\n                       firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                            matching_pool: firebase.firestore.FieldValue.arrayRemove({id: userid, gender: usergender, gender_preference: genderpreference, partner: found.partner, chatid: found.chatid})\n                        })\n                        .then(() => {\n                            dispatch({ type: MATCHING_CHAT, payload: found.chatid })\n                        })\n                        .then(() => {\n                            firebase.firestore().collection(\"users\").doc(found.partner).get()\n                            .then((doc) => {\n                                dispatch({ type: MATCHING_SUCCESS, payload: {id: doc.id, profile: doc.data()} });\n                                localStorage.setItem(\"matching\", false);\n                            })\n                        })\n                    }\n                }\n                })\n            }\n            }, 1000);\n        }  \n        }) \n    })\n}\n*/\n\nexport const startMatching = (userid, userprofile, usergender, genderpreference) => dispatch => {\n  let userspool;\n  var buddy = \"\";\n  let number;\n  var flag = false;\n  let temp;\n  let buddies;\n  dispatch({\n    type: MATCHING_REQUEST\n  });\n  firebase.firestore().collection(\"matching\").doc(\"pool\").get().then(doc => {\n    return doc.data().count;\n  }).then(poolcount => {\n    firebase.firestore().collection(\"matching\").doc(\"seekers\").get().then(doc => {\n      if (doc.data().count <= poolcount) {\n        firebase.firestore().collection(\"matching\").doc(\"seekers\").update({\n          count: firebase.firestore.FieldValue.increment(1)\n        }).then(() => {\n          firebase.firestore().collection(\"matching\").doc(\"seekers\").collection(\"matching_seekers\").doc(userid).set({\n            gender: usergender,\n            gender_preference: genderpreference\n          });\n        }).then(() => {\n          localStorage.setItem(\"matching\", true);\n          localStorage.setItem(\"pool\", false);\n          const starttime = new Date().getTime();\n          var currenttime;\n          var loop = setInterval(() => {\n            currenttime = new Date().getTime();\n\n            if (currenttime - starttime > 12000) {\n              clearInterval(loop);\n              clearInterval(inn);\n              firebase.firestore().collection(\"matching\").doc(\"seekers\").update({\n                count: firebase.firestore.FieldValue.increment(-1)\n              });\n              firebase.firestore().collection(\"matching\").doc(\"seekers\").collection(\"matching_seekers\").doc(userid).delete().then(() => {\n                dispatch({\n                  type: MATCHING_FAIL\n                });\n                localStorage.setItem(\"matching\", false);\n              });\n            } else {\n              /*\n              firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").get()\n              .then((querySnapshot) => {\n                  console.log(querySnapshot.docs);\n              })\n              */\n              firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").where(\"gender_preference\", \"in\", [usergender, \"None\"]).get().then(querySnapshot => {\n                buddies = querySnapshot.docs;\n                /*\n                console.log(buddies[0].id);\n                console.log(buddies[0].data().partner);\n                console.log(buddies[0].data().gender);\n                console.log(buddies.length);\n                */\n\n                for (var i = 0; i < buddies.length; i++) {\n                  console.log(buddies.length);\n\n                  if (buddies[i].data().partner === \"\" && (buddies[i].data().gender === genderpreference || genderpreference === \"None\")) {\n                    firebase.firestore().collection(\"matching\").doc(\"seekers\").update({\n                      count: firebase.firestore.FieldValue.increment(-1)\n                    });\n                    buddy = buddies[i];\n                    clearInterval(loop);\n                    firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(buddy.id).update({\n                      partner: userid\n                    });\n                    firebase.firestore().collection(\"matching\").doc(\"seekers\").collection(\"matching_seekers\").doc(userid).delete();\n                    firebase.firestore().collection(\"users\").doc(buddy.id).get().then(doc => {\n                      dispatch(matchingConversation(buddy.id, doc.data(), userprofile));\n                    });\n                  }\n                }\n              });\n            }\n          }, 1000);\n        });\n      } else {\n        firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n          count: firebase.firestore.FieldValue.increment(1)\n        }).then(() => {\n          firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(userid).set({\n            gender: usergender,\n            gender_preference: genderpreference,\n            partner: \"\",\n            chatid: \"!\"\n          });\n        });\n        localStorage.setItem(\"matching\", true);\n        localStorage.setItem(\"pool\", true);\n        var starttime = new Date().getTime();\n        var currenttime;\n        var inn = setInterval(() => {\n          currenttime = new Date().getTime();\n\n          if (currenttime - starttime > 12000) {\n            clearInterval(inn);\n            firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(userid).get().then(doc => {\n              if (doc.data().partner != \"\") {\n                var save = setInterval(() => {\n                  firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(userid).get().then(doc => {\n                    temp = doc.data();\n\n                    if (temp.chatid != \"!\") {\n                      clearInterval(save);\n                      firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                        count: firebase.firestore.FieldValue.increment(-1)\n                      });\n                      firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(userid).delete().then(() => {\n                        dispatch({\n                          type: MATCHING_CHAT,\n                          payload: temp.chatid\n                        });\n                      }).then(() => {\n                        firebase.firestore().collection(\"users\").doc(temp.partner).get().then(doc => {\n                          dispatch({\n                            type: MATCHING_SUCCESS,\n                            payload: {\n                              id: doc.id,\n                              profile: doc.data()\n                            }\n                          });\n                          localStorage.setItem(\"matching\", false);\n                        });\n                      });\n                    }\n                  });\n                }, 1000);\n              } else {\n                firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                  count: firebase.firestore.FieldValue.increment(-1)\n                });\n                firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(userid).delete().then(() => {\n                  dispatch({\n                    type: MATCHING_FAIL\n                  });\n                  localStorage.setItem(\"matching\", false);\n                });\n              }\n            });\n          } else {\n            firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(userid).get().then(doc => {\n              temp = doc.data();\n\n              if (temp.partner !== \"\" && temp.chatid !== \"!\") {\n                clearInterval(inn);\n                firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                  count: firebase.firestore.FieldValue.increment(-1)\n                });\n                firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(userid).delete().then(() => {\n                  dispatch({\n                    type: MATCHING_CHAT,\n                    payload: temp.chatid\n                  });\n                }).then(() => {\n                  firebase.firestore().collection(\"users\").doc(temp.partner).get().then(doc => {\n                    dispatch({\n                      type: MATCHING_SUCCESS,\n                      payload: {\n                        id: doc.id,\n                        profile: doc.data()\n                      }\n                    });\n                    localStorage.setItem(\"matching\", false);\n                  });\n                });\n              }\n            });\n          }\n        }, 1000);\n      }\n    });\n  });\n};\nexport const matchingConversation = (user2id, user2profile, user1profile) => (dispatch, getState) => {\n  const user1id = getState().firebase.auth.uid;\n  var chatid = \"\";\n  firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(user2id).get().then(doc => {\n    if (doc.exists) {\n      firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(user2id).update({\n        chatid: doc.data().chat_id\n      }).then(() => {\n        dispatch({\n          type: MATCHING_CHAT,\n          payload: doc.data().chat_id\n        });\n        dispatch({\n          type: MATCHING_SUCCESS,\n          payload: {\n            id: user2id,\n            profile: user2profile\n          }\n        });\n        localStorage.setItem(\"matching\", false);\n      });\n    } else {\n      firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(user2id).update({\n        chatid: \"\"\n      }).then(() => {\n        dispatch({\n          type: MATCHING_CHAT,\n          payload: \"\"\n        });\n        dispatch({\n          type: MATCHING_SUCCESS,\n          payload: {\n            id: user2id,\n            profile: user2profile\n          }\n        });\n        localStorage.setItem(\"matching\", false);\n      });\n    }\n  });\n};\n/*\nexport const matchingConversation = (user2id, user2profile, user1profile, oldbuddy) => (dispatch, getState) => {\n    const user1id = getState().firebase.auth.uid;\n    var chatid = \"\";\n\n    firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(user2id).get()\n    .then((doc) => {\n        if (doc.exists) {\n            firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                matching_pool: firebase.firestore.FieldValue.arrayRemove(oldbuddy)\n            })\n            .then(() => {\n                oldbuddy.chatid = doc.data().chat_id;\n                firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                    matching_pool: firebase.firestore.FieldValue.arrayUnion(oldbuddy)\n                })\n                dispatch({ type: MATCHING_CHAT, payload:  doc.data().chat_id });\n                dispatch({ type: MATCHING_SUCCESS, payload: {id: user2id, profile: user2profile} });\n                localStorage.setItem(\"matching\", false);\n            })\n        }\n        else {\n            firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                matching_pool: firebase.firestore.FieldValue.arrayRemove(oldbuddy)\n            })\n            .then(() => {\n                oldbuddy.chatid = \"\";\n                firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                    matching_pool: firebase.firestore.FieldValue.arrayUnion(oldbuddy)\n                })\n            })\n            .then(() => {\n                dispatch({ type: MATCHING_CHAT, payload: \"\" });\n                dispatch({ type: MATCHING_SUCCESS, payload: {id: user2id, profile: user2profile} });\n                localStorage.setItem(\"matching\", false);\n            })\n        }\n    })\n}\n*/\n\n/*\n    firebase.firestore().collection(\"users\").doc(user1id).get()\n    .then((doc) => {\n        return doc.data().chats_history;\n    })\n    .then((history) => {\n        \n        var i = 0;\n        var current = \"\";\n        while (history && i < history.length) {\n            if (history[i].friend_id === user2id) {\n                current = user2id;\n                chatid = history[i].messages;\n                firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                    matching_pool: firebase.firestore.FieldValue.arrayRemove(oldbuddy)\n                })\n                .then(() => {\n                    oldbuddy.chatid = chatid;\n                    firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                        matching_pool: firebase.firestore.FieldValue.arrayUnion(oldbuddy)\n                    })\n                })\n                break;\n            }\n            else i++;\n        }\n\n        if (current !== \"\") {\n            dispatch({ type: MATCHING_CHAT, payload: chatid });\n            dispatch({ type: MATCHING_SUCCESS, payload: {id: user2id, profile: user2profile} });\n            localStorage.setItem(\"matching\", false);\n        }\n\n        else {\n            firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                matching_pool: firebase.firestore.FieldValue.arrayRemove(oldbuddy)\n            })\n            .then(() => {\n                oldbuddy.chatid = \"\";\n                firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                    matching_pool: firebase.firestore.FieldValue.arrayUnion(oldbuddy)\n                })\n            })\n            .then(() => {\n                dispatch({ type: MATCHING_CHAT, payload: \"\" });\n                dispatch({ type: MATCHING_SUCCESS, payload: {id: user2id, profile: user2profile} });\n                localStorage.setItem(\"matching\", false);\n            })\n        }\n    })\n}\n*/\n\nexport const changeChat = chatid => dispatch => {\n  dispatch({\n    type: MATCHING_CHAT,\n    payload: chatid\n  });\n};\nexport const startMatchingConversation = (user2id, user2profile, user1profile, message) => (dispatch, getState) => {\n  const user1id = getState().firebase.auth.uid;\n  const messages = [message];\n  var chatid = \"\";\n  firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(user2id).get().then(doc => {\n    if (doc.exists) {\n      chatid = doc.data().chat_id;\n      firebase.firestore().collection(\"chats\").doc(chatid).update({\n        messages: firebase.firestore.FieldValue.arrayUnion(message)\n      });\n      firebase.firestore().collection(\"users\").doc(user2id).collection(\"chat_history\").doc(user1id).update({\n        time: new Date().getTime(),\n        notifications: firebase.firestore.FieldValue.increment(1)\n      });\n      firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(user2id).update({\n        time: new Date().getTime()\n      });\n    } else {\n      firebase.firestore().collection(\"chats\").add({\n        people: [user1id, user2id],\n        messages: messages\n      }).then(doc => {\n        chatid = doc.id;\n        firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(user2id).set({\n          chat_id: doc.id,\n          friend: user2profile.first_name + \" \" + user2profile.last_name,\n          friend_image: user2profile.image,\n          time: new Date().getTime(),\n          notifications: 0\n        });\n        firebase.firestore().collection(\"users\").doc(user2id).collection(\"chat_history\").doc(user1id).set({\n          chat_id: doc.id,\n          friend: user1profile.first_name + \" \" + user1profile.last_name,\n          friend_image: user1profile.image,\n          time: new Date().getTime(),\n          notifications: 1\n        });\n      }).then(() => {\n        dispatch({\n          type: MATCHING_CHAT,\n          payload: chatid\n        });\n      });\n    }\n  });\n};\nexport const buildList = async (currentprofilelist, number, message, user1profile) => (dispatch, getState) => {\n  const user1id = getState().firebase.auth.uid;\n  var index = Math.floor(Math.random() * currentprofilelist.length);\n  var i = 0;\n  const startindex = index;\n  var count = 0;\n  var randomlist = [];\n\n  while (i < number) {\n    if (index === currentprofilelist.length) {\n      index = 0;\n    }\n\n    if (index === startindex) {\n      count++;\n\n      if (count === 2) {\n        break;\n      }\n    }\n\n    if (currentprofilelist[index].id !== user1id) {\n      firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(currentprofilelist[index].id).get().then(doc => {\n        if (doc.exists) {\n          index++;\n        } else {\n          randomlist.push(currentprofilelist[index]);\n          index++;\n          i++;\n        }\n      });\n      /*\n                  var k = 0;\n                  while (user1chatshistory && user1chatshistory[k]) {\n                      if (user1chatshistory[k].friend_id === currentprofilelist[index].id) {\n                          flag = true;\n                          break;\n                      }\n                      k++;\n                  }\n                  if (flag === false) {\n                      randomlist.push(currentprofilelist[index]);\n                      index++;\n                      i++\n                  }\n                  else {\n                      index++;\n                  }\n                  */\n    } else index++;\n  }\n\n  return randomlist;\n};\nexport const groupMessaging = (currentprofilelist, number, message, user1profile) => (dispatch, getState) => {\n  const user1id = getState().firebase.auth.uid;\n  var index = Math.floor(Math.random() * currentprofilelist.length);\n  var i = 0;\n  const startindex = index;\n  var count = 0;\n  var randomlist = []; //var flag = false;\n\n  var user1chatshistory = [];\n  firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").get().then(querySnapshot => {\n    querySnapshot.forEach(doc => {\n      user1chatshistory.push(doc);\n    });\n    return user1chatshistory;\n  }).then(user1chatshistory => {\n    while (i < number) {\n      if (index === currentprofilelist.length) {\n        index = 0;\n      }\n\n      if (index === startindex) {\n        count++;\n\n        if (count === 2) {\n          break;\n        }\n      }\n\n      if (currentprofilelist[index].id !== user1id) {\n        const found = user1chatshistory.find(element => element.id === currentprofilelist[index].id);\n\n        if (!found) {\n          randomlist.push(currentprofilelist[index]);\n          index++;\n          i++;\n        } else index++;\n      } else index++;\n    }\n\n    if (randomlist.length < number) {\n      var a = 0;\n\n      while (randomlist.length !== 0 && a < randomlist.length) {\n        dispatch(startConversation(randomlist[a].id, randomlist[a].profile, user1profile, message));\n        a++;\n      }\n\n      dispatch({\n        type: BOTTLE_FAIL\n      });\n    } else {\n      var j = 0;\n\n      while (j < randomlist.length) {\n        dispatch(startConversation(randomlist[j].id, randomlist[j].profile, user1profile, message));\n        j++;\n      }\n\n      dispatch({\n        type: BOTTLE_SUCCESS\n      });\n    }\n  });\n  /*\n  while (i < number) {\n      console.log(startindex);\n      console.log(index);\n      if (index === currentprofilelist.length) {\n          index = 0;\n      }\n      if (index === startindex) {\n          count++;\n          if (count === 2) {\n              flag = true;\n              break;\n          }\n      }\n      if (currentprofilelist[index].id !== user1id) {\n          console.log(\"enter once\");\n          console.log(currentprofilelist[index].id);\n          firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(currentprofilelist[index].id).get()\n          .then((doc) => {\n              console.log(doc.exists);\n              if (doc.exists) {\n                  console.log(\"exist?\");\n                  index++;\n              }\n              else {\n                  console.log(\"does not exist\");\n                  randomlist.push(currentprofilelist[index]);\n                  console.log(currentprofilelist[index].id, currentprofilelist[index].profile, user1profile, message);\n                  dispatch(startConversation(currentprofilelist[index].id, currentprofilelist[index].profile, user1profile, message));\n                  index++;\n                  i++;\n                  if (i === number) {\n                      flag = true;\n                  }\n                  \n              }\n          })          \n      }        \n      else index++;\n  }\n   console.log(randomlist);\n  console.log(randomlist.length);\n  if (flag === true) {\n  console.log(randomlist);\n  console.log(randomlist.length);\n  if (randomlist.length < number) {\n      console.log(randomlist.length);\n      console.log(number);\n      \n      var a = 0;\n      while (randomlist.length !== 0 && a < randomlist.length) {\n          console.log(randomlist[a].id, randomlist[a].profile, user1profile, message);\n          startConversation(randomlist[a].id, randomlist[a].profile, user1profile, message);\n          a++;\n      }\n      \n      dispatch({ type: BOTTLE_FAIL });\n  }\n  else {\n      \n      var j = 0;\n      while (j < randomlist.length) {\n          dispatch( startConversation(randomlist[j].id, randomlist[j].profile, user1profile, message) );\n          j++;\n      }\n      \n          dispatch({ type: BOTTLE_SUCCESS });\n  }\n  }\n  */\n};\n/*\n{\n    let userspool;\n    const userid = getState().firebase.auth.uid;\n\n    firebase.firestore().collection(\"matching\").doc(\"pool\").get()\n    .then((doc) => {\n        userspool = doc.matching_pool;\n    })\n\n    firebase.firestore().collection(\"matching\").doc(\"userid\").set({\n        user: userid\n    })\n    .then(() => {\n        firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n            matching_pool: firebase.firestore.FieldValue.arrayUnion(userid)\n        })\n    })\n    .then(() => {\n        if (userspool !== null) {\n            const number = Math.floor(Math.random() * userspool.length);\n            if (userspool[number].gender === genderpreference) {\n                firebase.firestore().collection.doc(userspool[number].id).get()\n                .then((doc) => {\n                    if (doc.exists && doc.data().buddy !== \"\") {\n\n                    }\n                })\n            }\n        }\n\n    })\n}\n*/","map":{"version":3,"sources":["/Users/liu550/Desktop/salon_project/src/redux/actions.js"],"names":["AUTH_SUCCESS","AUTH_FAIL","EDIT_SUCCESS","SUBMIT_SUCCESS","SIGN_OUT","MATCHING_REQUEST","MATCHING_UPDATE","MATCHING_SUCCESS","MATCHING_FAIL","CHAT_SUCCESS","BOTTLE_SUCCESS","BOTTLE_FAIL","UPDATE_SUCCESS","MATCHING_CHAT","firebase","createStore","signUp","credentials","history","dispatch","auth","createUserWithEmailAndPassword","email","password","then","resp","firestore","collection","doc","user","uid","set","first_name","firstname","last_name","lastname","profile_url","profileurl","gender","institution","role","self_description","areas_of_interest","image","availability","tasks_tags","tasks_description","personalities","type","catch","err","logIn","signInWithEmailAndPassword","uploadImage","userid","storage","ref","put","getDownloadURL","update","editProfile","getState","profile","selfdescription","areasofinterest","startStreaming","room","host","meeting_link","link","room_description","description","reduxtasks","open","participants","notifications","submitTicket","info","signOut","push","removeStreaming","startConversation","user2id","user2profile","user1profile","message","user1id","console","log","messages","chatid","get","exists","data","chat_id","FieldValue","arrayUnion","time","Date","getTime","increment","add","people","id","friend","friend_image","cancelNotifications","joinSession","hostid","participantid","participant","name","startMatching","userprofile","usergender","genderpreference","userspool","buddy","number","flag","temp","buddies","count","poolcount","gender_preference","localStorage","setItem","starttime","currenttime","loop","setInterval","clearInterval","inn","delete","where","querySnapshot","docs","i","length","partner","matchingConversation","save","payload","changeChat","startMatchingConversation","buildList","currentprofilelist","index","Math","floor","random","startindex","randomlist","groupMessaging","user1chatshistory","forEach","found","find","element","a","j"],"mappings":"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","sourcesContent":["import { AUTH_SUCCESS, AUTH_FAIL, EDIT_SUCCESS, SUBMIT_SUCCESS, SIGN_OUT, MATCHING_REQUEST, MATCHING_UPDATE, MATCHING_SUCCESS, MATCHING_FAIL, CHAT_SUCCESS, BOTTLE_SUCCESS, BOTTLE_FAIL, UPDATE_SUCCESS, MATCHING_CHAT } from \"./types\"\nimport firebase from '../config/firebaseconfig'\nimport { createStore } from \"redux\";\n\n\n\nexport const signUp = (credentials, history) => (dispatch) => {\n    firebase.auth().createUserWithEmailAndPassword(credentials.email, credentials.password)\n    .then((resp) => {\n\n        firebase.firestore().collection(\"users\").doc(resp.user.uid).set({\n            first_name: credentials.firstname,\n            last_name: credentials.lastname,\n            email: credentials.email,\n            password: credentials.password,\n            profile_url: credentials.profileurl,\n            gender: \"\",\n            institution: \"\",\n            role: \"\",\n            self_description: \"\",\n            areas_of_interest: [],\n            image: \"https://firebasestorage.googleapis.com/v0/b/salon-b116e.appspot.com/o/images%2Fditto.jpeg?alt=media&token=098544b3-936e-44d5-a2c8-33e2704fca39\",\n            availability: false,\n            tasks_tags: [],\n            tasks_description: \"\",\n            personalities: []\n    })\n}   \n    ).then(() => {\n        dispatch({ type: AUTH_SUCCESS });\n    })\n    .catch((err) => {\n        dispatch({ type: AUTH_FAIL, err });\n    });\n}\n\n/*\nexport const signUp = (credentials, history) => (dispatch) => {\n    firebase.auth().createUserWithEmailAndPassword(credentials.email, credentials.password)\n    .then((resp) => {\n    return firebase.firestore().collection(\"users\").doc(resp.user.uid).set({\n        first_name: credentials.firstname,\n        last_name: credentials.lastname,\n        email: credentials.email,\n        password: credentials.password,\n        profile_url: credentials.profileurl,\n        gender: \"\",\n        institution: \"\",\n        role: \"\",\n        self_description: \"\",\n        areas_of_interest: [],\n        availability: false,\n        tasks_description: \"\"\n    })\n    }).then(() => {\n        dispatch({ type: AUTH_SUCCESS });\n        history.push(credentials.profileurl);\n    })\n    .catch((err) => {\n        console.log(err.message);\n        dispatch({ type: AUTH_FAIL, err })\n    });\n}\n*/\n\nexport const logIn = (credentials, history) => {\n    return (dispatch) => {\n        firebase.auth().signInWithEmailAndPassword(\n            credentials.email,\n            credentials.password\n        ).then(() => {\n            dispatch({ type: AUTH_SUCCESS });\n            //history.push(`/waitingroom`)\n        })\n        .catch((err) => {\n            dispatch({ type: AUTH_FAIL, err });\n        })\n    }\n}\n\nexport const uploadImage = ( image, userid ) => (dispatch) => {\n    firebase.storage().ref('images/'+userid).put(image)\n    .then(() => {\n        return firebase.storage().ref(`images/`+userid).getDownloadURL()\n    })\n    .then((image) => {\n        firebase.firestore().collection(\"users\").doc(userid).update({\n            image: image\n        })\n    }).then(() => {\n        dispatch({ type: EDIT_SUCCESS });\n    })\n}\n\nexport const editProfile = (credentials, userid, history) => (dispatch, getState) => {\n    const profile = getState().firebase.profile;\n    firebase.firestore().collection(\"users\").doc(userid).update({\n        first_name: credentials.firstname,\n        last_name: credentials.lastname,\n        gender: credentials.gender,\n        institution: credentials.institution,\n        role: credentials.role,\n        self_description: credentials.selfdescription,\n        areas_of_interest: credentials.areasofinterest,\n        email: credentials.email,\n        personalities: credentials.personalities\n    })\n    .then(() => {\n        dispatch({ type: EDIT_SUCCESS });\n        //history.push(profile.profile_url);\n    })\n}\n\nexport const startStreaming = (room) => (dispatch, getState) => {\n    const userid = getState().firebase.auth.uid;\n    firebase.firestore().collection(\"rooms\").doc(userid).set({\n        host: userid,\n        meeting_link: room.link,\n        room_description: room.description,\n        tasks_tags: room.reduxtasks,\n        open: true,\n        participants: [],\n        notifications: 0\n    }).then(() => {\n        dispatch({ type: SUBMIT_SUCCESS });\n    }\n    )\n}\n\nexport const submitTicket = (info) => (dispatch, getState) => {\n    const userid = getState().firebase.auth.uid;\n    firebase.firestore().collection(\"users\").doc(userid).update({\n        tasks_description: info.description,\n        availability: true,\n        tasks_tags: info.reduxtasks\n    }).then(() => {\n        dispatch({ type: SUBMIT_SUCCESS });\n    }\n    )\n}\n\nexport const signOut = (history) => {\n    return (dispatch) => {\n        firebase.auth().signOut()\n        .then(() => {\n            dispatch({ type: SIGN_OUT });\n            history.push(\"/\");\n        }\n        );\n    }\n}\n\nexport const removeStreaming = () => (dispatch, getState) => {\n    const userid = getState().firebase.auth.uid;\n    firebase.firestore().collection(\"rooms\").doc(userid).update({\n        participants: [],\n        notifications: 0,\n        open: false\n    }).then(() => {\n        dispatch({ type: SUBMIT_SUCCESS });\n    }\n    )\n}\n\n/*\nexport const startConversation = (user2id, user2profile, user1profile, message) => (dispatch, getState) => {\n    const user1id = getState().firebase.auth.uid;\n    const messages = [message];\n    \n    firebase.firestore().collection(\"users\").doc(user1id).get()\n    .then((doc) => {\n        return doc.data().chats_history;\n    })\n    .then((history) => {\n        \n        var i = 0;\n        var current = \"\";\n        while (history && history[i]) {\n            if (history[i].friend_id === user2id) {\n                current = user2id;\n                firebase.firestore().collection(\"chats\").doc(history[i].messages).update({\n                    chats_info: firebase.firestore.FieldValue.arrayUnion(message)\n                })\n            }\n            i++;\n        }\n\n        if (current === \"\") {\n            firebase.firestore().collection(\"chats\").add({\n                chats_info: messages\n            })\n            .then((doc) => {\n                const user1append = { friend: user2profile.first_name + user2profile.last_name, friend_id: user2id, friend_image: user2profile.image, messages: doc.id};\n                const user2append = { friend: user1profile.first_name + user1profile.last_name, friend_id: user1id, friend_image: user1profile.image, messages: doc.id};\n                firebase.firestore().collection(\"users\").doc(user1id).update({\n                    chats_history: firebase.firestore.FieldValue.arrayUnion(user1append)\n                })\n                firebase.firestore().collection(\"users\").doc(user2id).update({\n                    chats_history: firebase.firestore.FieldValue.arrayUnion(user2append)\n                })\n            })\n        }\n    })\n    .then(() => {\n        dispatch({ type: ADDCHAT_SUCCESS });\n    })\n    }\n*/\n\n\n\nexport const startConversation = (user2id, user2profile, user1profile, message) => (dispatch, getState) => {\n    const user1id = getState().firebase.auth.uid;\n    console.log(message);\n    const messages = [message];\n    var chatid = \"\";\n\n    firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(user2id).get()\n    .then((doc) => {\n        if (doc.exists) {\n            chatid = doc.data().chat_id;\n            firebase.firestore().collection(\"chats\").doc(chatid).update({\n                messages: firebase.firestore.FieldValue.arrayUnion(message)\n            })\n            firebase.firestore().collection(\"users\").doc(user2id).collection(\"chat_history\").doc(user1id).update({\n                time: new Date().getTime(),\n                notifications: firebase.firestore.FieldValue.increment(1)\n            })\n            firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(user2id).update({\n                time: new Date().getTime()\n            })\n        }\n        else {\n            firebase.firestore().collection(\"chats\").add({\n                people: [user1id, user2id],\n                messages: messages\n            })\n            .then((doc) => {\n                firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(user2id).set({\n                    chat_id: doc.id,\n                    friend: user2profile.first_name + \" \" + user2profile.last_name,\n                    friend_image: user2profile.image,\n                    time: new Date().getTime(),\n                    notifications: 0\n                })\n                firebase.firestore().collection(\"users\").doc(user2id).collection(\"chat_history\").doc(user1id).set({\n                    chat_id: doc.id,\n                    friend: user1profile.first_name + \" \" + user1profile.last_name,\n                    friend_image: user1profile.image,\n                    time: new Date().getTime(),\n                    notifications: 1\n                })\n            })\n            .then(() => {\n                dispatch({ type: CHAT_SUCCESS })\n            })\n        }\n    })\n\n/*    \n    firebase.firestore().collection(\"users\").doc(user1id).get()\n    .then((doc) => {\n        history = doc.data().chats_history;\n        return history;\n    })\n    .then((history) => {\n        \n        var i = 0;\n        var current = \"\";\n        while (history && i < history.length) {\n            if (history[i].friend_id === user2id) {\n                current = user2id;\n                chatid = history[i].messages;\n                break;\n            }\n            else i++;\n        }\n        if (current !== \"\") {\n            firebase.firestore().collection(\"chats\").doc(history[i].messages).update({\n                chats_info: firebase.firestore.FieldValue.arrayUnion(message)\n            })\n            /*\n            .then(() => {\n                firebase.firestore().collection(\"users\").doc(user2id).update({\n                    chat_notifications: firebase.firestore.FieldValue.increment(1)\n                })\n            })\n            \n            .then(() => {\n                history[i].time = new Date().getTime();\n                firebase.firestore().collection(\"users\").doc(user1id).update({\n                    chats_history: history\n                })\n            })\n            .then(() => {\n                firebase.firestore().collection(\"users\").doc(user2id).get()\n                .then((doc) => {\n                    const user2history = doc.data().chats_history;\n                    const index = user2history.findIndex(x => x.friend_id === user1id);\n                    user2history[index].notifications++;\n                    user2history[index].time = new Date().getTime();\n                    firebase.firestore().collection(\"users\").doc(user2id).update({\n                        chats_history: user2history\n                    })\n                })\n            })\n            .then(() => {\n                dispatch({ type: CHAT_SUCCESS });\n            })\n        }\n\n        else {\n            firebase.firestore().collection(\"chats\").add({\n                chats_info: messages\n            })\n            .then((doc) => {\n                const user1append = { friend: user2profile.first_name + \" \" + user2profile.last_name, friend_id: user2id, friend_image: user2profile.image, messages: doc.id, notifications: 0, time: new Date().getTime()};\n                const user2append = { friend: user1profile.first_name + \" \" + user1profile.last_name, friend_id: user1id, friend_image: user1profile.image, messages: doc.id, notifications: 1, time: new Date().getTime()};\n                firebase.firestore().collection(\"users\").doc(user1id).update({\n                    chats_history: firebase.firestore.FieldValue.arrayUnion(user1append)\n                })\n                firebase.firestore().collection(\"users\").doc(user2id).update({\n                    chats_history: firebase.firestore.FieldValue.arrayUnion(user2append)\n                })\n                firebase.firestore().collection(\"users\").doc(user2id).update({\n                    chat_notifications: firebase.firestore.FieldValue.increment(1)\n                })\n                .then(() => {\n                    dispatch({ type: CHAT_SUCCESS });\n                })\n            })\n        }\n    })\n    */\n}\n\nexport const cancelNotifications = (chatid, uid) => (dispatch) => {\n    firebase.firestore().collection(\"users\").doc(uid).collection(\"chat_history\").doc(chatid).update({\n        notifications: 0\n    })\n}\n\nexport const joinSession = (hostid, time) => (dispatch, getState) => {\n    const participantid = getState().firebase.auth.uid;\n    let participant;\n    if (participantid) {\n    firebase.firestore().collection(\"users\").doc(participantid).get()\n    .then((doc) => {\n        return doc.data();\n    })\n    .then((data) => {\n        participant = {time: time, name: data.first_name + \" \" + data.last_name, image: data.image, id: participantid};\n        return participant\n    })\n    .then((participant) => {\n        firebase.firestore().collection(\"rooms\").doc(hostid).update({\n            participants: firebase.firestore.FieldValue.arrayUnion(participant),\n            notifications: firebase.firestore.FieldValue.increment(1)\n        })\n    })\n    .then(() => {\n        dispatch({ type: SUBMIT_SUCCESS });\n    })\n    }\n    else {       \n        participant = {time: time, name: \"Anonymous\", image: \"\", id: \"\"};\n        firebase.firestore().collection(\"rooms\").doc(hostid).update({\n            participants: firebase.firestore.FieldValue.arrayUnion(participant),\n            notifications: firebase.firestore.FieldValue.increment(1)\n        })\n    }\n}\n\n\n/*\nexport const startMatching = (userid, userprofile, usergender, genderpreference) => (dispatch) => {\n    let userspool;\n    var buddy = \"\";\n    let number;\n    var flag = false;\n\n    dispatch({ type: MATCHING_REQUEST });\n    firebase.firestore().collection(\"matching\").doc(\"pool\").get()\n    .then((doc) => {\n        userspool = doc.data().matching_pool;\n        return doc.data().matching_pool;\n    }) \n    .then((pool) => {\n        firebase.firestore().collection(\"matching\").doc(\"seekers\").get()\n        .then((doc) => {\n            if (doc.data().matching_seekers.length < pool.length) {\n                const seeker = {id: userid, gender: usergender, gender_preference: genderpreference};\n                firebase.firestore().collection(\"matching\").doc(\"seekers\").update({\n                    matching_seekers: firebase.firestore.FieldValue.arrayUnion(seeker)\n                })\n                .then(() => {\n                    localStorage.setItem(\"matching\", true);\n                    localStorage.setItem(\"pool\", false);\n                    localStorage.setItem(\"id\", userid);\n                    localStorage.setItem(\"gender\", usergender);\n                    localStorage.setItem(\"genderpreference\", genderpreference);\n                    const starttime = new Date().getTime();\n                    var currenttime;\n                    var loop = setInterval(() => {\n                        currenttime = new Date().getTime();\n                        if (currenttime - starttime > 12000) {\n                            clearInterval(loop);\n                            clearInterval(inn);\n                            firebase.firestore().collection(\"matching\").doc(\"seekers\").update({\n                                matching_seekers: firebase.firestore.FieldValue.arrayRemove({id: userid, gender: usergender, gender_preference: genderpreference})\n                            })\n                            dispatch({ type: MATCHING_FAIL });\n                            localStorage.setItem(\"matching\", false);\n                        } \n                        firebase.firestore().collection(\"matching\").doc(\"pool\").get()\n                        .then((doc) => {\n                            userspool = doc.data().matching_pool;\n                        }) \n                        .then(() => {\n                            var inn = setInterval(() => {\n                                number = Math.floor(Math.random() * userspool.length);\n                                if (userspool[number]) {\n                                    if (userspool[number].id !== userid && userspool[number].partner === \"\" && (userspool[number].gender === genderpreference || genderpreference === \"None\") && (userspool[number].gender_preference === usergender || userspool[number].gender_preference === \"None\")) {\n                                        flag = true;\n                                        clearInterval(inn);\n                                        clearInterval(loop);\n                                        const oldbuddy = {id: userspool[number].id, gender: userspool[number].gender, gender_preference: userspool[number].gender_preference, partner: userid, chatid: \"!\"};\n\n                                        firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                                            matching_pool: firebase.firestore.FieldValue.arrayRemove(userspool[number])\n                                        })\n                                        firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                                            matching_pool: firebase.firestore.FieldValue.arrayUnion(oldbuddy)\n                                        })\n                                        firebase.firestore().collection(\"matching\").doc(\"seekers\").update({\n                                            matching_seekers: firebase.firestore.FieldValue.arrayRemove({id: userid, gender: usergender, gender_preference: genderpreference})\n                                        })\n                                        firebase.firestore().collection(\"users\").doc(userspool[number].id).get()\n                                        .then((doc) => {\n                                            dispatch(matchingConversation(userspool[number].id, doc.data(), userprofile,  oldbuddy));      \n                                        })\n                                    }\n                                }\n                            }, 0);\n                        })\n                    }, 1000)\n                    \n                    })\n                }\n\n            else \n            {\n                firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                    matching_pool: firebase.firestore.FieldValue.arrayUnion({id: userid, gender: usergender, gender_preference: genderpreference, partner: \"\", chatid: \"!\"})\n                })\n                localStorage.setItem(\"matching\", true);\n                localStorage.setItem(\"pool\", true);               \n            let found;\n            var flag = false;\n            var starttime = new Date().getTime();\n            var currenttime;\n            var inn = setInterval(() => {\n                currenttime = new Date().getTime();\n                if (currenttime - starttime > 12000) {\n                    clearInterval(inn);\n\n\n\n\n\n                    firebase.firestore().collection(\"matching\").doc(\"pool\").get()\n                    .then((doc) => {\n                        const found = doc.data().matching_pool.find(element => element.id == userid);\n                        if (found.partner != \"\") {\n                            setTimeout(() => {\n                                firebase.firestore().collection(\"matching\").doc(\"pool\").get()\n                                .then((doc) => {\n                                    const found = doc.data().matching_pool.find(element => element.id == userid);\n                                    buddy = found.partner;\n                                    firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                                         matching_pool: firebase.firestore.FieldValue.arrayRemove({id: userid, gender: usergender, gender_preference: genderpreference, partner: found.partner, chatid: found.chatid})\n                                     })\n                                     .then(() => {\n                                         dispatch({ type: MATCHING_CHAT, payload: found.chatid })\n                                     })\n                                     .then(() => {\n                                         firebase.firestore().collection(\"users\").doc(found.partner).get()\n                                         .then((doc) => {\n                                             dispatch({ type: MATCHING_SUCCESS, payload: {id: doc.id, profile: doc.data()} });\n                                             localStorage.setItem(\"matching\", false);\n                                         })\n                                     })\n                                })\n                            }, 2000)\n                        } else {\n                            firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                                matching_pool: firebase.firestore.FieldValue.arrayRemove(found)\n                            })\n                            dispatch({ type: MATCHING_FAIL });\n                            localStorage.setItem(\"matching\", false);\n                        }\n                    })\n\n\n\n                }\n                else { \n                firebase.firestore().collection(\"matching\").doc(\"pool\").get()\n                .then((doc) => {\n                    userspool = doc.data().matching_pool;\n                    found = userspool.find(user => user.id === userid);\n                    if (found) {\n                    if (found.partner !== \"\" && found.chatid !== \"!\") {\n                        flag = true;\n                        clearInterval(inn);\n                       buddy = found.partner;\n                       firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                            matching_pool: firebase.firestore.FieldValue.arrayRemove({id: userid, gender: usergender, gender_preference: genderpreference, partner: found.partner, chatid: found.chatid})\n                        })\n                        .then(() => {\n                            dispatch({ type: MATCHING_CHAT, payload: found.chatid })\n                        })\n                        .then(() => {\n                            firebase.firestore().collection(\"users\").doc(found.partner).get()\n                            .then((doc) => {\n                                dispatch({ type: MATCHING_SUCCESS, payload: {id: doc.id, profile: doc.data()} });\n                                localStorage.setItem(\"matching\", false);\n                            })\n                        })\n                    }\n                }\n                })\n            }\n            }, 1000);\n        }  \n        }) \n    })\n}\n*/\n\nexport const startMatching = (userid, userprofile, usergender, genderpreference) => (dispatch) => {\n    let userspool;\n    var buddy = \"\";\n    let number;\n    var flag = false;\n    let temp;\n    let buddies;\n\n    dispatch({ type: MATCHING_REQUEST });\n    firebase.firestore().collection(\"matching\").doc(\"pool\").get()\n    .then((doc) => {\n        return doc.data().count;\n    }) \n    .then((poolcount) => {\n        firebase.firestore().collection(\"matching\").doc(\"seekers\").get()\n        .then((doc) => {\n            if (doc.data().count <= poolcount) {\n                firebase.firestore().collection(\"matching\").doc(\"seekers\").update({\n                    count: firebase.firestore.FieldValue.increment(1)\n                })\n                .then(() => {\n                firebase.firestore().collection(\"matching\").doc(\"seekers\").collection(\"matching_seekers\").doc(userid).set({\n                    gender: usergender,\n                    gender_preference: genderpreference\n                })\n                })\n                .then(() => {\n                    localStorage.setItem(\"matching\", true);\n                    localStorage.setItem(\"pool\", false);\n                    const starttime = new Date().getTime();\n                    var currenttime;\n                    var loop = setInterval(() => {\n                        currenttime = new Date().getTime();\n                        if (currenttime - starttime > 12000) {\n                            clearInterval(loop);\n                            clearInterval(inn);\n                            firebase.firestore().collection(\"matching\").doc(\"seekers\").update({\n                                count: firebase.firestore.FieldValue.increment(-1)\n                            })\n                            firebase.firestore().collection(\"matching\").doc(\"seekers\").collection(\"matching_seekers\").doc(userid).delete()\n                            .then(() => {\n                                dispatch({ type: MATCHING_FAIL });\n                                localStorage.setItem(\"matching\", false);\n                            })\n                        }\n                        else {\n                        /*\n                        firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").get()\n                        .then((querySnapshot) => {\n                            console.log(querySnapshot.docs);\n                        })\n                        */\n                        firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").where(\"gender_preference\", \"in\", [usergender, \"None\"]).get()\n                        .then((querySnapshot) => {\n                            buddies = querySnapshot.docs;\n                            /*\n                            console.log(buddies[0].id);\n                            console.log(buddies[0].data().partner);\n                            console.log(buddies[0].data().gender);\n                            console.log(buddies.length);\n                            */\n                            for (var i = 0; i < buddies.length; i++) {\n                                console.log(buddies.length);\n                                if (buddies[i].data().partner === \"\" && (buddies[i].data().gender === genderpreference || genderpreference === \"None\")) {\n                                    firebase.firestore().collection(\"matching\").doc(\"seekers\").update({\n                                        count: firebase.firestore.FieldValue.increment(-1)\n                                    })\n                                    buddy = buddies[i]\n                                    clearInterval(loop);\n                                    firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(buddy.id).update({\n                                        partner: userid\n                                    })\n                                    firebase.firestore().collection(\"matching\").doc(\"seekers\").collection(\"matching_seekers\").doc(userid).delete()\n                                    firebase.firestore().collection(\"users\").doc(buddy.id).get()\n                                    .then((doc) => {\n                                        dispatch(matchingConversation(buddy.id, doc.data(), userprofile))\n                                    })\n                                }\n                            }\n                        })\n                    }\n                    }, 1000);   \n                })\n            }\n            else \n            {\n                firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                    count: firebase.firestore.FieldValue.increment(1)\n                })\n                .then(() => {\n                firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(userid).set({\n                    gender: usergender, \n                    gender_preference: genderpreference, \n                    partner: \"\", \n                    chatid: \"!\"\n                })\n            })\n                localStorage.setItem(\"matching\", true);\n                localStorage.setItem(\"pool\", true);               \n            var starttime = new Date().getTime();\n            var currenttime;\n            var inn = setInterval(() => {\n                currenttime = new Date().getTime();\n                if (currenttime - starttime > 12000) {\n                    clearInterval(inn);\n                    firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(userid).get()\n                    .then((doc) =>{\n                        if (doc.data().partner != \"\") {\n                            var save = setInterval(() => {\n                                firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(userid).get()\n                                .then((doc) => {\n                \n                                    temp = doc.data();\n                                    if (temp.chatid != \"!\") {\n                                        clearInterval(save);\n                                        firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                                            count: firebase.firestore.FieldValue.increment(-1)\n                                        })\n                                        firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(userid).delete()\n                                        .then(() => {\n                                            dispatch({ type: MATCHING_CHAT, payload: temp.chatid })\n                                        })\n                                        .then(() => {\n                                            firebase.firestore().collection(\"users\").doc(temp.partner).get()\n                                            .then((doc) => {\n                                                dispatch({ type: MATCHING_SUCCESS, payload: {id: doc.id, profile: doc.data()} });\n                                                localStorage.setItem(\"matching\", false);\n                                            })\n                                        })\n                                    }\n                                })\n                            }, 1000)\n                        }\n                        else {\n                            firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                                count: firebase.firestore.FieldValue.increment(-1)\n                            })\n                            firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(userid).delete()\n                            .then(() => {\n                                dispatch({ type: MATCHING_FAIL });\n                                localStorage.setItem(\"matching\", false);\n                            })\n                        }\n                    })\n\n\n                    }\n                else { \n                    firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(userid).get()\n                    .then((doc) => {\n                        temp = doc.data();\n                        if (temp.partner !== \"\" && temp.chatid !== \"!\") {\n                            clearInterval(inn);\n                            firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                                count: firebase.firestore.FieldValue.increment(-1)\n                            })\n                            firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(userid).delete()\n                            .then(() => {\n                                dispatch({ type: MATCHING_CHAT, payload: temp.chatid })\n                            })\n                            .then(() => {\n                                firebase.firestore().collection(\"users\").doc(temp.partner).get()\n                                .then((doc) => {\n                                    dispatch({ type: MATCHING_SUCCESS, payload: {id: doc.id, profile: doc.data()} });\n                                    localStorage.setItem(\"matching\", false);\n                                })  \n                            })\n                        }\n                    })\n                }\n        }, 1000);\n        }  \n        }) \n    })\n}\n\n\nexport const matchingConversation = (user2id, user2profile, user1profile) => (dispatch, getState) => {\n    const user1id = getState().firebase.auth.uid;\n    var chatid = \"\";\n\n    firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(user2id).get()\n    .then((doc) => {\n        if (doc.exists) {\n            firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(user2id).update({\n                chatid: doc.data().chat_id\n            })\n            .then(() => {\n                dispatch({ type: MATCHING_CHAT, payload:  doc.data().chat_id });\n                dispatch({ type: MATCHING_SUCCESS, payload: {id: user2id, profile: user2profile} });\n                localStorage.setItem(\"matching\", false);\n            })\n        }\n        else {\n            firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(user2id).update({\n                chatid: \"\"\n            })\n            .then(() => {\n                dispatch({ type: MATCHING_CHAT, payload: \"\" });\n                dispatch({ type: MATCHING_SUCCESS, payload: {id: user2id, profile: user2profile} });\n                localStorage.setItem(\"matching\", false);\n            })\n        }\n    })\n}\n\n\n\n/*\nexport const matchingConversation = (user2id, user2profile, user1profile, oldbuddy) => (dispatch, getState) => {\n    const user1id = getState().firebase.auth.uid;\n    var chatid = \"\";\n\n    firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(user2id).get()\n    .then((doc) => {\n        if (doc.exists) {\n            firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                matching_pool: firebase.firestore.FieldValue.arrayRemove(oldbuddy)\n            })\n            .then(() => {\n                oldbuddy.chatid = doc.data().chat_id;\n                firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                    matching_pool: firebase.firestore.FieldValue.arrayUnion(oldbuddy)\n                })\n                dispatch({ type: MATCHING_CHAT, payload:  doc.data().chat_id });\n                dispatch({ type: MATCHING_SUCCESS, payload: {id: user2id, profile: user2profile} });\n                localStorage.setItem(\"matching\", false);\n            })\n        }\n        else {\n            firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                matching_pool: firebase.firestore.FieldValue.arrayRemove(oldbuddy)\n            })\n            .then(() => {\n                oldbuddy.chatid = \"\";\n                firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                    matching_pool: firebase.firestore.FieldValue.arrayUnion(oldbuddy)\n                })\n            })\n            .then(() => {\n                dispatch({ type: MATCHING_CHAT, payload: \"\" });\n                dispatch({ type: MATCHING_SUCCESS, payload: {id: user2id, profile: user2profile} });\n                localStorage.setItem(\"matching\", false);\n            })\n        }\n    })\n}\n*/\n\n\n\n/*\n    firebase.firestore().collection(\"users\").doc(user1id).get()\n    .then((doc) => {\n        return doc.data().chats_history;\n    })\n    .then((history) => {\n        \n        var i = 0;\n        var current = \"\";\n        while (history && i < history.length) {\n            if (history[i].friend_id === user2id) {\n                current = user2id;\n                chatid = history[i].messages;\n                firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                    matching_pool: firebase.firestore.FieldValue.arrayRemove(oldbuddy)\n                })\n                .then(() => {\n                    oldbuddy.chatid = chatid;\n                    firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                        matching_pool: firebase.firestore.FieldValue.arrayUnion(oldbuddy)\n                    })\n                })\n                break;\n            }\n            else i++;\n        }\n\n        if (current !== \"\") {\n            dispatch({ type: MATCHING_CHAT, payload: chatid });\n            dispatch({ type: MATCHING_SUCCESS, payload: {id: user2id, profile: user2profile} });\n            localStorage.setItem(\"matching\", false);\n        }\n\n        else {\n            firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                matching_pool: firebase.firestore.FieldValue.arrayRemove(oldbuddy)\n            })\n            .then(() => {\n                oldbuddy.chatid = \"\";\n                firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                    matching_pool: firebase.firestore.FieldValue.arrayUnion(oldbuddy)\n                })\n            })\n            .then(() => {\n                dispatch({ type: MATCHING_CHAT, payload: \"\" });\n                dispatch({ type: MATCHING_SUCCESS, payload: {id: user2id, profile: user2profile} });\n                localStorage.setItem(\"matching\", false);\n            })\n        }\n    })\n}\n*/\n\nexport const changeChat = (chatid) => (dispatch) => {\n    dispatch({ type: MATCHING_CHAT, payload: chatid });\n}\n\nexport const startMatchingConversation = (user2id, user2profile, user1profile, message) => (dispatch, getState) => {\n    const user1id = getState().firebase.auth.uid;\n    const messages = [message];\n    var chatid = \"\";\n\n    firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(user2id).get()\n    .then((doc) => {\n        if (doc.exists) {\n            chatid = doc.data().chat_id;\n            firebase.firestore().collection(\"chats\").doc(chatid).update({\n                messages: firebase.firestore.FieldValue.arrayUnion(message)\n            })\n            firebase.firestore().collection(\"users\").doc(user2id).collection(\"chat_history\").doc(user1id).update({\n                time: new Date().getTime(),\n                notifications: firebase.firestore.FieldValue.increment(1)\n            })\n            firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(user2id).update({\n                time: new Date().getTime()\n            })\n        }\n        else {\n            firebase.firestore().collection(\"chats\").add({\n                people: [user1id, user2id],\n                messages: messages\n            })\n            .then((doc) => {\n                chatid = doc.id;\n                firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(user2id).set({\n                    chat_id: doc.id,\n                    friend: user2profile.first_name + \" \" + user2profile.last_name,\n                    friend_image: user2profile.image,\n                    time: new Date().getTime(),\n                    notifications: 0\n                })\n                firebase.firestore().collection(\"users\").doc(user2id).collection(\"chat_history\").doc(user1id).set({\n                    chat_id: doc.id,\n                    friend: user1profile.first_name + \" \" + user1profile.last_name,\n                    friend_image: user1profile.image,\n                    time: new Date().getTime(),\n                    notifications: 1\n                })\n            })\n            .then(() => {\n                dispatch({ type: MATCHING_CHAT, payload: chatid })\n            })\n        }\n    })\n}\n\nexport const buildList = async (currentprofilelist, number, message, user1profile) => (dispatch, getState) => {\n    const user1id = getState().firebase.auth.uid;\n    var index = Math.floor(Math.random() * currentprofilelist.length);\n    var i = 0;\n    const startindex = index;\n    var count = 0\n    var randomlist = [];\n\n    while (i < number) {\n        if (index === currentprofilelist.length) {\n            index = 0;\n        }\n        if (index === startindex) {\n            count++;\n            if (count === 2) {\n                break;\n            }\n        }\n        if (currentprofilelist[index].id !== user1id) {\n            firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(currentprofilelist[index].id).get()\n            .then((doc) => {\n                if (doc.exists) {\n                    index++;\n                }\n                else {\n                    randomlist.push(currentprofilelist[index]);\n                    index++;\n                    i++;\n                }\n            })\n/*\n            var k = 0;\n            while (user1chatshistory && user1chatshistory[k]) {\n                if (user1chatshistory[k].friend_id === currentprofilelist[index].id) {\n                    flag = true;\n                    break;\n                }\n                k++;\n            }\n            if (flag === false) {\n                randomlist.push(currentprofilelist[index]);\n                index++;\n                i++\n            }\n            else {\n                index++;\n            }\n            */\n        }\n        \n        else index++;\n    }\n    return randomlist;\n}\n\nexport const groupMessaging =  (currentprofilelist, number, message, user1profile) => (dispatch, getState) => {\n    \n    const user1id = getState().firebase.auth.uid;\n    var index = Math.floor(Math.random() * currentprofilelist.length);\n    var i = 0;\n    const startindex = index;\n    var count = 0\n    var randomlist = [];\n    //var flag = false;\n    var user1chatshistory = [];\n    firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").get()\n    .then((querySnapshot) => {\n        querySnapshot.forEach((doc) => {\n            user1chatshistory.push(doc);\n        })\n        return user1chatshistory;\n    })\n    .then((user1chatshistory) => {\n        while (i < number) {\n            if (index === currentprofilelist.length) {\n                index = 0;\n            }\n            if (index === startindex) {\n                count++;\n                if (count === 2) {\n                    break;\n                }\n            }\n            if (currentprofilelist[index].id !== user1id) {\n                const found = user1chatshistory.find(element => element.id === currentprofilelist[index].id);\n                if (!found) {\n                    randomlist.push(currentprofilelist[index]);\n                    index++;\n                    i++;\n                }\n                else index++;   \n            }        \n            else index++;\n        }\n        if (randomlist.length < number) {\n         \n            var a = 0;\n            while (randomlist.length !== 0 && a < randomlist.length) {\n                dispatch(startConversation(randomlist[a].id, randomlist[a].profile, user1profile, message));\n                a++;\n            }\n            \n            dispatch({ type: BOTTLE_FAIL });\n        }\n        else {\n            \n            var j = 0;\n            while (j < randomlist.length) {\n                dispatch( startConversation(randomlist[j].id, randomlist[j].profile, user1profile, message) );\n                j++;\n            }\n            \n                dispatch({ type: BOTTLE_SUCCESS });\n        }\n    })\n\n    /*\n    while (i < number) {\n        console.log(startindex);\n        console.log(index);\n        if (index === currentprofilelist.length) {\n            index = 0;\n        }\n        if (index === startindex) {\n            count++;\n            if (count === 2) {\n                flag = true;\n                break;\n            }\n        }\n        if (currentprofilelist[index].id !== user1id) {\n            console.log(\"enter once\");\n            console.log(currentprofilelist[index].id);\n            firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(currentprofilelist[index].id).get()\n            .then((doc) => {\n                console.log(doc.exists);\n                if (doc.exists) {\n                    console.log(\"exist?\");\n                    index++;\n                }\n                else {\n                    console.log(\"does not exist\");\n                    randomlist.push(currentprofilelist[index]);\n                    console.log(currentprofilelist[index].id, currentprofilelist[index].profile, user1profile, message);\n                    dispatch(startConversation(currentprofilelist[index].id, currentprofilelist[index].profile, user1profile, message));\n                    index++;\n                    i++;\n                    if (i === number) {\n                        flag = true;\n                    }\n                    \n                }\n            })          \n        }        \n        else index++;\n    }\n\n    console.log(randomlist);\n    console.log(randomlist.length);\n    if (flag === true) {\n    console.log(randomlist);\n    console.log(randomlist.length);\n    if (randomlist.length < number) {\n        console.log(randomlist.length);\n        console.log(number);\n        \n        var a = 0;\n        while (randomlist.length !== 0 && a < randomlist.length) {\n            console.log(randomlist[a].id, randomlist[a].profile, user1profile, message);\n            startConversation(randomlist[a].id, randomlist[a].profile, user1profile, message);\n            a++;\n        }\n        \n        dispatch({ type: BOTTLE_FAIL });\n    }\n    else {\n        \n        var j = 0;\n        while (j < randomlist.length) {\n            dispatch( startConversation(randomlist[j].id, randomlist[j].profile, user1profile, message) );\n            j++;\n        }\n        \n            dispatch({ type: BOTTLE_SUCCESS });\n    }\n}\n*/\n}\n\n\n\n\n\n\n\n/*\n{\n    let userspool;\n    const userid = getState().firebase.auth.uid;\n\n    firebase.firestore().collection(\"matching\").doc(\"pool\").get()\n    .then((doc) => {\n        userspool = doc.matching_pool;\n    })\n\n    firebase.firestore().collection(\"matching\").doc(\"userid\").set({\n        user: userid\n    })\n    .then(() => {\n        firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n            matching_pool: firebase.firestore.FieldValue.arrayUnion(userid)\n        })\n    })\n    .then(() => {\n        if (userspool !== null) {\n            const number = Math.floor(Math.random() * userspool.length);\n            if (userspool[number].gender === genderpreference) {\n                firebase.firestore().collection.doc(userspool[number].id).get()\n                .then((doc) => {\n                    if (doc.exists && doc.data().buddy !== \"\") {\n\n                    }\n                })\n            }\n        }\n\n    })\n}\n*/\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}