{"ast":null,"code":"import _regeneratorRuntime from\"/Users/liu550/Desktop/salon_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/liu550/Desktop/salon_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{AUTH_SUCCESS,AUTH_FAIL,EDIT_SUCCESS,SUBMIT_SUCCESS,SIGN_OUT,MATCHING_REQUEST,MATCHING_UPDATE,MATCHING_SUCCESS,MATCHING_FAIL,CHAT_SUCCESS,BOTTLE_SUCCESS,BOTTLE_FAIL,UPDATE_SUCCESS,MATCHING_CHAT}from\"./types\";import firebase from'../config/firebaseconfig';import{createStore}from\"redux\";export var signUp=function signUp(credentials,history){return function(dispatch){firebase.auth().createUserWithEmailAndPassword(credentials.email,credentials.password).then(function(resp){firebase.firestore().collection(\"users\").doc(resp.user.uid).set({first_name:credentials.firstname,last_name:credentials.lastname,email:credentials.email,password:credentials.password,profile_url:credentials.profileurl,gender:\"\",institution:\"\",role:\"\",self_description:\"\",areas_of_interest:[],image:\"https://firebasestorage.googleapis.com/v0/b/salon-b116e.appspot.com/o/images%2Fditto.jpeg?alt=media&token=098544b3-936e-44d5-a2c8-33e2704fca39\",availability:false,tasks_tags:[],tasks_description:\"\",personalities:[]});}).then(function(){dispatch({type:AUTH_SUCCESS});}).catch(function(err){dispatch({type:AUTH_FAIL,err:err});});};};/*\nexport const signUp = (credentials, history) => (dispatch) => {\n    firebase.auth().createUserWithEmailAndPassword(credentials.email, credentials.password)\n    .then((resp) => {\n    return firebase.firestore().collection(\"users\").doc(resp.user.uid).set({\n        first_name: credentials.firstname,\n        last_name: credentials.lastname,\n        email: credentials.email,\n        password: credentials.password,\n        profile_url: credentials.profileurl,\n        gender: \"\",\n        institution: \"\",\n        role: \"\",\n        self_description: \"\",\n        areas_of_interest: [],\n        availability: false,\n        tasks_description: \"\"\n    })\n    }).then(() => {\n        dispatch({ type: AUTH_SUCCESS });\n        history.push(credentials.profileurl);\n    })\n    .catch((err) => {\n        console.log(err.message);\n        dispatch({ type: AUTH_FAIL, err })\n    });\n}\n*/export var logIn=function logIn(credentials,history){return function(dispatch){firebase.auth().signInWithEmailAndPassword(credentials.email,credentials.password).then(function(){dispatch({type:AUTH_SUCCESS});//history.push(`/waitingroom`)\n}).catch(function(err){dispatch({type:AUTH_FAIL,err:err});});};};export var uploadImage=function uploadImage(image,userid){return function(dispatch){firebase.storage().ref('images/'+userid).put(image).then(function(){return firebase.storage().ref(\"images/\"+userid).getDownloadURL();}).then(function(image){firebase.firestore().collection(\"users\").doc(userid).update({image:image});}).then(function(){dispatch({type:EDIT_SUCCESS});});};};export var editProfile=function editProfile(credentials,userid,history){return function(dispatch,getState){var profile=getState().firebase.profile;firebase.firestore().collection(\"users\").doc(userid).update({first_name:credentials.firstname,last_name:credentials.lastname,gender:credentials.gender,institution:credentials.institution,role:credentials.role,self_description:credentials.selfdescription,areas_of_interest:credentials.areasofinterest,email:credentials.email,personalities:credentials.personalities}).then(function(){dispatch({type:EDIT_SUCCESS});//history.push(profile.profile_url);\n});};};export var startStreaming=function startStreaming(room){return function(dispatch,getState){var userid=getState().firebase.auth.uid;firebase.firestore().collection(\"rooms\").doc(userid).set({host:userid,meeting_link:room.link,room_description:room.description,tasks_tags:room.reduxtasks,open:true,participants:[],notifications:0}).then(function(){dispatch({type:SUBMIT_SUCCESS});});};};export var submitTicket=function submitTicket(info){return function(dispatch,getState){var userid=getState().firebase.auth.uid;firebase.firestore().collection(\"users\").doc(userid).update({tasks_description:info.description,availability:true,tasks_tags:info.reduxtasks}).then(function(){dispatch({type:SUBMIT_SUCCESS});});};};export var signOut=function signOut(history){return function(dispatch){firebase.auth().signOut().then(function(){dispatch({type:SIGN_OUT});history.push(\"/\");});};};export var removeStreaming=function removeStreaming(){return function(dispatch,getState){var userid=getState().firebase.auth.uid;firebase.firestore().collection(\"rooms\").doc(userid).update({participants:[],notifications:0,open:false}).then(function(){dispatch({type:SUBMIT_SUCCESS});});};};/*\nexport const startConversation = (user2id, user2profile, user1profile, message) => (dispatch, getState) => {\n    const user1id = getState().firebase.auth.uid;\n    const messages = [message];\n    \n    firebase.firestore().collection(\"users\").doc(user1id).get()\n    .then((doc) => {\n        return doc.data().chats_history;\n    })\n    .then((history) => {\n        \n        var i = 0;\n        var current = \"\";\n        while (history && history[i]) {\n            if (history[i].friend_id === user2id) {\n                current = user2id;\n                firebase.firestore().collection(\"chats\").doc(history[i].messages).update({\n                    chats_info: firebase.firestore.FieldValue.arrayUnion(message)\n                })\n            }\n            i++;\n        }\n\n        if (current === \"\") {\n            firebase.firestore().collection(\"chats\").add({\n                chats_info: messages\n            })\n            .then((doc) => {\n                const user1append = { friend: user2profile.first_name + user2profile.last_name, friend_id: user2id, friend_image: user2profile.image, messages: doc.id};\n                const user2append = { friend: user1profile.first_name + user1profile.last_name, friend_id: user1id, friend_image: user1profile.image, messages: doc.id};\n                firebase.firestore().collection(\"users\").doc(user1id).update({\n                    chats_history: firebase.firestore.FieldValue.arrayUnion(user1append)\n                })\n                firebase.firestore().collection(\"users\").doc(user2id).update({\n                    chats_history: firebase.firestore.FieldValue.arrayUnion(user2append)\n                })\n            })\n        }\n    })\n    .then(() => {\n        dispatch({ type: ADDCHAT_SUCCESS });\n    })\n    }\n*/export var startConversation=function startConversation(user2id,user2profile,user1profile,message){return function(dispatch,getState){var user1id=getState().firebase.auth.uid;console.log(message);var messages=[message];var chatid=\"\";firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(user2id).get().then(function(doc){if(doc.exists){chatid=doc.data().chat_id;firebase.firestore().collection(\"chats\").doc(chatid).update({messages:firebase.firestore.FieldValue.arrayUnion(message)});firebase.firestore().collection(\"users\").doc(user2id).collection(\"chat_history\").doc(user1id).update({time:new Date().getTime(),notifications:firebase.firestore.FieldValue.increment(1)});firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(user2id).update({time:new Date().getTime()});}else{firebase.firestore().collection(\"chats\").add({people:[user1id,user2id],messages:messages}).then(function(doc){firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(user2id).set({chat_id:doc.id,friend:user2profile.first_name+\" \"+user2profile.last_name,friend_image:user2profile.image,time:new Date().getTime(),notifications:0});firebase.firestore().collection(\"users\").doc(user2id).collection(\"chat_history\").doc(user1id).set({chat_id:doc.id,friend:user1profile.first_name+\" \"+user1profile.last_name,friend_image:user1profile.image,time:new Date().getTime(),notifications:1});}).then(function(){dispatch({type:CHAT_SUCCESS});});}});/*    \n    firebase.firestore().collection(\"users\").doc(user1id).get()\n    .then((doc) => {\n        history = doc.data().chats_history;\n        return history;\n    })\n    .then((history) => {\n        \n        var i = 0;\n        var current = \"\";\n        while (history && i < history.length) {\n            if (history[i].friend_id === user2id) {\n                current = user2id;\n                chatid = history[i].messages;\n                break;\n            }\n            else i++;\n        }\n        if (current !== \"\") {\n            firebase.firestore().collection(\"chats\").doc(history[i].messages).update({\n                chats_info: firebase.firestore.FieldValue.arrayUnion(message)\n            })\n            /*\n            .then(() => {\n                firebase.firestore().collection(\"users\").doc(user2id).update({\n                    chat_notifications: firebase.firestore.FieldValue.increment(1)\n                })\n            })\n            \n            .then(() => {\n                history[i].time = new Date().getTime();\n                firebase.firestore().collection(\"users\").doc(user1id).update({\n                    chats_history: history\n                })\n            })\n            .then(() => {\n                firebase.firestore().collection(\"users\").doc(user2id).get()\n                .then((doc) => {\n                    const user2history = doc.data().chats_history;\n                    const index = user2history.findIndex(x => x.friend_id === user1id);\n                    user2history[index].notifications++;\n                    user2history[index].time = new Date().getTime();\n                    firebase.firestore().collection(\"users\").doc(user2id).update({\n                        chats_history: user2history\n                    })\n                })\n            })\n            .then(() => {\n                dispatch({ type: CHAT_SUCCESS });\n            })\n        }\n\n        else {\n            firebase.firestore().collection(\"chats\").add({\n                chats_info: messages\n            })\n            .then((doc) => {\n                const user1append = { friend: user2profile.first_name + \" \" + user2profile.last_name, friend_id: user2id, friend_image: user2profile.image, messages: doc.id, notifications: 0, time: new Date().getTime()};\n                const user2append = { friend: user1profile.first_name + \" \" + user1profile.last_name, friend_id: user1id, friend_image: user1profile.image, messages: doc.id, notifications: 1, time: new Date().getTime()};\n                firebase.firestore().collection(\"users\").doc(user1id).update({\n                    chats_history: firebase.firestore.FieldValue.arrayUnion(user1append)\n                })\n                firebase.firestore().collection(\"users\").doc(user2id).update({\n                    chats_history: firebase.firestore.FieldValue.arrayUnion(user2append)\n                })\n                firebase.firestore().collection(\"users\").doc(user2id).update({\n                    chat_notifications: firebase.firestore.FieldValue.increment(1)\n                })\n                .then(() => {\n                    dispatch({ type: CHAT_SUCCESS });\n                })\n            })\n        }\n    })\n    */};};export var cancelNotifications=function cancelNotifications(chatid,uid){return function(dispatch){firebase.firestore().collection(\"users\").doc(uid).collection(\"chat_history\").doc(chatid).update({notifications:0});};};export var joinSession=function joinSession(hostid,time){return function(dispatch,getState){var participantid=getState().firebase.auth.uid;var participant;if(participantid){firebase.firestore().collection(\"users\").doc(participantid).get().then(function(doc){return doc.data();}).then(function(data){participant={time:time,name:data.first_name+\" \"+data.last_name,image:data.image,id:participantid};return participant;}).then(function(participant){firebase.firestore().collection(\"rooms\").doc(hostid).update({participants:firebase.firestore.FieldValue.arrayUnion(participant),notifications:firebase.firestore.FieldValue.increment(1)});}).then(function(){dispatch({type:SUBMIT_SUCCESS});});}else{participant={time:time,name:\"Anonymous\",image:\"\",id:\"\"};firebase.firestore().collection(\"rooms\").doc(hostid).update({participants:firebase.firestore.FieldValue.arrayUnion(participant),notifications:firebase.firestore.FieldValue.increment(1)});}};};/*\nexport const startMatching = (userid, userprofile, usergender, genderpreference) => (dispatch) => {\n    let userspool;\n    var buddy = \"\";\n    let number;\n    var flag = false;\n\n    dispatch({ type: MATCHING_REQUEST });\n    firebase.firestore().collection(\"matching\").doc(\"pool\").get()\n    .then((doc) => {\n        userspool = doc.data().matching_pool;\n        return doc.data().matching_pool;\n    }) \n    .then((pool) => {\n        firebase.firestore().collection(\"matching\").doc(\"seekers\").get()\n        .then((doc) => {\n            if (doc.data().matching_seekers.length < pool.length) {\n                const seeker = {id: userid, gender: usergender, gender_preference: genderpreference};\n                firebase.firestore().collection(\"matching\").doc(\"seekers\").update({\n                    matching_seekers: firebase.firestore.FieldValue.arrayUnion(seeker)\n                })\n                .then(() => {\n                    localStorage.setItem(\"matching\", true);\n                    localStorage.setItem(\"pool\", false);\n                    localStorage.setItem(\"id\", userid);\n                    localStorage.setItem(\"gender\", usergender);\n                    localStorage.setItem(\"genderpreference\", genderpreference);\n                    const starttime = new Date().getTime();\n                    var currenttime;\n                    var loop = setInterval(() => {\n                        currenttime = new Date().getTime();\n                        if (currenttime - starttime > 12000) {\n                            clearInterval(loop);\n                            clearInterval(inn);\n                            firebase.firestore().collection(\"matching\").doc(\"seekers\").update({\n                                matching_seekers: firebase.firestore.FieldValue.arrayRemove({id: userid, gender: usergender, gender_preference: genderpreference})\n                            })\n                            dispatch({ type: MATCHING_FAIL });\n                            localStorage.setItem(\"matching\", false);\n                        } \n                        firebase.firestore().collection(\"matching\").doc(\"pool\").get()\n                        .then((doc) => {\n                            userspool = doc.data().matching_pool;\n                        }) \n                        .then(() => {\n                            var inn = setInterval(() => {\n                                number = Math.floor(Math.random() * userspool.length);\n                                if (userspool[number]) {\n                                    if (userspool[number].id !== userid && userspool[number].partner === \"\" && (userspool[number].gender === genderpreference || genderpreference === \"None\") && (userspool[number].gender_preference === usergender || userspool[number].gender_preference === \"None\")) {\n                                        flag = true;\n                                        clearInterval(inn);\n                                        clearInterval(loop);\n                                        const oldbuddy = {id: userspool[number].id, gender: userspool[number].gender, gender_preference: userspool[number].gender_preference, partner: userid, chatid: \"!\"};\n\n                                        firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                                            matching_pool: firebase.firestore.FieldValue.arrayRemove(userspool[number])\n                                        })\n                                        firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                                            matching_pool: firebase.firestore.FieldValue.arrayUnion(oldbuddy)\n                                        })\n                                        firebase.firestore().collection(\"matching\").doc(\"seekers\").update({\n                                            matching_seekers: firebase.firestore.FieldValue.arrayRemove({id: userid, gender: usergender, gender_preference: genderpreference})\n                                        })\n                                        firebase.firestore().collection(\"users\").doc(userspool[number].id).get()\n                                        .then((doc) => {\n                                            dispatch(matchingConversation(userspool[number].id, doc.data(), userprofile,  oldbuddy));      \n                                        })\n                                    }\n                                }\n                            }, 0);\n                        })\n                    }, 1000)\n                    \n                    })\n                }\n\n            else \n            {\n                firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                    matching_pool: firebase.firestore.FieldValue.arrayUnion({id: userid, gender: usergender, gender_preference: genderpreference, partner: \"\", chatid: \"!\"})\n                })\n                localStorage.setItem(\"matching\", true);\n                localStorage.setItem(\"pool\", true);               \n            let found;\n            var flag = false;\n            var starttime = new Date().getTime();\n            var currenttime;\n            var inn = setInterval(() => {\n                currenttime = new Date().getTime();\n                if (currenttime - starttime > 12000) {\n                    clearInterval(inn);\n\n\n\n\n\n                    firebase.firestore().collection(\"matching\").doc(\"pool\").get()\n                    .then((doc) => {\n                        const found = doc.data().matching_pool.find(element => element.id == userid);\n                        if (found.partner != \"\") {\n                            setTimeout(() => {\n                                firebase.firestore().collection(\"matching\").doc(\"pool\").get()\n                                .then((doc) => {\n                                    const found = doc.data().matching_pool.find(element => element.id == userid);\n                                    buddy = found.partner;\n                                    firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                                         matching_pool: firebase.firestore.FieldValue.arrayRemove({id: userid, gender: usergender, gender_preference: genderpreference, partner: found.partner, chatid: found.chatid})\n                                     })\n                                     .then(() => {\n                                         dispatch({ type: MATCHING_CHAT, payload: found.chatid })\n                                     })\n                                     .then(() => {\n                                         firebase.firestore().collection(\"users\").doc(found.partner).get()\n                                         .then((doc) => {\n                                             dispatch({ type: MATCHING_SUCCESS, payload: {id: doc.id, profile: doc.data()} });\n                                             localStorage.setItem(\"matching\", false);\n                                         })\n                                     })\n                                })\n                            }, 2000)\n                        } else {\n                            firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                                matching_pool: firebase.firestore.FieldValue.arrayRemove(found)\n                            })\n                            dispatch({ type: MATCHING_FAIL });\n                            localStorage.setItem(\"matching\", false);\n                        }\n                    })\n\n\n\n                }\n                else { \n                firebase.firestore().collection(\"matching\").doc(\"pool\").get()\n                .then((doc) => {\n                    userspool = doc.data().matching_pool;\n                    found = userspool.find(user => user.id === userid);\n                    if (found) {\n                    if (found.partner !== \"\" && found.chatid !== \"!\") {\n                        flag = true;\n                        clearInterval(inn);\n                       buddy = found.partner;\n                       firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                            matching_pool: firebase.firestore.FieldValue.arrayRemove({id: userid, gender: usergender, gender_preference: genderpreference, partner: found.partner, chatid: found.chatid})\n                        })\n                        .then(() => {\n                            dispatch({ type: MATCHING_CHAT, payload: found.chatid })\n                        })\n                        .then(() => {\n                            firebase.firestore().collection(\"users\").doc(found.partner).get()\n                            .then((doc) => {\n                                dispatch({ type: MATCHING_SUCCESS, payload: {id: doc.id, profile: doc.data()} });\n                                localStorage.setItem(\"matching\", false);\n                            })\n                        })\n                    }\n                }\n                })\n            }\n            }, 1000);\n        }  \n        }) \n    })\n}\n*/export var startMatching=function startMatching(userid,userprofile,usergender,genderpreference){return function(dispatch){var userspool;var buddy=\"\";var number;var flag=false;var temp;var buddies;dispatch({type:MATCHING_REQUEST});firebase.firestore().collection(\"matching\").doc(\"pool\").get().then(function(doc){return doc.data().count;}).then(function(poolcount){firebase.firestore().collection(\"matching\").doc(\"seekers\").get().then(function(doc){if(doc.data().count<=poolcount){firebase.firestore().collection(\"matching\").doc(\"seekers\").update({count:firebase.firestore.FieldValue.increment(1)}).then(function(){firebase.firestore().collection(\"matching\").doc(\"seekers\").collection(\"matching_seekers\").doc(userid).set({gender:usergender,gender_preference:genderpreference});}).then(function(){localStorage.setItem(\"matching\",true);localStorage.setItem(\"pool\",false);var starttime=new Date().getTime();var currenttime;var loop=setInterval(function(){currenttime=new Date().getTime();if(currenttime-starttime>12000){clearInterval(loop);clearInterval(inn);firebase.firestore().collection(\"matching\").doc(\"seekers\").update({count:firebase.firestore.FieldValue.increment(-1)});firebase.firestore().collection(\"matching\").doc(\"seekers\").collection(\"matching_seekers\").doc(userid).delete().then(function(){dispatch({type:MATCHING_FAIL});localStorage.setItem(\"matching\",false);});}else{/*\n                        firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").get()\n                        .then((querySnapshot) => {\n                            console.log(querySnapshot.docs);\n                        })\n                        */firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").where(\"gender_preference\",\"in\",[usergender,\"None\"]).get().then(function(querySnapshot){buddies=querySnapshot.docs;/*\n                            console.log(buddies[0].id);\n                            console.log(buddies[0].data().partner);\n                            console.log(buddies[0].data().gender);\n                            console.log(buddies.length);\n                            */for(var i=0;i<buddies.length;i++){console.log(buddies.length);if(buddies[i].data().partner===\"\"&&(buddies[i].data().gender===genderpreference||genderpreference===\"None\")){firebase.firestore().collection(\"matching\").doc(\"seekers\").update({count:firebase.firestore.FieldValue.increment(-1)});buddy=buddies[i];clearInterval(loop);firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(buddy.id).update({partner:userid});firebase.firestore().collection(\"matching\").doc(\"seekers\").collection(\"matching_seekers\").doc(userid).delete();firebase.firestore().collection(\"users\").doc(buddy.id).get().then(function(doc){dispatch(matchingConversation(buddy.id,doc.data(),userprofile));});}}});}},1000);});}else{firebase.firestore().collection(\"matching\").doc(\"pool\").update({count:firebase.firestore.FieldValue.increment(1)}).then(function(){firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(userid).set({gender:usergender,gender_preference:genderpreference,partner:\"\",chatid:\"!\"});});localStorage.setItem(\"matching\",true);localStorage.setItem(\"pool\",true);var starttime=new Date().getTime();var currenttime;var inn=setInterval(function(){currenttime=new Date().getTime();if(currenttime-starttime>12000){clearInterval(inn);firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(userid).get().then(function(doc){if(doc.data().partner!=\"\"){var save=setInterval(function(){firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(userid).get().then(function(doc){temp=doc.data();if(temp.chatid!=\"!\"){clearInterval(save);firebase.firestore().collection(\"matching\").doc(\"pool\").update({count:firebase.firestore.FieldValue.increment(-1)});firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(userid).delete().then(function(){dispatch({type:MATCHING_CHAT,payload:temp.chatid});}).then(function(){firebase.firestore().collection(\"users\").doc(temp.partner).get().then(function(doc){dispatch({type:MATCHING_SUCCESS,payload:{id:doc.id,profile:doc.data()}});localStorage.setItem(\"matching\",false);});});}});},1000);}else{firebase.firestore().collection(\"matching\").doc(\"pool\").update({count:firebase.firestore.FieldValue.increment(-1)});firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(userid).delete().then(function(){dispatch({type:MATCHING_FAIL});localStorage.setItem(\"matching\",false);});}});}else{firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(userid).get().then(function(doc){temp=doc.data();if(temp.partner!==\"\"&&temp.chatid!==\"!\"){clearInterval(inn);firebase.firestore().collection(\"matching\").doc(\"pool\").update({count:firebase.firestore.FieldValue.increment(-1)});firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(userid).delete().then(function(){dispatch({type:MATCHING_CHAT,payload:temp.chatid});}).then(function(){firebase.firestore().collection(\"users\").doc(temp.partner).get().then(function(doc){dispatch({type:MATCHING_SUCCESS,payload:{id:doc.id,profile:doc.data()}});localStorage.setItem(\"matching\",false);});});}});}},1000);}});});};};export var matchingConversation=function matchingConversation(user2id,user2profile,user1profile){return function(dispatch,getState){var user1id=getState().firebase.auth.uid;var chatid=\"\";firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(user2id).get().then(function(doc){if(doc.exists){firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(user2id).update({chatid:doc.data().chat_id}).then(function(){dispatch({type:MATCHING_CHAT,payload:doc.data().chat_id});dispatch({type:MATCHING_SUCCESS,payload:{id:user2id,profile:user2profile}});localStorage.setItem(\"matching\",false);});}else{firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(user2id).update({chatid:\"\"}).then(function(){dispatch({type:MATCHING_CHAT,payload:\"\"});dispatch({type:MATCHING_SUCCESS,payload:{id:user2id,profile:user2profile}});localStorage.setItem(\"matching\",false);});}});};};/*\nexport const matchingConversation = (user2id, user2profile, user1profile, oldbuddy) => (dispatch, getState) => {\n    const user1id = getState().firebase.auth.uid;\n    var chatid = \"\";\n\n    firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(user2id).get()\n    .then((doc) => {\n        if (doc.exists) {\n            firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                matching_pool: firebase.firestore.FieldValue.arrayRemove(oldbuddy)\n            })\n            .then(() => {\n                oldbuddy.chatid = doc.data().chat_id;\n                firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                    matching_pool: firebase.firestore.FieldValue.arrayUnion(oldbuddy)\n                })\n                dispatch({ type: MATCHING_CHAT, payload:  doc.data().chat_id });\n                dispatch({ type: MATCHING_SUCCESS, payload: {id: user2id, profile: user2profile} });\n                localStorage.setItem(\"matching\", false);\n            })\n        }\n        else {\n            firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                matching_pool: firebase.firestore.FieldValue.arrayRemove(oldbuddy)\n            })\n            .then(() => {\n                oldbuddy.chatid = \"\";\n                firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                    matching_pool: firebase.firestore.FieldValue.arrayUnion(oldbuddy)\n                })\n            })\n            .then(() => {\n                dispatch({ type: MATCHING_CHAT, payload: \"\" });\n                dispatch({ type: MATCHING_SUCCESS, payload: {id: user2id, profile: user2profile} });\n                localStorage.setItem(\"matching\", false);\n            })\n        }\n    })\n}\n*/ /*\n    firebase.firestore().collection(\"users\").doc(user1id).get()\n    .then((doc) => {\n        return doc.data().chats_history;\n    })\n    .then((history) => {\n        \n        var i = 0;\n        var current = \"\";\n        while (history && i < history.length) {\n            if (history[i].friend_id === user2id) {\n                current = user2id;\n                chatid = history[i].messages;\n                firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                    matching_pool: firebase.firestore.FieldValue.arrayRemove(oldbuddy)\n                })\n                .then(() => {\n                    oldbuddy.chatid = chatid;\n                    firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                        matching_pool: firebase.firestore.FieldValue.arrayUnion(oldbuddy)\n                    })\n                })\n                break;\n            }\n            else i++;\n        }\n\n        if (current !== \"\") {\n            dispatch({ type: MATCHING_CHAT, payload: chatid });\n            dispatch({ type: MATCHING_SUCCESS, payload: {id: user2id, profile: user2profile} });\n            localStorage.setItem(\"matching\", false);\n        }\n\n        else {\n            firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                matching_pool: firebase.firestore.FieldValue.arrayRemove(oldbuddy)\n            })\n            .then(() => {\n                oldbuddy.chatid = \"\";\n                firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                    matching_pool: firebase.firestore.FieldValue.arrayUnion(oldbuddy)\n                })\n            })\n            .then(() => {\n                dispatch({ type: MATCHING_CHAT, payload: \"\" });\n                dispatch({ type: MATCHING_SUCCESS, payload: {id: user2id, profile: user2profile} });\n                localStorage.setItem(\"matching\", false);\n            })\n        }\n    })\n}\n*/export var changeChat=function changeChat(chatid){return function(dispatch){dispatch({type:MATCHING_CHAT,payload:chatid});};};export var startMatchingConversation=function startMatchingConversation(user2id,user2profile,user1profile,message){return function(dispatch,getState){var user1id=getState().firebase.auth.uid;var messages=[message];var chatid=\"\";firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(user2id).get().then(function(doc){if(doc.exists){chatid=doc.data().chat_id;firebase.firestore().collection(\"chats\").doc(chatid).update({messages:firebase.firestore.FieldValue.arrayUnion(message)});firebase.firestore().collection(\"users\").doc(user2id).collection(\"chat_history\").doc(user1id).update({time:new Date().getTime(),notifications:firebase.firestore.FieldValue.increment(1)});firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(user2id).update({time:new Date().getTime()});}else{firebase.firestore().collection(\"chats\").add({people:[user1id,user2id],messages:messages}).then(function(doc){chatid=doc.id;firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(user2id).set({chat_id:doc.id,friend:user2profile.first_name+\" \"+user2profile.last_name,friend_image:user2profile.image,time:new Date().getTime(),notifications:0});firebase.firestore().collection(\"users\").doc(user2id).collection(\"chat_history\").doc(user1id).set({chat_id:doc.id,friend:user1profile.first_name+\" \"+user1profile.last_name,friend_image:user1profile.image,time:new Date().getTime(),notifications:1});}).then(function(){dispatch({type:MATCHING_CHAT,payload:chatid});});}});};};export var buildList=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(currentprofilelist,number,message,user1profile){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:return _context.abrupt(\"return\",function(dispatch,getState){var user1id=getState().firebase.auth.uid;var index=Math.floor(Math.random()*currentprofilelist.length);var i=0;var startindex=index;var count=0;var randomlist=[];while(i<number){if(index===currentprofilelist.length){index=0;}if(index===startindex){count++;if(count===2){break;}}if(currentprofilelist[index].id!==user1id){firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(currentprofilelist[index].id).get().then(function(doc){if(doc.exists){index++;}else{randomlist.push(currentprofilelist[index]);index++;i++;}});/*\n            var k = 0;\n            while (user1chatshistory && user1chatshistory[k]) {\n                if (user1chatshistory[k].friend_id === currentprofilelist[index].id) {\n                    flag = true;\n                    break;\n                }\n                k++;\n            }\n            if (flag === false) {\n                randomlist.push(currentprofilelist[index]);\n                index++;\n                i++\n            }\n            else {\n                index++;\n            }\n            */}else index++;}return randomlist;});case 1:case\"end\":return _context.stop();}}},_callee);}));return function buildList(_x,_x2,_x3,_x4){return _ref.apply(this,arguments);};}();export var groupMessaging=function groupMessaging(currentprofilelist,number,message,user1profile){return function(dispatch,getState){var user1id=getState().firebase.auth.uid;var index=Math.floor(Math.random()*currentprofilelist.length);var i=0;var startindex=index;var count=0;var randomlist=[];//var flag = false;\nvar user1chatshistory=[];firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").get().then(function(querySnapshot){querySnapshot.forEach(function(doc){user1chatshistory.push(doc);});return user1chatshistory;}).then(function(user1chatshistory){while(i<number){if(index===currentprofilelist.length){index=0;}if(index===startindex){count++;if(count===2){break;}}if(currentprofilelist[index].id!==user1id){var found=user1chatshistory.find(function(element){return element.id===currentprofilelist[index].id;});if(!found){randomlist.push(currentprofilelist[index]);index++;i++;}else index++;}else index++;}if(randomlist.length<number){var a=0;while(randomlist.length!==0&&a<randomlist.length){dispatch(startConversation(randomlist[a].id,randomlist[a].profile,user1profile,message));a++;}dispatch({type:BOTTLE_FAIL});}else{var j=0;while(j<randomlist.length){dispatch(startConversation(randomlist[j].id,randomlist[j].profile,user1profile,message));j++;}dispatch({type:BOTTLE_SUCCESS});}});/*\n    while (i < number) {\n        console.log(startindex);\n        console.log(index);\n        if (index === currentprofilelist.length) {\n            index = 0;\n        }\n        if (index === startindex) {\n            count++;\n            if (count === 2) {\n                flag = true;\n                break;\n            }\n        }\n        if (currentprofilelist[index].id !== user1id) {\n            console.log(\"enter once\");\n            console.log(currentprofilelist[index].id);\n            firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(currentprofilelist[index].id).get()\n            .then((doc) => {\n                console.log(doc.exists);\n                if (doc.exists) {\n                    console.log(\"exist?\");\n                    index++;\n                }\n                else {\n                    console.log(\"does not exist\");\n                    randomlist.push(currentprofilelist[index]);\n                    console.log(currentprofilelist[index].id, currentprofilelist[index].profile, user1profile, message);\n                    dispatch(startConversation(currentprofilelist[index].id, currentprofilelist[index].profile, user1profile, message));\n                    index++;\n                    i++;\n                    if (i === number) {\n                        flag = true;\n                    }\n                    \n                }\n            })          \n        }        \n        else index++;\n    }\n\n    console.log(randomlist);\n    console.log(randomlist.length);\n    if (flag === true) {\n    console.log(randomlist);\n    console.log(randomlist.length);\n    if (randomlist.length < number) {\n        console.log(randomlist.length);\n        console.log(number);\n        \n        var a = 0;\n        while (randomlist.length !== 0 && a < randomlist.length) {\n            console.log(randomlist[a].id, randomlist[a].profile, user1profile, message);\n            startConversation(randomlist[a].id, randomlist[a].profile, user1profile, message);\n            a++;\n        }\n        \n        dispatch({ type: BOTTLE_FAIL });\n    }\n    else {\n        \n        var j = 0;\n        while (j < randomlist.length) {\n            dispatch( startConversation(randomlist[j].id, randomlist[j].profile, user1profile, message) );\n            j++;\n        }\n        \n            dispatch({ type: BOTTLE_SUCCESS });\n    }\n}\n*/};};/*\n{\n    let userspool;\n    const userid = getState().firebase.auth.uid;\n\n    firebase.firestore().collection(\"matching\").doc(\"pool\").get()\n    .then((doc) => {\n        userspool = doc.matching_pool;\n    })\n\n    firebase.firestore().collection(\"matching\").doc(\"userid\").set({\n        user: userid\n    })\n    .then(() => {\n        firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n            matching_pool: firebase.firestore.FieldValue.arrayUnion(userid)\n        })\n    })\n    .then(() => {\n        if (userspool !== null) {\n            const number = Math.floor(Math.random() * userspool.length);\n            if (userspool[number].gender === genderpreference) {\n                firebase.firestore().collection.doc(userspool[number].id).get()\n                .then((doc) => {\n                    if (doc.exists && doc.data().buddy !== \"\") {\n\n                    }\n                })\n            }\n        }\n\n    })\n}\n*/","map":{"version":3,"sources":["/Users/liu550/Desktop/salon_project/src/redux/actions.js"],"names":["AUTH_SUCCESS","AUTH_FAIL","EDIT_SUCCESS","SUBMIT_SUCCESS","SIGN_OUT","MATCHING_REQUEST","MATCHING_UPDATE","MATCHING_SUCCESS","MATCHING_FAIL","CHAT_SUCCESS","BOTTLE_SUCCESS","BOTTLE_FAIL","UPDATE_SUCCESS","MATCHING_CHAT","firebase","createStore","signUp","credentials","history","dispatch","auth","createUserWithEmailAndPassword","email","password","then","resp","firestore","collection","doc","user","uid","set","first_name","firstname","last_name","lastname","profile_url","profileurl","gender","institution","role","self_description","areas_of_interest","image","availability","tasks_tags","tasks_description","personalities","type","catch","err","logIn","signInWithEmailAndPassword","uploadImage","userid","storage","ref","put","getDownloadURL","update","editProfile","getState","profile","selfdescription","areasofinterest","startStreaming","room","host","meeting_link","link","room_description","description","reduxtasks","open","participants","notifications","submitTicket","info","signOut","push","removeStreaming","startConversation","user2id","user2profile","user1profile","message","user1id","console","log","messages","chatid","get","exists","data","chat_id","FieldValue","arrayUnion","time","Date","getTime","increment","add","people","id","friend","friend_image","cancelNotifications","joinSession","hostid","participantid","participant","name","startMatching","userprofile","usergender","genderpreference","userspool","buddy","number","flag","temp","buddies","count","poolcount","gender_preference","localStorage","setItem","starttime","currenttime","loop","setInterval","clearInterval","inn","delete","where","querySnapshot","docs","i","length","partner","matchingConversation","save","payload","changeChat","startMatchingConversation","buildList","currentprofilelist","index","Math","floor","random","startindex","randomlist","groupMessaging","user1chatshistory","forEach","found","find","element","a","j"],"mappings":"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","sourcesContent":["import { AUTH_SUCCESS, AUTH_FAIL, EDIT_SUCCESS, SUBMIT_SUCCESS, SIGN_OUT, MATCHING_REQUEST, MATCHING_UPDATE, MATCHING_SUCCESS, MATCHING_FAIL, CHAT_SUCCESS, BOTTLE_SUCCESS, BOTTLE_FAIL, UPDATE_SUCCESS, MATCHING_CHAT } from \"./types\"\nimport firebase from '../config/firebaseconfig'\nimport { createStore } from \"redux\";\n\n\n\nexport const signUp = (credentials, history) => (dispatch) => {\n    firebase.auth().createUserWithEmailAndPassword(credentials.email, credentials.password)\n    .then((resp) => {\n\n        firebase.firestore().collection(\"users\").doc(resp.user.uid).set({\n            first_name: credentials.firstname,\n            last_name: credentials.lastname,\n            email: credentials.email,\n            password: credentials.password,\n            profile_url: credentials.profileurl,\n            gender: \"\",\n            institution: \"\",\n            role: \"\",\n            self_description: \"\",\n            areas_of_interest: [],\n            image: \"https://firebasestorage.googleapis.com/v0/b/salon-b116e.appspot.com/o/images%2Fditto.jpeg?alt=media&token=098544b3-936e-44d5-a2c8-33e2704fca39\",\n            availability: false,\n            tasks_tags: [],\n            tasks_description: \"\",\n            personalities: []\n    })\n}   \n    ).then(() => {\n        dispatch({ type: AUTH_SUCCESS });\n    })\n    .catch((err) => {\n        dispatch({ type: AUTH_FAIL, err });\n    });\n}\n\n/*\nexport const signUp = (credentials, history) => (dispatch) => {\n    firebase.auth().createUserWithEmailAndPassword(credentials.email, credentials.password)\n    .then((resp) => {\n    return firebase.firestore().collection(\"users\").doc(resp.user.uid).set({\n        first_name: credentials.firstname,\n        last_name: credentials.lastname,\n        email: credentials.email,\n        password: credentials.password,\n        profile_url: credentials.profileurl,\n        gender: \"\",\n        institution: \"\",\n        role: \"\",\n        self_description: \"\",\n        areas_of_interest: [],\n        availability: false,\n        tasks_description: \"\"\n    })\n    }).then(() => {\n        dispatch({ type: AUTH_SUCCESS });\n        history.push(credentials.profileurl);\n    })\n    .catch((err) => {\n        console.log(err.message);\n        dispatch({ type: AUTH_FAIL, err })\n    });\n}\n*/\n\nexport const logIn = (credentials, history) => {\n    return (dispatch) => {\n        firebase.auth().signInWithEmailAndPassword(\n            credentials.email,\n            credentials.password\n        ).then(() => {\n            dispatch({ type: AUTH_SUCCESS });\n            //history.push(`/waitingroom`)\n        })\n        .catch((err) => {\n            dispatch({ type: AUTH_FAIL, err });\n        })\n    }\n}\n\nexport const uploadImage = ( image, userid ) => (dispatch) => {\n    firebase.storage().ref('images/'+userid).put(image)\n    .then(() => {\n        return firebase.storage().ref(`images/`+userid).getDownloadURL()\n    })\n    .then((image) => {\n        firebase.firestore().collection(\"users\").doc(userid).update({\n            image: image\n        })\n    }).then(() => {\n        dispatch({ type: EDIT_SUCCESS });\n    })\n}\n\nexport const editProfile = (credentials, userid, history) => (dispatch, getState) => {\n    const profile = getState().firebase.profile;\n    firebase.firestore().collection(\"users\").doc(userid).update({\n        first_name: credentials.firstname,\n        last_name: credentials.lastname,\n        gender: credentials.gender,\n        institution: credentials.institution,\n        role: credentials.role,\n        self_description: credentials.selfdescription,\n        areas_of_interest: credentials.areasofinterest,\n        email: credentials.email,\n        personalities: credentials.personalities\n    })\n    .then(() => {\n        dispatch({ type: EDIT_SUCCESS });\n        //history.push(profile.profile_url);\n    })\n}\n\nexport const startStreaming = (room) => (dispatch, getState) => {\n    const userid = getState().firebase.auth.uid;\n    firebase.firestore().collection(\"rooms\").doc(userid).set({\n        host: userid,\n        meeting_link: room.link,\n        room_description: room.description,\n        tasks_tags: room.reduxtasks,\n        open: true,\n        participants: [],\n        notifications: 0\n    }).then(() => {\n        dispatch({ type: SUBMIT_SUCCESS });\n    }\n    )\n}\n\nexport const submitTicket = (info) => (dispatch, getState) => {\n    const userid = getState().firebase.auth.uid;\n    firebase.firestore().collection(\"users\").doc(userid).update({\n        tasks_description: info.description,\n        availability: true,\n        tasks_tags: info.reduxtasks\n    }).then(() => {\n        dispatch({ type: SUBMIT_SUCCESS });\n    }\n    )\n}\n\nexport const signOut = (history) => {\n    return (dispatch) => {\n        firebase.auth().signOut()\n        .then(() => {\n            dispatch({ type: SIGN_OUT });\n            history.push(\"/\");\n        }\n        );\n    }\n}\n\nexport const removeStreaming = () => (dispatch, getState) => {\n    const userid = getState().firebase.auth.uid;\n    firebase.firestore().collection(\"rooms\").doc(userid).update({\n        participants: [],\n        notifications: 0,\n        open: false\n    }).then(() => {\n        dispatch({ type: SUBMIT_SUCCESS });\n    }\n    )\n}\n\n/*\nexport const startConversation = (user2id, user2profile, user1profile, message) => (dispatch, getState) => {\n    const user1id = getState().firebase.auth.uid;\n    const messages = [message];\n    \n    firebase.firestore().collection(\"users\").doc(user1id).get()\n    .then((doc) => {\n        return doc.data().chats_history;\n    })\n    .then((history) => {\n        \n        var i = 0;\n        var current = \"\";\n        while (history && history[i]) {\n            if (history[i].friend_id === user2id) {\n                current = user2id;\n                firebase.firestore().collection(\"chats\").doc(history[i].messages).update({\n                    chats_info: firebase.firestore.FieldValue.arrayUnion(message)\n                })\n            }\n            i++;\n        }\n\n        if (current === \"\") {\n            firebase.firestore().collection(\"chats\").add({\n                chats_info: messages\n            })\n            .then((doc) => {\n                const user1append = { friend: user2profile.first_name + user2profile.last_name, friend_id: user2id, friend_image: user2profile.image, messages: doc.id};\n                const user2append = { friend: user1profile.first_name + user1profile.last_name, friend_id: user1id, friend_image: user1profile.image, messages: doc.id};\n                firebase.firestore().collection(\"users\").doc(user1id).update({\n                    chats_history: firebase.firestore.FieldValue.arrayUnion(user1append)\n                })\n                firebase.firestore().collection(\"users\").doc(user2id).update({\n                    chats_history: firebase.firestore.FieldValue.arrayUnion(user2append)\n                })\n            })\n        }\n    })\n    .then(() => {\n        dispatch({ type: ADDCHAT_SUCCESS });\n    })\n    }\n*/\n\n\n\nexport const startConversation = (user2id, user2profile, user1profile, message) => (dispatch, getState) => {\n    const user1id = getState().firebase.auth.uid;\n    console.log(message);\n    const messages = [message];\n    var chatid = \"\";\n\n    firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(user2id).get()\n    .then((doc) => {\n        if (doc.exists) {\n            chatid = doc.data().chat_id;\n            firebase.firestore().collection(\"chats\").doc(chatid).update({\n                messages: firebase.firestore.FieldValue.arrayUnion(message)\n            })\n            firebase.firestore().collection(\"users\").doc(user2id).collection(\"chat_history\").doc(user1id).update({\n                time: new Date().getTime(),\n                notifications: firebase.firestore.FieldValue.increment(1)\n            })\n            firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(user2id).update({\n                time: new Date().getTime()\n            })\n        }\n        else {\n            firebase.firestore().collection(\"chats\").add({\n                people: [user1id, user2id],\n                messages: messages\n            })\n            .then((doc) => {\n                firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(user2id).set({\n                    chat_id: doc.id,\n                    friend: user2profile.first_name + \" \" + user2profile.last_name,\n                    friend_image: user2profile.image,\n                    time: new Date().getTime(),\n                    notifications: 0\n                })\n                firebase.firestore().collection(\"users\").doc(user2id).collection(\"chat_history\").doc(user1id).set({\n                    chat_id: doc.id,\n                    friend: user1profile.first_name + \" \" + user1profile.last_name,\n                    friend_image: user1profile.image,\n                    time: new Date().getTime(),\n                    notifications: 1\n                })\n            })\n            .then(() => {\n                dispatch({ type: CHAT_SUCCESS })\n            })\n        }\n    })\n\n/*    \n    firebase.firestore().collection(\"users\").doc(user1id).get()\n    .then((doc) => {\n        history = doc.data().chats_history;\n        return history;\n    })\n    .then((history) => {\n        \n        var i = 0;\n        var current = \"\";\n        while (history && i < history.length) {\n            if (history[i].friend_id === user2id) {\n                current = user2id;\n                chatid = history[i].messages;\n                break;\n            }\n            else i++;\n        }\n        if (current !== \"\") {\n            firebase.firestore().collection(\"chats\").doc(history[i].messages).update({\n                chats_info: firebase.firestore.FieldValue.arrayUnion(message)\n            })\n            /*\n            .then(() => {\n                firebase.firestore().collection(\"users\").doc(user2id).update({\n                    chat_notifications: firebase.firestore.FieldValue.increment(1)\n                })\n            })\n            \n            .then(() => {\n                history[i].time = new Date().getTime();\n                firebase.firestore().collection(\"users\").doc(user1id).update({\n                    chats_history: history\n                })\n            })\n            .then(() => {\n                firebase.firestore().collection(\"users\").doc(user2id).get()\n                .then((doc) => {\n                    const user2history = doc.data().chats_history;\n                    const index = user2history.findIndex(x => x.friend_id === user1id);\n                    user2history[index].notifications++;\n                    user2history[index].time = new Date().getTime();\n                    firebase.firestore().collection(\"users\").doc(user2id).update({\n                        chats_history: user2history\n                    })\n                })\n            })\n            .then(() => {\n                dispatch({ type: CHAT_SUCCESS });\n            })\n        }\n\n        else {\n            firebase.firestore().collection(\"chats\").add({\n                chats_info: messages\n            })\n            .then((doc) => {\n                const user1append = { friend: user2profile.first_name + \" \" + user2profile.last_name, friend_id: user2id, friend_image: user2profile.image, messages: doc.id, notifications: 0, time: new Date().getTime()};\n                const user2append = { friend: user1profile.first_name + \" \" + user1profile.last_name, friend_id: user1id, friend_image: user1profile.image, messages: doc.id, notifications: 1, time: new Date().getTime()};\n                firebase.firestore().collection(\"users\").doc(user1id).update({\n                    chats_history: firebase.firestore.FieldValue.arrayUnion(user1append)\n                })\n                firebase.firestore().collection(\"users\").doc(user2id).update({\n                    chats_history: firebase.firestore.FieldValue.arrayUnion(user2append)\n                })\n                firebase.firestore().collection(\"users\").doc(user2id).update({\n                    chat_notifications: firebase.firestore.FieldValue.increment(1)\n                })\n                .then(() => {\n                    dispatch({ type: CHAT_SUCCESS });\n                })\n            })\n        }\n    })\n    */\n}\n\nexport const cancelNotifications = (chatid, uid) => (dispatch) => {\n    firebase.firestore().collection(\"users\").doc(uid).collection(\"chat_history\").doc(chatid).update({\n        notifications: 0\n    })\n}\n\nexport const joinSession = (hostid, time) => (dispatch, getState) => {\n    const participantid = getState().firebase.auth.uid;\n    let participant;\n    if (participantid) {\n    firebase.firestore().collection(\"users\").doc(participantid).get()\n    .then((doc) => {\n        return doc.data();\n    })\n    .then((data) => {\n        participant = {time: time, name: data.first_name + \" \" + data.last_name, image: data.image, id: participantid};\n        return participant\n    })\n    .then((participant) => {\n        firebase.firestore().collection(\"rooms\").doc(hostid).update({\n            participants: firebase.firestore.FieldValue.arrayUnion(participant),\n            notifications: firebase.firestore.FieldValue.increment(1)\n        })\n    })\n    .then(() => {\n        dispatch({ type: SUBMIT_SUCCESS });\n    })\n    }\n    else {       \n        participant = {time: time, name: \"Anonymous\", image: \"\", id: \"\"};\n        firebase.firestore().collection(\"rooms\").doc(hostid).update({\n            participants: firebase.firestore.FieldValue.arrayUnion(participant),\n            notifications: firebase.firestore.FieldValue.increment(1)\n        })\n    }\n}\n\n\n/*\nexport const startMatching = (userid, userprofile, usergender, genderpreference) => (dispatch) => {\n    let userspool;\n    var buddy = \"\";\n    let number;\n    var flag = false;\n\n    dispatch({ type: MATCHING_REQUEST });\n    firebase.firestore().collection(\"matching\").doc(\"pool\").get()\n    .then((doc) => {\n        userspool = doc.data().matching_pool;\n        return doc.data().matching_pool;\n    }) \n    .then((pool) => {\n        firebase.firestore().collection(\"matching\").doc(\"seekers\").get()\n        .then((doc) => {\n            if (doc.data().matching_seekers.length < pool.length) {\n                const seeker = {id: userid, gender: usergender, gender_preference: genderpreference};\n                firebase.firestore().collection(\"matching\").doc(\"seekers\").update({\n                    matching_seekers: firebase.firestore.FieldValue.arrayUnion(seeker)\n                })\n                .then(() => {\n                    localStorage.setItem(\"matching\", true);\n                    localStorage.setItem(\"pool\", false);\n                    localStorage.setItem(\"id\", userid);\n                    localStorage.setItem(\"gender\", usergender);\n                    localStorage.setItem(\"genderpreference\", genderpreference);\n                    const starttime = new Date().getTime();\n                    var currenttime;\n                    var loop = setInterval(() => {\n                        currenttime = new Date().getTime();\n                        if (currenttime - starttime > 12000) {\n                            clearInterval(loop);\n                            clearInterval(inn);\n                            firebase.firestore().collection(\"matching\").doc(\"seekers\").update({\n                                matching_seekers: firebase.firestore.FieldValue.arrayRemove({id: userid, gender: usergender, gender_preference: genderpreference})\n                            })\n                            dispatch({ type: MATCHING_FAIL });\n                            localStorage.setItem(\"matching\", false);\n                        } \n                        firebase.firestore().collection(\"matching\").doc(\"pool\").get()\n                        .then((doc) => {\n                            userspool = doc.data().matching_pool;\n                        }) \n                        .then(() => {\n                            var inn = setInterval(() => {\n                                number = Math.floor(Math.random() * userspool.length);\n                                if (userspool[number]) {\n                                    if (userspool[number].id !== userid && userspool[number].partner === \"\" && (userspool[number].gender === genderpreference || genderpreference === \"None\") && (userspool[number].gender_preference === usergender || userspool[number].gender_preference === \"None\")) {\n                                        flag = true;\n                                        clearInterval(inn);\n                                        clearInterval(loop);\n                                        const oldbuddy = {id: userspool[number].id, gender: userspool[number].gender, gender_preference: userspool[number].gender_preference, partner: userid, chatid: \"!\"};\n\n                                        firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                                            matching_pool: firebase.firestore.FieldValue.arrayRemove(userspool[number])\n                                        })\n                                        firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                                            matching_pool: firebase.firestore.FieldValue.arrayUnion(oldbuddy)\n                                        })\n                                        firebase.firestore().collection(\"matching\").doc(\"seekers\").update({\n                                            matching_seekers: firebase.firestore.FieldValue.arrayRemove({id: userid, gender: usergender, gender_preference: genderpreference})\n                                        })\n                                        firebase.firestore().collection(\"users\").doc(userspool[number].id).get()\n                                        .then((doc) => {\n                                            dispatch(matchingConversation(userspool[number].id, doc.data(), userprofile,  oldbuddy));      \n                                        })\n                                    }\n                                }\n                            }, 0);\n                        })\n                    }, 1000)\n                    \n                    })\n                }\n\n            else \n            {\n                firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                    matching_pool: firebase.firestore.FieldValue.arrayUnion({id: userid, gender: usergender, gender_preference: genderpreference, partner: \"\", chatid: \"!\"})\n                })\n                localStorage.setItem(\"matching\", true);\n                localStorage.setItem(\"pool\", true);               \n            let found;\n            var flag = false;\n            var starttime = new Date().getTime();\n            var currenttime;\n            var inn = setInterval(() => {\n                currenttime = new Date().getTime();\n                if (currenttime - starttime > 12000) {\n                    clearInterval(inn);\n\n\n\n\n\n                    firebase.firestore().collection(\"matching\").doc(\"pool\").get()\n                    .then((doc) => {\n                        const found = doc.data().matching_pool.find(element => element.id == userid);\n                        if (found.partner != \"\") {\n                            setTimeout(() => {\n                                firebase.firestore().collection(\"matching\").doc(\"pool\").get()\n                                .then((doc) => {\n                                    const found = doc.data().matching_pool.find(element => element.id == userid);\n                                    buddy = found.partner;\n                                    firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                                         matching_pool: firebase.firestore.FieldValue.arrayRemove({id: userid, gender: usergender, gender_preference: genderpreference, partner: found.partner, chatid: found.chatid})\n                                     })\n                                     .then(() => {\n                                         dispatch({ type: MATCHING_CHAT, payload: found.chatid })\n                                     })\n                                     .then(() => {\n                                         firebase.firestore().collection(\"users\").doc(found.partner).get()\n                                         .then((doc) => {\n                                             dispatch({ type: MATCHING_SUCCESS, payload: {id: doc.id, profile: doc.data()} });\n                                             localStorage.setItem(\"matching\", false);\n                                         })\n                                     })\n                                })\n                            }, 2000)\n                        } else {\n                            firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                                matching_pool: firebase.firestore.FieldValue.arrayRemove(found)\n                            })\n                            dispatch({ type: MATCHING_FAIL });\n                            localStorage.setItem(\"matching\", false);\n                        }\n                    })\n\n\n\n                }\n                else { \n                firebase.firestore().collection(\"matching\").doc(\"pool\").get()\n                .then((doc) => {\n                    userspool = doc.data().matching_pool;\n                    found = userspool.find(user => user.id === userid);\n                    if (found) {\n                    if (found.partner !== \"\" && found.chatid !== \"!\") {\n                        flag = true;\n                        clearInterval(inn);\n                       buddy = found.partner;\n                       firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                            matching_pool: firebase.firestore.FieldValue.arrayRemove({id: userid, gender: usergender, gender_preference: genderpreference, partner: found.partner, chatid: found.chatid})\n                        })\n                        .then(() => {\n                            dispatch({ type: MATCHING_CHAT, payload: found.chatid })\n                        })\n                        .then(() => {\n                            firebase.firestore().collection(\"users\").doc(found.partner).get()\n                            .then((doc) => {\n                                dispatch({ type: MATCHING_SUCCESS, payload: {id: doc.id, profile: doc.data()} });\n                                localStorage.setItem(\"matching\", false);\n                            })\n                        })\n                    }\n                }\n                })\n            }\n            }, 1000);\n        }  \n        }) \n    })\n}\n*/\n\nexport const startMatching = (userid, userprofile, usergender, genderpreference) => (dispatch) => {\n    let userspool;\n    var buddy = \"\";\n    let number;\n    var flag = false;\n    let temp;\n    let buddies;\n\n    dispatch({ type: MATCHING_REQUEST });\n    firebase.firestore().collection(\"matching\").doc(\"pool\").get()\n    .then((doc) => {\n        return doc.data().count;\n    }) \n    .then((poolcount) => {\n        firebase.firestore().collection(\"matching\").doc(\"seekers\").get()\n        .then((doc) => {\n            if (doc.data().count <= poolcount) {\n                firebase.firestore().collection(\"matching\").doc(\"seekers\").update({\n                    count: firebase.firestore.FieldValue.increment(1)\n                })\n                .then(() => {\n                firebase.firestore().collection(\"matching\").doc(\"seekers\").collection(\"matching_seekers\").doc(userid).set({\n                    gender: usergender,\n                    gender_preference: genderpreference\n                })\n                })\n                .then(() => {\n                    localStorage.setItem(\"matching\", true);\n                    localStorage.setItem(\"pool\", false);\n                    const starttime = new Date().getTime();\n                    var currenttime;\n                    var loop = setInterval(() => {\n                        currenttime = new Date().getTime();\n                        if (currenttime - starttime > 12000) {\n                            clearInterval(loop);\n                            clearInterval(inn);\n                            firebase.firestore().collection(\"matching\").doc(\"seekers\").update({\n                                count: firebase.firestore.FieldValue.increment(-1)\n                            })\n                            firebase.firestore().collection(\"matching\").doc(\"seekers\").collection(\"matching_seekers\").doc(userid).delete()\n                            .then(() => {\n                                dispatch({ type: MATCHING_FAIL });\n                                localStorage.setItem(\"matching\", false);\n                            })\n                        }\n                        else {\n                        /*\n                        firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").get()\n                        .then((querySnapshot) => {\n                            console.log(querySnapshot.docs);\n                        })\n                        */\n                        firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").where(\"gender_preference\", \"in\", [usergender, \"None\"]).get()\n                        .then((querySnapshot) => {\n                            buddies = querySnapshot.docs;\n                            /*\n                            console.log(buddies[0].id);\n                            console.log(buddies[0].data().partner);\n                            console.log(buddies[0].data().gender);\n                            console.log(buddies.length);\n                            */\n                            for (var i = 0; i < buddies.length; i++) {\n                                console.log(buddies.length);\n                                if (buddies[i].data().partner === \"\" && (buddies[i].data().gender === genderpreference || genderpreference === \"None\")) {\n                                    firebase.firestore().collection(\"matching\").doc(\"seekers\").update({\n                                        count: firebase.firestore.FieldValue.increment(-1)\n                                    })\n                                    buddy = buddies[i]\n                                    clearInterval(loop);\n                                    firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(buddy.id).update({\n                                        partner: userid\n                                    })\n                                    firebase.firestore().collection(\"matching\").doc(\"seekers\").collection(\"matching_seekers\").doc(userid).delete()\n                                    firebase.firestore().collection(\"users\").doc(buddy.id).get()\n                                    .then((doc) => {\n                                        dispatch(matchingConversation(buddy.id, doc.data(), userprofile))\n                                    })\n                                }\n                            }\n                        })\n                    }\n                    }, 1000);   \n                })\n            }\n            else \n            {\n                firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                    count: firebase.firestore.FieldValue.increment(1)\n                })\n                .then(() => {\n                firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(userid).set({\n                    gender: usergender, \n                    gender_preference: genderpreference, \n                    partner: \"\", \n                    chatid: \"!\"\n                })\n            })\n                localStorage.setItem(\"matching\", true);\n                localStorage.setItem(\"pool\", true);               \n            var starttime = new Date().getTime();\n            var currenttime;\n            var inn = setInterval(() => {\n                currenttime = new Date().getTime();\n                if (currenttime - starttime > 12000) {\n                    clearInterval(inn);\n                    firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(userid).get()\n                    .then((doc) =>{\n                        if (doc.data().partner != \"\") {\n                            var save = setInterval(() => {\n                                firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(userid).get()\n                                .then((doc) => {\n                \n                                    temp = doc.data();\n                                    if (temp.chatid != \"!\") {\n                                        clearInterval(save);\n                                        firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                                            count: firebase.firestore.FieldValue.increment(-1)\n                                        })\n                                        firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(userid).delete()\n                                        .then(() => {\n                                            dispatch({ type: MATCHING_CHAT, payload: temp.chatid })\n                                        })\n                                        .then(() => {\n                                            firebase.firestore().collection(\"users\").doc(temp.partner).get()\n                                            .then((doc) => {\n                                                dispatch({ type: MATCHING_SUCCESS, payload: {id: doc.id, profile: doc.data()} });\n                                                localStorage.setItem(\"matching\", false);\n                                            })\n                                        })\n                                    }\n                                })\n                            }, 1000)\n                        }\n                        else {\n                            firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                                count: firebase.firestore.FieldValue.increment(-1)\n                            })\n                            firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(userid).delete()\n                            .then(() => {\n                                dispatch({ type: MATCHING_FAIL });\n                                localStorage.setItem(\"matching\", false);\n                            })\n                        }\n                    })\n\n\n                    }\n                else { \n                    firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(userid).get()\n                    .then((doc) => {\n                        temp = doc.data();\n                        if (temp.partner !== \"\" && temp.chatid !== \"!\") {\n                            clearInterval(inn);\n                            firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                                count: firebase.firestore.FieldValue.increment(-1)\n                            })\n                            firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(userid).delete()\n                            .then(() => {\n                                dispatch({ type: MATCHING_CHAT, payload: temp.chatid })\n                            })\n                            .then(() => {\n                                firebase.firestore().collection(\"users\").doc(temp.partner).get()\n                                .then((doc) => {\n                                    dispatch({ type: MATCHING_SUCCESS, payload: {id: doc.id, profile: doc.data()} });\n                                    localStorage.setItem(\"matching\", false);\n                                })  \n                            })\n                        }\n                    })\n                }\n        }, 1000);\n        }  \n        }) \n    })\n}\n\n\nexport const matchingConversation = (user2id, user2profile, user1profile) => (dispatch, getState) => {\n    const user1id = getState().firebase.auth.uid;\n    var chatid = \"\";\n\n    firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(user2id).get()\n    .then((doc) => {\n        if (doc.exists) {\n            firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(user2id).update({\n                chatid: doc.data().chat_id\n            })\n            .then(() => {\n                dispatch({ type: MATCHING_CHAT, payload:  doc.data().chat_id });\n                dispatch({ type: MATCHING_SUCCESS, payload: {id: user2id, profile: user2profile} });\n                localStorage.setItem(\"matching\", false);\n            })\n        }\n        else {\n            firebase.firestore().collection(\"matching\").doc(\"pool\").collection(\"matching_pool\").doc(user2id).update({\n                chatid: \"\"\n            })\n            .then(() => {\n                dispatch({ type: MATCHING_CHAT, payload: \"\" });\n                dispatch({ type: MATCHING_SUCCESS, payload: {id: user2id, profile: user2profile} });\n                localStorage.setItem(\"matching\", false);\n            })\n        }\n    })\n}\n\n\n\n/*\nexport const matchingConversation = (user2id, user2profile, user1profile, oldbuddy) => (dispatch, getState) => {\n    const user1id = getState().firebase.auth.uid;\n    var chatid = \"\";\n\n    firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(user2id).get()\n    .then((doc) => {\n        if (doc.exists) {\n            firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                matching_pool: firebase.firestore.FieldValue.arrayRemove(oldbuddy)\n            })\n            .then(() => {\n                oldbuddy.chatid = doc.data().chat_id;\n                firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                    matching_pool: firebase.firestore.FieldValue.arrayUnion(oldbuddy)\n                })\n                dispatch({ type: MATCHING_CHAT, payload:  doc.data().chat_id });\n                dispatch({ type: MATCHING_SUCCESS, payload: {id: user2id, profile: user2profile} });\n                localStorage.setItem(\"matching\", false);\n            })\n        }\n        else {\n            firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                matching_pool: firebase.firestore.FieldValue.arrayRemove(oldbuddy)\n            })\n            .then(() => {\n                oldbuddy.chatid = \"\";\n                firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                    matching_pool: firebase.firestore.FieldValue.arrayUnion(oldbuddy)\n                })\n            })\n            .then(() => {\n                dispatch({ type: MATCHING_CHAT, payload: \"\" });\n                dispatch({ type: MATCHING_SUCCESS, payload: {id: user2id, profile: user2profile} });\n                localStorage.setItem(\"matching\", false);\n            })\n        }\n    })\n}\n*/\n\n\n\n/*\n    firebase.firestore().collection(\"users\").doc(user1id).get()\n    .then((doc) => {\n        return doc.data().chats_history;\n    })\n    .then((history) => {\n        \n        var i = 0;\n        var current = \"\";\n        while (history && i < history.length) {\n            if (history[i].friend_id === user2id) {\n                current = user2id;\n                chatid = history[i].messages;\n                firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                    matching_pool: firebase.firestore.FieldValue.arrayRemove(oldbuddy)\n                })\n                .then(() => {\n                    oldbuddy.chatid = chatid;\n                    firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                        matching_pool: firebase.firestore.FieldValue.arrayUnion(oldbuddy)\n                    })\n                })\n                break;\n            }\n            else i++;\n        }\n\n        if (current !== \"\") {\n            dispatch({ type: MATCHING_CHAT, payload: chatid });\n            dispatch({ type: MATCHING_SUCCESS, payload: {id: user2id, profile: user2profile} });\n            localStorage.setItem(\"matching\", false);\n        }\n\n        else {\n            firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                matching_pool: firebase.firestore.FieldValue.arrayRemove(oldbuddy)\n            })\n            .then(() => {\n                oldbuddy.chatid = \"\";\n                firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n                    matching_pool: firebase.firestore.FieldValue.arrayUnion(oldbuddy)\n                })\n            })\n            .then(() => {\n                dispatch({ type: MATCHING_CHAT, payload: \"\" });\n                dispatch({ type: MATCHING_SUCCESS, payload: {id: user2id, profile: user2profile} });\n                localStorage.setItem(\"matching\", false);\n            })\n        }\n    })\n}\n*/\n\nexport const changeChat = (chatid) => (dispatch) => {\n    dispatch({ type: MATCHING_CHAT, payload: chatid });\n}\n\nexport const startMatchingConversation = (user2id, user2profile, user1profile, message) => (dispatch, getState) => {\n    const user1id = getState().firebase.auth.uid;\n    const messages = [message];\n    var chatid = \"\";\n\n    firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(user2id).get()\n    .then((doc) => {\n        if (doc.exists) {\n            chatid = doc.data().chat_id;\n            firebase.firestore().collection(\"chats\").doc(chatid).update({\n                messages: firebase.firestore.FieldValue.arrayUnion(message)\n            })\n            firebase.firestore().collection(\"users\").doc(user2id).collection(\"chat_history\").doc(user1id).update({\n                time: new Date().getTime(),\n                notifications: firebase.firestore.FieldValue.increment(1)\n            })\n            firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(user2id).update({\n                time: new Date().getTime()\n            })\n        }\n        else {\n            firebase.firestore().collection(\"chats\").add({\n                people: [user1id, user2id],\n                messages: messages\n            })\n            .then((doc) => {\n                chatid = doc.id;\n                firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(user2id).set({\n                    chat_id: doc.id,\n                    friend: user2profile.first_name + \" \" + user2profile.last_name,\n                    friend_image: user2profile.image,\n                    time: new Date().getTime(),\n                    notifications: 0\n                })\n                firebase.firestore().collection(\"users\").doc(user2id).collection(\"chat_history\").doc(user1id).set({\n                    chat_id: doc.id,\n                    friend: user1profile.first_name + \" \" + user1profile.last_name,\n                    friend_image: user1profile.image,\n                    time: new Date().getTime(),\n                    notifications: 1\n                })\n            })\n            .then(() => {\n                dispatch({ type: MATCHING_CHAT, payload: chatid })\n            })\n        }\n    })\n}\n\nexport const buildList = async (currentprofilelist, number, message, user1profile) => (dispatch, getState) => {\n    const user1id = getState().firebase.auth.uid;\n    var index = Math.floor(Math.random() * currentprofilelist.length);\n    var i = 0;\n    const startindex = index;\n    var count = 0\n    var randomlist = [];\n\n    while (i < number) {\n        if (index === currentprofilelist.length) {\n            index = 0;\n        }\n        if (index === startindex) {\n            count++;\n            if (count === 2) {\n                break;\n            }\n        }\n        if (currentprofilelist[index].id !== user1id) {\n            firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(currentprofilelist[index].id).get()\n            .then((doc) => {\n                if (doc.exists) {\n                    index++;\n                }\n                else {\n                    randomlist.push(currentprofilelist[index]);\n                    index++;\n                    i++;\n                }\n            })\n/*\n            var k = 0;\n            while (user1chatshistory && user1chatshistory[k]) {\n                if (user1chatshistory[k].friend_id === currentprofilelist[index].id) {\n                    flag = true;\n                    break;\n                }\n                k++;\n            }\n            if (flag === false) {\n                randomlist.push(currentprofilelist[index]);\n                index++;\n                i++\n            }\n            else {\n                index++;\n            }\n            */\n        }\n        \n        else index++;\n    }\n    return randomlist;\n}\n\nexport const groupMessaging =  (currentprofilelist, number, message, user1profile) => (dispatch, getState) => {\n    \n    const user1id = getState().firebase.auth.uid;\n    var index = Math.floor(Math.random() * currentprofilelist.length);\n    var i = 0;\n    const startindex = index;\n    var count = 0\n    var randomlist = [];\n    //var flag = false;\n    var user1chatshistory = [];\n    firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").get()\n    .then((querySnapshot) => {\n        querySnapshot.forEach((doc) => {\n            user1chatshistory.push(doc);\n        })\n        return user1chatshistory;\n    })\n    .then((user1chatshistory) => {\n        while (i < number) {\n            if (index === currentprofilelist.length) {\n                index = 0;\n            }\n            if (index === startindex) {\n                count++;\n                if (count === 2) {\n                    break;\n                }\n            }\n            if (currentprofilelist[index].id !== user1id) {\n                const found = user1chatshistory.find(element => element.id === currentprofilelist[index].id);\n                if (!found) {\n                    randomlist.push(currentprofilelist[index]);\n                    index++;\n                    i++;\n                }\n                else index++;   \n            }        \n            else index++;\n        }\n        if (randomlist.length < number) {\n         \n            var a = 0;\n            while (randomlist.length !== 0 && a < randomlist.length) {\n                dispatch(startConversation(randomlist[a].id, randomlist[a].profile, user1profile, message));\n                a++;\n            }\n            \n            dispatch({ type: BOTTLE_FAIL });\n        }\n        else {\n            \n            var j = 0;\n            while (j < randomlist.length) {\n                dispatch( startConversation(randomlist[j].id, randomlist[j].profile, user1profile, message) );\n                j++;\n            }\n            \n                dispatch({ type: BOTTLE_SUCCESS });\n        }\n    })\n\n    /*\n    while (i < number) {\n        console.log(startindex);\n        console.log(index);\n        if (index === currentprofilelist.length) {\n            index = 0;\n        }\n        if (index === startindex) {\n            count++;\n            if (count === 2) {\n                flag = true;\n                break;\n            }\n        }\n        if (currentprofilelist[index].id !== user1id) {\n            console.log(\"enter once\");\n            console.log(currentprofilelist[index].id);\n            firebase.firestore().collection(\"users\").doc(user1id).collection(\"chat_history\").doc(currentprofilelist[index].id).get()\n            .then((doc) => {\n                console.log(doc.exists);\n                if (doc.exists) {\n                    console.log(\"exist?\");\n                    index++;\n                }\n                else {\n                    console.log(\"does not exist\");\n                    randomlist.push(currentprofilelist[index]);\n                    console.log(currentprofilelist[index].id, currentprofilelist[index].profile, user1profile, message);\n                    dispatch(startConversation(currentprofilelist[index].id, currentprofilelist[index].profile, user1profile, message));\n                    index++;\n                    i++;\n                    if (i === number) {\n                        flag = true;\n                    }\n                    \n                }\n            })          \n        }        \n        else index++;\n    }\n\n    console.log(randomlist);\n    console.log(randomlist.length);\n    if (flag === true) {\n    console.log(randomlist);\n    console.log(randomlist.length);\n    if (randomlist.length < number) {\n        console.log(randomlist.length);\n        console.log(number);\n        \n        var a = 0;\n        while (randomlist.length !== 0 && a < randomlist.length) {\n            console.log(randomlist[a].id, randomlist[a].profile, user1profile, message);\n            startConversation(randomlist[a].id, randomlist[a].profile, user1profile, message);\n            a++;\n        }\n        \n        dispatch({ type: BOTTLE_FAIL });\n    }\n    else {\n        \n        var j = 0;\n        while (j < randomlist.length) {\n            dispatch( startConversation(randomlist[j].id, randomlist[j].profile, user1profile, message) );\n            j++;\n        }\n        \n            dispatch({ type: BOTTLE_SUCCESS });\n    }\n}\n*/\n}\n\n\n\n\n\n\n\n/*\n{\n    let userspool;\n    const userid = getState().firebase.auth.uid;\n\n    firebase.firestore().collection(\"matching\").doc(\"pool\").get()\n    .then((doc) => {\n        userspool = doc.matching_pool;\n    })\n\n    firebase.firestore().collection(\"matching\").doc(\"userid\").set({\n        user: userid\n    })\n    .then(() => {\n        firebase.firestore().collection(\"matching\").doc(\"pool\").update({\n            matching_pool: firebase.firestore.FieldValue.arrayUnion(userid)\n        })\n    })\n    .then(() => {\n        if (userspool !== null) {\n            const number = Math.floor(Math.random() * userspool.length);\n            if (userspool[number].gender === genderpreference) {\n                firebase.firestore().collection.doc(userspool[number].id).get()\n                .then((doc) => {\n                    if (doc.exists && doc.data().buddy !== \"\") {\n\n                    }\n                })\n            }\n        }\n\n    })\n}\n*/\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}