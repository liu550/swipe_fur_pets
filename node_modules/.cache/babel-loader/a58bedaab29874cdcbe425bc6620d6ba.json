{"ast":null,"code":"var _jsxFileName = \"/Users/liu550/Desktop/salon_project/src/components/chatbox2.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ChatWindow from './chatwindow.js';\nimport { Button } from 'react-bootstrap';\nimport \"./component.css\";\nimport firebase from '../config/firebaseconfig';\nimport ChatContainer from './chatbox2.js';\nimport ChatSection from './chatsection.js';\n\nclass ChatBox extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleOpen = chat => {\n      this.setState({\n        chatwindow: true,\n        chat: chat\n      });\n    };\n\n    this.openChat = e => {\n      e.preventDefault();\n      document.getElementById(\"notifications\").className = \"chatbox-toggle-buttons\";\n\n      if (this.state.shownotifications === true) {\n        this.setState({\n          shownotifications: false\n        });\n      }\n\n      this.setState({\n        chatbox: !this.state.chatbox\n      });\n\n      if (e.target.className === \"chatbox-toggle-buttons\") {\n        e.target.className = \"selected-chatbox-toggle-buttons\";\n      } else e.target.className = \"chatbox-toggle-buttons\";\n    };\n\n    this.openNotifications = e => {\n      e.preventDefault();\n      document.getElementById(\"chat\").className = \"chatbox-toggle-buttons\";\n\n      if (this.state.chatbox === true) {\n        this.setState({\n          chatbox: false\n        });\n      }\n\n      this.setState({\n        shownotifications: !this.state.shownotifications\n      });\n\n      if (e.target.className === \"chatbox-toggle-buttons\") {\n        e.target.className = \"selected-chatbox-toggle-buttons\";\n      } else e.target.className = \"chatbox-toggle-buttons\";\n    };\n\n    this.orderList = list => {\n      const chatlist = list.sort(function (a, b) {\n        return a.time - b.time;\n      });\n      var chatlistandnotifications = [];\n\n      for (let i = 0; i < chatlist.length; i++) {\n        firebase.firestore().collection(\"chats\").doc(chatlist[i].messages).onSnapshot(doc => {\n          const chatinfo = doc.data().chats_info;\n\n          if (chatinfo && chatinfo[chatinfo.length - 1].from !== this.props.auth.uid) {\n            this.setState(prevState => {\n              return {\n                notifications: prevState.notifications + 1\n              };\n            });\n          }\n        });\n      }\n\n      var chatnumber = 0;\n      chatlist && chatlist.map(chat => {\n        chatnumber = chatnumber + chat.notifications;\n        console.log(chatnumber);\n      });\n      this.setState({\n        chatlist: chatlist,\n        numberofchatnotifications: chatnumber\n      });\n    };\n\n    this.state = {\n      chatbox: false,\n      shownotifications: false,\n      chatwindow: false,\n      chat: \"\",\n      chatlist: [],\n      notifications: [],\n      numberofchatnotifications: 0\n    };\n    this.handleOpen = this.handleOpen.bind(this);\n    this.openChat = this.openChat.bind(this);\n    this.openNotifications = this.openNotifications.bind(this);\n  }\n\n  componentDidMount() {\n    const list = this.props.profile.chats_history;\n\n    if (list) {\n      this.orderList(list);\n    }\n\n    if (this.props.auth.uid) {\n      console.log(\"which part is first\");\n      var participants = [];\n      firebase.firestore().collection(\"rooms\").doc(this.props.auth.uid).get().then(doc => {\n        if (doc.exists) {\n          if (doc.data().open === true) {\n            participants = doc.data().participants;\n            return participants;\n          }\n        }\n      }).then(participants => {\n        this.setState({\n          notifications: participants\n        });\n      });\n    }\n  }\n  /*\n      componentDidUpdate() {\n          if (this.props.profile.chats_history) {\n              this.orderList(this.props.profile.chats_history)\n          }\n          if (this.props.auth.uid) {\n          var participants = [];\n          firebase.firestore().collection(\"rooms\").doc(this.props.auth.uid).get()\n          .then((doc) => {\n              if (doc.exists) {\n                  if (doc.data().open === true) {\n                      participants = doc.data().participants;\n                      return participants;\n                  }\n              }\n          })\n          .then((participants) => {\n              this.setState({\n                  notifications: participants\n              })\n          })\n      }\n      }\n  */\n\n\n  render() {\n    let box;\n\n    if (this.state.chatbox) {\n      box = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"chatbox-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }\n      }, this.state.chatlist && this.state.chatlist.map(chat => {\n        return /*#__PURE__*/React.createElement(ChatSection, {\n          chat: chat,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 21\n          }\n        })\n        /*\n        <button className=\"chatbox-section\" onClick={() => this.handleOpen(chat)}>\n            <img src={chat.friend_image} style={{ width: \"40px\", height: \"40px\" }}></img>\n            {chat.friend}\n        { chat.notifications > 0 ? <div className=\"notification\" style={{ float: \"right\"}}>{chat.notifications}</div> : null}\n        </button>\n        */\n        ;\n      }));\n    } else if (this.state.shownotifications) {\n      box = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"chatbox-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 19\n        }\n      }, this.state.notifications && this.state.notifications.map(notification => {\n        return /*#__PURE__*/React.createElement(\"button\", {\n          className: \"chatbox-section\",\n          onClick: () => this.handleOpen(notification),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"form-inline\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          src: notification.image,\n          style: {\n            width: \"40px\",\n            height: \"40px\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 25\n          }\n        }), notification.name, \" joins your session at \", notification.time));\n      }));\n    }\n\n    const chatlist = this.props.chatshistory;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chatbox-toggle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      id: \"notifications\",\n      className: \"chatbox-toggle-buttons\",\n      onClick: this.openNotifications,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }\n    }, \"Notifications\"), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"chat\",\n      className: \"chatbox-toggle-buttons\",\n      onClick: this.openChat,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }\n    }, \"Chat box\", this.state.numberofchatnotifications > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"notification\",\n      style: {\n        float: \"right\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 65\n      }\n    }, this.state.numberofchatnotifications) : null)), box, this.state.chatwindow ? /*#__PURE__*/React.createElement(ChatWindow, {\n      chat: this.state.chat,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 35\n      }\n    }) : null);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    auth: state.firebase.auth,\n    profile: state.firebase.profile\n  };\n};\n\nexport default connect(mapStateToProps)(ChatBox);","map":{"version":3,"sources":["/Users/liu550/Desktop/salon_project/src/components/chatbox2.js"],"names":["React","Component","connect","ChatWindow","Button","firebase","ChatContainer","ChatSection","ChatBox","constructor","props","handleOpen","chat","setState","chatwindow","openChat","e","preventDefault","document","getElementById","className","state","shownotifications","chatbox","target","openNotifications","orderList","list","chatlist","sort","a","b","time","chatlistandnotifications","i","length","firestore","collection","doc","messages","onSnapshot","chatinfo","data","chats_info","from","auth","uid","prevState","notifications","chatnumber","map","console","log","numberofchatnotifications","bind","componentDidMount","profile","chats_history","participants","get","then","exists","open","render","box","notification","image","width","height","name","chatshistory","float","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ChatWindow from './chatwindow.js';\nimport { Button } from 'react-bootstrap';\nimport \"./component.css\";\nimport firebase from '../config/firebaseconfig';\nimport ChatContainer from './chatbox2.js';\nimport ChatSection from './chatsection.js';\n\n\nclass ChatBox extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            chatbox: false,\n            shownotifications: false,\n            chatwindow: false,\n            chat: \"\",\n            chatlist: [],\n            notifications: [],\n            numberofchatnotifications: 0\n        }\n        this.handleOpen = this.handleOpen.bind(this);\n        this.openChat = this.openChat.bind(this);\n        this.openNotifications = this.openNotifications.bind(this);\n    }\n\n    handleOpen = (chat) => {\n        this.setState({\n            chatwindow: true,\n            chat: chat\n        })\n    }\n\n    openChat = (e) => {\n        e.preventDefault();\n        document.getElementById(\"notifications\").className = \"chatbox-toggle-buttons\";\n        if (this.state.shownotifications === true) {\n            this.setState({\n                shownotifications: false\n            })\n        }\n        this.setState({\n            chatbox: !this.state.chatbox\n        });\n        if (e.target.className === \"chatbox-toggle-buttons\") {\n            e.target.className = \"selected-chatbox-toggle-buttons\";\n        } else e.target.className = \"chatbox-toggle-buttons\";\n    }\n\n    openNotifications = (e) => {\n        e.preventDefault();\n        document.getElementById(\"chat\").className = \"chatbox-toggle-buttons\";\n        if (this.state.chatbox === true) {\n            this.setState({\n                chatbox: false\n            })\n        }\n        this.setState({\n            shownotifications: !this.state.shownotifications\n        });\n        if (e.target.className === \"chatbox-toggle-buttons\") {\n            e.target.className = \"selected-chatbox-toggle-buttons\";\n        } else e.target.className = \"chatbox-toggle-buttons\";\n    }\n\n    orderList = (list) => {\n        const chatlist = list.sort(function(a, b) {return a.time - b.time});\n        var chatlistandnotifications = [];\n\n        for (let i = 0; i < chatlist.length; i++) {\n            firebase.firestore().collection(\"chats\").doc(chatlist[i].messages)\n            .onSnapshot((doc) => {\n                const chatinfo = doc.data().chats_info;\n                if (chatinfo && chatinfo[chatinfo.length-1].from !== this.props.auth.uid) {\n                    this.setState(prevState => {\n                        return {notifications: prevState.notifications + 1};\n                    })\n                }\n            \n            })\n        }\n        var chatnumber = 0;\n        chatlist && chatlist.map((chat) => {\n            chatnumber = chatnumber + chat.notifications;\n            console.log(chatnumber);\n        })\n        this.setState({\n            chatlist: chatlist,\n            numberofchatnotifications: chatnumber\n        })\n    }\n\n    componentDidMount() {\n        const list = this.props.profile.chats_history;\n        if (list) {\n            this.orderList(list);\n        }\n        if (this.props.auth.uid) {\n        console.log(\"which part is first\");\n        var participants = [];\n        firebase.firestore().collection(\"rooms\").doc(this.props.auth.uid).get()\n        .then((doc) => {\n            if (doc.exists) {\n                if (doc.data().open === true) {\n                    participants = doc.data().participants;\n                    return participants;\n                }\n            }\n        })\n        .then((participants) => {\n            this.setState({\n                notifications: participants\n            })\n        })\n    }\n    }\n\n/*\n    componentDidUpdate() {\n        if (this.props.profile.chats_history) {\n            this.orderList(this.props.profile.chats_history)\n        }\n        if (this.props.auth.uid) {\n        var participants = [];\n        firebase.firestore().collection(\"rooms\").doc(this.props.auth.uid).get()\n        .then((doc) => {\n            if (doc.exists) {\n                if (doc.data().open === true) {\n                    participants = doc.data().participants;\n                    return participants;\n                }\n            }\n        })\n        .then((participants) => {\n            this.setState({\n                notifications: participants\n            })\n        })\n    }\n    }\n*/\n\n    render() {\n\n        let box;\n        if (this.state.chatbox) {\n            box =   <div className=\"chatbox-container\">\n            {this.state.chatlist && this.state.chatlist.map((chat) => {\n                return (\n                    <ChatSection chat={chat} />\n                    /*\n                    <button className=\"chatbox-section\" onClick={() => this.handleOpen(chat)}>\n                        <img src={chat.friend_image} style={{ width: \"40px\", height: \"40px\" }}></img>\n                        {chat.friend}\n                { chat.notifications > 0 ? <div className=\"notification\" style={{ float: \"right\"}}>{chat.notifications}</div> : null}\n                    </button>\n                    */\n                )           \n          })}\n          </div>\n        }\n        else if (this.state.shownotifications) {\n            box = <div className=\"chatbox-container\">\n            {this.state.notifications && this.state.notifications.map((notification) => {\n                return (\n                    <button className=\"chatbox-section\" onClick={() => this.handleOpen(notification)}>\n                        <div className=\"form-inline\">\n                        <img src={notification.image} style={{ width: \"40px\", height: \"40px\" }}></img>\n                        {notification.name} joins your session at {notification.time}\n                        </div>\n                    </button>\n                )           \n        })}\n            </div>\n        }\n\n        const chatlist = this.props.chatshistory;\n\n\n\n        return (\n           \n            \n            <div>\n           \n\n            <div className=\"chatbox-toggle\">\n                <button id=\"notifications\" className=\"chatbox-toggle-buttons\" onClick={this.openNotifications}>Notifications</button>\n                <button id=\"chat\" className=\"chatbox-toggle-buttons\" onClick={this.openChat}>\n                    Chat box\n                    {this.state.numberofchatnotifications > 0 ? <div className=\"notification\" style={{ float: \"right\"}}>{this.state.numberofchatnotifications}</div> : null}\n                </button>\n            </div>\n\n            \n            {box}\n            \n        { this.state.chatwindow ? <ChatWindow chat={this.state.chat}></ChatWindow> : null}\n        \n        </div>\n\n\n\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n      auth: state.firebase.auth,\n      profile: state.firebase.profile\n    }\n  }\n      \n  export default \n  connect(mapStateToProps)\n  (ChatBox);"]},"metadata":{},"sourceType":"module"}